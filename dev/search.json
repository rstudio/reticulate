[{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"column-major-order","dir":"Articles","previous_headings":"","what":"Column-major order","title":"Arrays in R and Python","text":"Column-major order used Fortran, Matlab, R, underlying core linear algebra libraries (BLAS). Sequential address locations translated array coordinates , j, k, … first array coordinates vary rapidly address, next array coordinates less rapidly, . instance, four address locations 1, 2, 3, 4 translated two two matrix coordinate system (, j) : phrase column-major comes matrix example, sequentially addressed data laid sequentially along columns matrix. concept “row” “column” don’t directly apply n-d arrays, idea holds. instance R language lays sequential addresses 1, 2, …, 8, 2x2x2 3-d array : Consider 3-d case shown . Given array dimensions d1=2, d2=2, d3=2, formula takes 1-based coordinates , j, k returns address location = + (j - 1) * d1 + (k - 1) * d2 * d1.","code":"address   i  j   1       1  1   2       2  1   3       1  2   4       2  2 address   i  j  k   1       1  1  1   2       2  1  1   3       1  2  1   4       2  2  1   5       1  1  2   6       2  1  2   7       1  2  2   8       2  2  2"},{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"row-major-order","dir":"Articles","previous_headings":"","what":"Row-major order","title":"Arrays in R and Python","text":"Row-major ordering different translation sequential address indices array coordinates, instead laying sequential data memory across rows matrices. Row-major ordering sometimes called “C” style ordering column-major ordering “Fortran” style. Python/NumPy refers orderings array flags C_CONTIGUOUS F_CONTIGUOUS, respectively. instance address locations 1, 2, 3, 4 translated 2x2 matrix coordinate system (, j) : Efficient wrappers BLAS routines exist row-major ordered arrays. completeness, 2x2x2 3-d example layout: similarly formula example converts 1-based array coordinates address indices : = k + (j - 1) * d3 + (- 1) * d3 * d2. See following notes general formula row- column-order coordinate address mapping, note use zero-based indexing. https://en.wikipedia.org/wiki/Row-_and_column-major_order#Address_calculation_in_general https://numpy.org/doc/stable/reference/arrays.ndarray.html","code":"address   i  j   1       1  1   2       1  2   3       2  1   4       2  2 address   i  j  k   1       1  1  1   2       1  1  2   3       1  2  1   4       1  2  2   5       2  1  1   6       2  1  2   7       2  2  1   8       2  2  2"},{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"python","dir":"Articles","previous_headings":"","what":"Python","title":"Arrays in R and Python","text":"Python NumPy library general. can use either row-major column-major ordered arrays, defaults row-major ordering. NumPy also supports sophisticated views data custom strides across non-contiguous regions memory.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"displaying-arrays","dir":"Articles","previous_headings":"","what":"Displaying arrays","title":"Arrays in R and Python","text":"R displays array data unambiguously-labeled coordinate indices. Python doesn’t show displays n-d array data different order R (making matters somewhat confusing R users). Consider following example creates displays identical 4x3x2 arrays R Python: ’s easier know coordinates go R labeled. Python, using column-major ordering, displays thing different order first indices grouped together order. see arrays , fact, , let’s pick values along just first “row”, values first index 1 (R) 0 (Python): specified R’s drop=FALSE argument preserve array dimensionality . use drop=TRUE (default) R returns 3x2 array column-major order–exactly result Python . Note Python result special view original array data, copy. case ’s stored contiguous memory addresses neither really row- column-major. shown array flags:","code":"array(1:24, c(4,3,2))  ## , , 1 ##      [,1] [,2] [,3] ## [1,]    1    5    9 ## [2,]    2    6   10 ## [3,]    3    7   11 ## [4,]    4    8   12 ##  ## , , 2 ##      [,1] [,2] [,3] ## [1,]   13   17   21 ## [2,]   14   18   22 ## [3,]   15   19   23 ## [4,]   16   20   24 import numpy as np np.reshape(np.arange(1,25), (4,3,2), \"F\")  ## array([[[ 1, 13], ##         [ 5, 17], ##         [ 9, 21]], ## ##        [[ 2, 14], ##         [ 6, 18], ##         [10, 22]], ## ##        [[ 3, 15], ##         [ 7, 19], ##         [11, 23]], ## ##        [[ 4, 16], ##         [ 8, 20], ##         [12, 24]]]) array(1:24, c(4, 3, 2))[1,, ,drop=FALSE]  ## , , 1 ##      [,1] [,2] [,3] ## [1,]    1    5    9 ##  ## , , 2 ##      [,1] [,2] [,3] ## [1,]   13   17   21 np.reshape(np.arange(1,25), (4,3,2), \"F\")[0]  ## array([[ 1, 13], ##        [ 5, 17], ##        [ 9, 21]]) array(1:24, c(4, 3, 2))[1,, ,drop=TRUE]  ##      [,1] [,2] ## [1,]    1   13 ## [2,]    5   17 ## [3,]    9   21 np.reshape(np.arange(1,25), (4,3,2), \"F\")[0].flags  ##  C_CONTIGUOUS : False ##  F_CONTIGUOUS : False ##  OWNDATA : False ##  WRITEABLE : True ##  ALIGNED : True ##  UPDATEIFCOPY : False"},{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"reticulate-with-care","dir":"Articles","previous_headings":"","what":"Reticulate with care","title":"Arrays in R and Python","text":"reticulate package lets us easily mix R Python code data. Recall R represents dense arrays column-major order Python/NumPy can represent dense arrays much generally. difference warrants attention can easily lead confusion! Remember following things working R Python arrays, especially n-d arrays n > 2. Dense R arrays presented Python/NumPy column-major NumPy arrays. NumPy arrays (column-major, row-major, otherwise) presented R column-major arrays, kind dense array R understands. R Python print arrays differently. Also worth knowing: Python array indices zero-based, R indices 1-based. R arrays copied Python need , otherwise data shared. Python arrays always copied moved R arrays. can sometimes lead three copies one array memory one time (moment written). Future versions reduce copy overhead two. Point number 3. introduces potential confusion. Let’s look examples explore points. following example creates 2x2x2 array Python using native NumPy row-major ordering imports R. Despite fact print differently, fact . Wait minute! look different! remember Python’s print order different. first “rows” (first index values) grouped together. Let’s pull elements first index 1 R result, without dropping unused dimension show precisely ’re indexing : Note first block printed Python output ! arrays really Python R, respectively. apparent differences merely result printing.","code":"library(reticulate) np <- import(\"numpy\", convert=FALSE) (x <- np$arange(1, 9)$reshape(2L, 2L, 2L))  ## [[[ 1.  2.] ##   [ 3.  4.]] ##  ##  [[ 5.  6.] ##   [ 7.  8.]]]  (y <- py_to_r(x))  ## , , 1 ##      [,1] [,2] ## [1,]    1    3 ## [2,]    5    7 ##  ## , , 2 ##      [,1] [,2] ## [1,]    2    4 ## [2,]    6    8 y[1,,, drop=FALSE]  ## , , 1 ##      [,1] [,2] ## [1,]    1    3 ##  ## , , 2 ##      [,1] [,2] ## [1,]    2    4  y[1,,, drop=TRUE]  ##      [,1] [,2] ## [1,]    1    2 ## [2,]    3    4"},{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"another-example","dir":"Articles","previous_headings":"Reticulate with care","what":"Another example","title":"Arrays in R and Python","text":"Let’s look another example, time array different lengths along dimension make things even clear (hopefully). Consider following 4x3x2 array constructed Python row-major order: , look quite different R Python arrays really . Let’s pick sub-array third index = 0 (Python), equivalently third index = 1 R. NumPy take() function equivalent example Python notation x[:, :, 0]; , entries third dimension index = 0. See https://numpy.org/doc/stable/reference/generated/numpy.take.html information. corresponding R notation, y[, , 1], returns thing example: 4x3 matrix. Despite different internal memory ordering, particularly despite awkward differences printing arrays, arrays indexed way language respectively.","code":"np <- import(\"numpy\", convert=FALSE) (x <- np$reshape(np$arange(1, 25), c(4L, 3L, 2L)))  ## [[[  1.   2.] ##   [  3.   4.] ##   [  5.   6.]] ##  ##  [[  7.   8.] ##   [  9.  10.] ##   [ 11.  12.]] ##  ##  [[ 13.  14.] ##   [ 15.  16.] ##   [ 17.  18.]] ##  ##  [[ 19.  20.] ##   [ 21.  22.] ##   [ 23.  24.]]]  (y <- py_to_r(x))  ## , , 1 ##      [,1] [,2] [,3] ## [1,]    1    3    5 ## [2,]    7    9   11 ## [3,]   13   15   17 ## [4,]   19   21   23 ##  ## , , 2 ##      [,1] [,2] [,3] ## [1,]    2    4    6 ## [2,]    8   10   12 ## [3,]   14   16   18 ## [4,]   20   22   24 np$take(x, 0L, 2L)  ## [[  1.   3.   5.] ##  [  7.   9.  11.] ##  [ 13.  15.  17.] ##  [ 19.  21.  23.]]  y[, , 1]  ##      [,1] [,2] [,3] ## [1,]    1    3    5 ## [2,]    7    9   11 ## [3,]   13   15   17 ## [4,]   19   21   23"},{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"what-about-going-from-r-column-major-arrays-to-python","dir":"Articles","previous_headings":"","what":"What about going from R column-major arrays to Python?","title":"Arrays in R and Python","text":"previous examples focused row-major arrays natively constructed Python. Let’s see happens start column-major arrays R work Python. Note Python version takes advantage NumPy’s extraordinary flexibility preserves R’s column-major ordering: can probably tell already previous sections arrays , obey indexing conventions. next example selects subarray third index array 0 (Python) 1 (R): ’s important remember order preserved Python copying array result back R: upshot arrays created either R Python indexed exactly either language.","code":"(y <- array(1:24, c(4, 3, 2)))  # In R  ## , , 1 ##      [,1] [,2] [,3] ## [1,]    1    5    9 ## [2,]    2    6   10 ## [3,]    3    7   11 ## [4,]    4    8   12 ##  ## , , 2 ##      [,1] [,2] [,3] ## [1,]   13   17   21 ## [2,]   14   18   22 ## [3,]   15   19   23 ## [4,]   16   20   24  (x <- np$array(y))              # and now in Python  ## [[[ 1 13] ##   [ 5 17] ##   [ 9 21]] ##  ##  [[ 2 14] ##   [ 6 18] ##   [10 22]] ##  ##  [[ 3 15] ##   [ 7 19] ##   [11 23]] ##  ##  [[ 4 16] ##   [ 8 20] ##   [12 24]]] x$flags  ##   C_CONTIGUOUS : False ##   F_CONTIGUOUS : True ##   OWNDATA : True ##   WRITEABLE : True ##   ALIGNED : True ##   UPDATEIFCOPY : False y[, , 1]  ##      [,1] [,2] [,3] ## [1,]    1    5    9 ## [2,]    2    6   10 ## [3,]    3    7   11 ## [4,]    4    8   12  np$take(x, 0L, 2L)  ## [[ 1  5  9] ##  [ 2  6 10] ##  [ 3  7 11] ##  [ 4  8 12]] py_to_r(np$take(x, 0L, 2L))  ##      [,1] [,2] [,3] ## [1,]    1    5    9 ## [2,]    2    6   10 ## [3,]    3    7   11 ## [4,]    4    8   12"},{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"but-the-array-i-created-in-r-ends-up-transposed-compared-to-ones-i-create-in-python","dir":"Articles","previous_headings":"What about going from R column-major arrays to Python?","what":"But the array I created in R ends up transposed compared to ones I create in Python?","title":"Arrays in R and Python","text":"Right. ’s just simple consequence default column-major row-major formats used R NumPy respectively. always free use R’s column-major format directly Python, example using “F” flag (Fortran): Note result just like one got starting R . Re-arranging R arrays row-major order requires work. R less flexible Python can’t explicitly change R’s memory order representation. array matrix can simply use byrow=TRUE. n-d array case, portion problem can reduced using byrow=TRUE followed judicious index permutation aperm(). one somewhat inefficient example: See last section different example. can verify ugly expression exactly reproduces NumPy row-major array subtracting R array native Python one: NumPy arrays , element-wise difference zero.","code":"np$reshape(np$arange(1, 25), c(4L, 3L, 2L), \"F\")  ## [[[  1.  13.] ##   [  5.  17.] ##   [  9.  21.]] ##  ##  [[  2.  14.] ##   [  6.  18.] ##   [ 10.  22.]] ##  ##  [[  3.  15.] ##   [  7.  19.] ##   [ 11.  23.]] ##  ##  [[  4.  16.] ##   [  8.  20.] ##   [ 12.  24.]]] y <- aperm(array(matrix(1:24, c(3 * 4, 2), byrow=TRUE),            c(3, 4, 2)), c(2, 1, 3)) np <- import(\"numpy\", convert=FALSE) o  <- import(\"operator\", convert=FALSE)  o$sub(np$arange(1, 25)$reshape(4L, 3L, 2L), np$array(y))  ## [[[ 0.  0.] ##   [ 0.  0.] ##   [ 0.  0.]] ##  ##  [[ 0.  0.] ##   [ 0.  0.] ##   [ 0.  0.]] ##  ##  [[ 0.  0.] ##   [ 0.  0.] ##   [ 0.  0.]] ##  ##  [[ 0.  0.] ##   [ 0.  0.] ##   [ 0.  0.]]]"},{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"reshaping-arrays","dir":"Articles","previous_headings":"What about going from R column-major arrays to Python?","what":"Reshaping arrays","title":"Arrays in R and Python","text":"R typically reshape array using dim<-() function. example: R, operation simply changes “dim” attribute array, effectively re-interpreting array indices specified using column-major semantics. However, NumPy reshape method uses row-major semantics default, mixing R Python code reshapes arrays find reshaping inconsistent use R dim<-() function. overcome inconsistency, array_reshape() function reshape R array using row-major semantics (.e. fill new dimensions row-major rather col-major order). example re-written : ’s example illustrate difference:","code":"dim(x) <- c(1000, 28, 28) x <- array_reshape(x, c(1000, 28, 28)) # let's construct a 2x2 array from a vector of 4 elements x <- 1:4  # rearrange will fill the array row-wise array_reshape(x, c(2, 2)) #      [,1] [,2] # [1,]    1    2 # [2,]    3    4  # setting the dimensions 'fills' the array col-wise dim(x) <- c(2, 2) x #      [,1] [,2] # [1,]    1    3 # [2,]    2    4"},{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"other-differences-warranting-caution","dir":"Articles","previous_headings":"","what":"Other differences warranting caution","title":"Arrays in R and Python","text":"’s worth noting analogs R’s apply() function Python behave differently. following excellent Mathesaurus reference https://mathesaurus.sourceforge.net/r-numpy.html applies well matrices vectors, misleading n-d arrays n > 2. particular, Mathesaurus says matrix, sum column Python may computed .sum(0), R (among possible ways) apply(, 2, sum). Although correct matrices, general quite right. precise R analog NumPy’s .sum(0) apply(, seq_along(dim())[-1], sum). words, .sum(0) means sum first dimension, returning array dimensions first dimension removed. ’s easy confused , let’s see example using 4x3x2 array, first Python: now corresponding sums R:","code":"library(reticulate) np <- import(\"numpy\", convert=FALSE) x  <- np$arange(1, 25)$reshape(c(4L, 3L, 2L)) x$sum(0)   # N. B. a 3x2 matrix!  ## [[ 40.  44.] ##  [ 48.  52.] ##  [ 56.  60.]]  # N. B. A tuple() object is required here (NumPy vectors won't work) x$sum(tuple(1L, 2L))  ## [  21.   57.   93.  129.] y <- py_to_r(x) apply(y, dim(y)[-1], sum)  ##      [,1] [,2] [,3] ## [1,]   40   48   56 ## [2,]   44   52   60  apply(y, 1, sum)  ## [1]  21  57  93 129"},{"path":"https://rstudio.github.io/reticulate/dev/articles/arrays.html","id":"addressing-an-issue-that-came-up","dir":"Articles","previous_headings":"","what":"Addressing an issue that came up","title":"Arrays in R and Python","text":"notes prepared response tensorflow issue now reticulate package https://github.com/rstudio/reticulate/issues/9. issue directly gets common source confusion n-d arrays R Python printed stored. lightly-edited reproduction reference Python code issue appears . issue goes reproduce example using R-generated arrays follows: However, already point see R-generated array array comparing np$array() . However, can see can easy make mistake simply way arrays printed! R array looks superficially printed Python array. Instead, need construct R array differently match row-major order Python, discussed previous sections. can use many approaches including: similar care ordering values b array can finish replicating example R (result reference Python example ).","code":"library(tensorflow) np   <- import(\"numpy\", convert=FALSE) a    <- np$arange(1, 9)$reshape(c(2L, 2L, 2L)) b    <- np$arange(1, 5)$reshape(c(2L, 2L, 1L)) c    <- tf$matmul(tf$constant(a), tf$constant(b)) tf$Session()$run(c)  ## , , 1 ##      [,1] [,2] ## [1,]    5   11 ## [2,]   39   53 A <- list(matrix(1:4, nrow=2, byrow=T), matrix(5:8, nrow=2, byrow=T)) A <- array(unlist(A), dim=c(2,2,2)) print(a)  ## [[[ 1.  2.] ##   [ 3.  4.]] ##  ##  [[ 5.  6.] ##   [ 7.  8.]]]   print(np$array(A))  ## [[[1 5] ##   [2 6]] ##  ##  [[3 7] ##   [4 8]]]   print(A)  ## , , 1 ##      [,1] [,2] ## [1,]    1    2 ## [2,]    3    4 ##  ## , , 2 ##      [,1] [,2] ## [1,]    5    6 ## [2,]    7    8 (A <- np$array(aperm(array(1:8, c(2,2,2)), c(3,2,1))))  ## [[[1 2] ##   [3 4]] ##  ##  [[5 6] ##   [7 8]]] A <- np$array(aperm(array(1:8, c(2,2,2)), c(3,2,1))) B <- np$array(aperm(array(1:4, c(2,2,1)), c(2,1,3))) C <- tf$matmul(tf$constant(A), tf$constant(B)) tf$Session()$run(C)  ## , , 1 ##      [,1] [,2] ## [1,]    5   11 ## [2,]   39   53"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Calling Python from R","text":"reticulate package provides R interface Python modules, classes, functions. example, code imports Python os module calls functions within : Functions data within Python modules classes can accessed via $ operator (analogous way interact R list, environment, reference class). reticulate package compatible versions Python >= 2.7. Integration NumPy optional requires NumPy >= 1.6.","code":"library(reticulate) os <- import(\"os\") os$listdir(\".\") [1] \".git\"             \".gitignore\"       \".Rbuildignore\"    \".RData\"            [5] \".Rhistory\"        \".Rproj.user\"      \".travis.yml\"      \"appveyor.yml\"      [9] \"DESCRIPTION\"      \"docs\"             \"external\"         \"index.html\"       [13] \"index.Rmd\"        \"inst\"             \"issues\"           \"LICENSE\"          [17] \"man\"              \"NAMESPACE\"        \"NEWS.md\"          \"pkgdown\"          [21] \"R\"                \"README.md\"        \"reticulate.Rproj\" \"src\"              [25] \"tests\"            \"vignettes\""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"python-version","dir":"Articles","previous_headings":"","what":"Python Version","title":"Calling Python from R","text":"default, reticulate uses version Python found PATH (.e. Sys.(\"python\")). use_python() function enables specify alternate version, example: use_virtualenv() use_condaenv() functions enable specify versions Python virtual conda environments, example: See article Python Version Configuration additional details.","code":"library(reticulate) use_python(\"/usr/local/bin/python\") library(reticulate) use_virtualenv(\"myenv\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"python-packages","dir":"Articles","previous_headings":"","what":"Python Packages","title":"Calling Python from R","text":"can install required Python packages using standard shell tools like pip conda. Alternately, reticulate includes set functions managing installing packages within virtualenvs Conda environments. See article Installing Python Packages additional details.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"type-conversions","dir":"Articles","previous_headings":"","what":"Type Conversions","title":"Calling Python from R","text":"calling Python, R data types automatically converted equivalent Python types. values returned Python R converted back R types. Types converted follows: Python object custom class returned R reference object returned. can call methods access properties object just instance R reference class.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"importing-modules","dir":"Articles","previous_headings":"","what":"Importing Modules","title":"Calling Python from R","text":"import() function can used import Python module. example: import_main() import_builtins() functions give access main module code executed default collection built Python functions. example: main module generally useful executed Python code file string want get access results (see section details).","code":"difflib <- import(\"difflib\") difflib$ndiff(foo, bar)  filecmp <- import(\"filecmp\") filecmp$cmp(dir1, dir2) main <- import_main()  builtins <- import_builtins() builtins$print('foo')"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"sourcing-scripts","dir":"Articles","previous_headings":"","what":"Sourcing Scripts","title":"Calling Python from R","text":"source_python() function source Python script make objects creates available within R environment (default calling environment). example, consider following Python script: source using source_python() function can call add() function directly R:","code":"def add(x, y):   return x + y source_python('add.py') add(5, 10) [1] 15"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"executing-code","dir":"Articles","previous_headings":"","what":"Executing Code","title":"Calling Python from R","text":"can execute Python code within main module using py_run_file py_run_string functions. can access objects created using py object exported reticulate:","code":"library(reticulate)  py_run_file(\"script.py\")  py_run_string(\"x = 10\")  # access the python main module via the 'py' object py$x"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"object-conversion","dir":"Articles","previous_headings":"","what":"Object Conversion","title":"Calling Python from R","text":"default Python objects returned R converted equivalent R types. However, ’d rather make conversion Python R explicit deal native Python objects default can pass convert = FALSE import function. case Python R conversion disabled module returned import. example: illustrated , need access R object end computations can call py_to_r() function explicitly.","code":"# import numpy and specify no automatic Python to R conversion np <- import(\"numpy\", convert = FALSE)  # do some array manipulations with NumPy a <- np$array(c(1:4)) sum <- a$cumsum()  # convert to R explicitly at the end py_to_r(sum)"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting Help","title":"Calling Python from R","text":"can print documentation Python object using py_help() function. example:","code":"os <- import(\"os\") py_help(os$chdir)"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"lists-tuples-and-dictionaries","dir":"Articles","previous_headings":"","what":"Lists, Tuples, and Dictionaries","title":"Calling Python from R","text":"automatic conversion R types Python types works well cases, occasionally need explicit R side provide Python type expects. example, Python API requires list pass single element R vector converted Python scalar. overcome simply use R list function explicitly: Similarly, Python API might require tuple rather list. case can use tuple() function: R named lists converted Python dictionaries however can also explicitly create Python dictionary using dict() function: might useful need pass dictionary uses complex object (opposed string) key.","code":"foo$bar(indexes = list(42L)) tuple(\"a\", \"b\", \"c\") dict(foo = \"bar\", index = 42L)"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"numeric-types-and-indexes","dir":"Articles","previous_headings":"","what":"Numeric Types and Indexes","title":"Calling Python from R","text":"R Python different default numeric types. write 42 R considered floating point number whereas 42 Python considered integer. means Python API expects integer, need sure use L suffix within R. example, foo function requires integer index argument : Python collections addressed using 0-based indices rather 1-based indices might familiar R. address first item array R write: Whereas calling method Python via reticulate takes index write address first item: Note use 0-based index well L indicate t value integer.","code":"foo$bar(index = 42L) items[[1]] items$get(0L)"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"arrays","dir":"Articles","previous_headings":"","what":"Arrays","title":"Calling Python from R","text":"R matrices arrays converted automatically NumPy arrays. converting R NumPy, NumPy array mapped directly underlying memory R array (copy made). case, NumPy array uses column-based memory layout compatible R (.e. Fortran style rather C style). converting NumPy R, R receives column-ordered copy NumPy array. can also manually convert R arrays NumPy using np_array() function. example, might needed create NumPy array C rather Fortran style -memory layout (higher performance row-oriented computations) wanted control data type NumPy array explicitly. example uses np_array(): Reasoning arrays use distinct -memory orders can tricky. Arrays R Python article provides additional details. Also, always remember calling NumPy methods array indices 0 rather 1 based require L suffix indicate integers.","code":"a <- np_array(c(1:8), dtype = \"float16\") a <- np_array(c(1:8), order = \"C\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"data-frames","dir":"Articles","previous_headings":"","what":"Data Frames","title":"Calling Python from R","text":"R data frames can automatically converted Pandas DataFrames. default, columns converted using rules governing R array <-> NumPy array conversion, couple extensions provided: R data frame row names, generated Pandas DataFrame re-indexed using row names (vice versa). Special handling also available DatetimeIndex associated Pandas DataFrame; however, R supports character vectors row names converted character first.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"using-pandas-nullable-data-types","dir":"Articles","previous_headings":"Data Frames","what":"Using Pandas nullable data types","title":"Calling Python from R","text":"Pandas experimental support nullable data types. data types built-support missing values, represented pd.NA using allows us better represent R NA values. Users can opt-use Pandas nullable data types instead numpy arrays setting reticulate.pandas_use_nullable_dtypes TRUE. example:","code":"df <- data.frame(   int = c(NA, 1:4),   num = c(NA, rnorm(4)),   lgl = c(NA, rep(c(TRUE, FALSE), 2)),   string = c(NA, letters[1:4]) ) options(reticulate.pandas_use_nullable_data_types = TRUE) r_to_py(df) #>     int       num    lgl string #> 0  <NA>      <NA>   <NA>   <NA> #> 1     1 -0.697855   True      a #> 2     2 -0.253042  False      b #> 3     3  0.385421   True      c #> 4     4  0.519933  False      d"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"sparse-matrices","dir":"Articles","previous_headings":"","what":"Sparse Matrices","title":"Calling Python from R","text":"Sparse matrices created Matrix R package can converted Scipy CSC matrix, vice versa. often useful want pass sparse matrices Python functions accepts Scipy CSC matrix take advantage format, efficient column slicing fast matrix vector products. example, first create sparse matrix using Matrix::sparseMatrix(): sparse matrix looks like : Let’s convert Scipy CSC matrix using r_to_py(): Note right-hand side contains non-zero entries matrix left-hand side represents locations matrix. can also use py_to_r() convert CSC matrix back Matrix::dgCMatrix representation can manipulated easily R original sparse matrix created earlier using Matrix::sparseMatrix():","code":"library(Matrix) N <- 5 dgc_matrix <- sparseMatrix(   i = sample(N, N),   j = sample(N, N),   x = runif(N),   dims = c(N, N)) > dgc_matrix 5 x 5 sparse Matrix of class \"dgCMatrix\"                                                          [1,] 0.2264952 .          .          .         .         [2,] .         .          .          .         0.3927282 [3,] .         .          .          0.9215908 .         [4,] .         .          0.01777771 .         .         [5,] .         0.05885743 .          .         . > csc_matrix <- r_to_py(x) > csc_matrix   (0, 0)    0.226495201467   (4, 1)    0.0588574311696   (3, 2)    0.0177777127828   (2, 3)    0.921590822982   (1, 4)    0.392728160601 > py_to_r(csc_matrix) 5 x 5 sparse Matrix of class \"dgCMatrix\"                                                          [1,] 0.2264952 .          .          .         .         [2,] .         .          .          .         0.3927282 [3,] .         .          .          0.9215908 .         [4,] .         .          0.01777771 .         .         [5,] .         0.05885743 .          .         ."},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"with-contexts","dir":"Articles","previous_headings":"","what":"With Contexts","title":"Calling Python from R","text":"R generic function can used interact Python context manager objects (Python use keyword ). example: example opens file ensures automatically closed end block. Note use %% operator alias object created context manager.","code":"py <- import_builtins() with(py$open(\"output.txt\", \"w\") %as% file, {   file$write(\"Hello, there!\") })"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"iterators","dir":"Articles","previous_headings":"","what":"Iterators","title":"Calling Python from R","text":"Python API returns iterator generator, can interact using iterate() function. iterate() function can used apply R function item yielded iterator: don’t pass function iterate results collected R vector: Note Iterators drained values iterate():","code":"iterate(iter, print) results <- iterate(iter) a <- iterate(iter) # results are not empty b <- iterate(iter) # results are empty since items have already been drained"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"element-level-iteration","dir":"Articles","previous_headings":"Iterators","what":"Element Level Iteration","title":"Calling Python from R","text":"can also iterate element--element basis using iter_next() function. example: default iter_next() return NULL iteration complete can provide custom completed value returned instead. example: Note iterators/generators Python infinite. case caller need custom logic determine terminate loop.","code":"while (TRUE) {   item <- iter_next(iter)   if (is.null(item))     break } while (TRUE) {   item <- iter_next(iter, completed = NA)   if (is.na(item))     break }"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"generators","dir":"Articles","previous_headings":"Iterators","what":"Generators","title":"Calling Python from R","text":"Python generators functions implement Python iterator protocol. Similarly, reticulate generator() function enables create Python iterator R function. Python, generators produce values using yield keyword. R, values simply returned function. One benefit yield keyword enables successive iterations use state previous iterations. R, can done returning function mutates enclosing environment via <<- operator. example: want indicate end iteration, return NULL function: Note can change value indicates end iteration using completed parameter (e.g. py_iterator(func, completed = NA)).","code":"# define a generator function sequence_generator <-function(start) {   value <- start   function() {     value <<- value + 1     value   } }  # convert the function to a python iterator iter <- py_iterator(sequence_generator(10)) sequence_generator <-function(start) {   value <- start   function() {     value <<- value + 1     if (value < 100)       value     else       NULL   } }"},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"signatures","dir":"Articles","previous_headings":"Functions","what":"Signatures","title":"Calling Python from R","text":"default R functions converted Python generic signature (function(...)), ’s neither keyword argument default values arguments. example, apply r_to_py() R function use inspect Python module get converted function’s argument spec. can see signature wrapped function looks different original R function’s signature. default conversion typically works fine, however Python libraries strict checking function signatures user provided callbacks. cases generic function(...) signature fail checking. cases can use py_func() wrap R function wrapped function exactly signature original R function, e.g. one argument without default value another argument b default value 1.5. Note signature R function must contain esoteric Python-incompatible constructs. example, R function signature like function(= 1, b) since Python function requires arguments without default values appear arguments default values.","code":"> inspect <- import(\"inspect\") > converted_func <- r_to_py(function(a, b = 1.5) {}) > inspect$getargspec(converted_func) ArgSpec(args=[], varargs='args', keywords='kwargs', defaults=None) > wrapped_func <- py_func(function(a, b = 1.5) {}) > inspect$getargspec(wrapped_func) ArgSpec(args=['a', 'b'], varargs=None, keywords=None, defaults=(1.5,))"},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"background-threads","dir":"Articles","previous_headings":"Functions","what":"Background Threads","title":"Calling Python from R","text":"cases Python libraries invoke callbacks Python background thread. Since R code must run main thread, won’t work default pass R function callback. work around , can use py_main_thread_func(), provide special wrapper R function ensures called main thread.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"advanced","dir":"Articles","previous_headings":"","what":"Advanced","title":"Calling Python from R","text":"several advanced functions available useful principally creating high level R interfaces Python libraries.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"python-objects","dir":"Articles","previous_headings":"Advanced","what":"Python Objects","title":"Calling Python from R","text":"Typically interacting Python objects R involves using $ operator access whatever properties functions object need. using $, Python objects automatically converted R equivalents possible. following functions enable interact Python objects lower level (e.g. conversion R done unless explicitly call py_to_r function):","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"pickle","dir":"Articles","previous_headings":"Advanced","what":"Pickle","title":"Calling Python from R","text":"can save load Python objects (via pickle) using py_save_object py_load_object functions:","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"configuration","dir":"Articles","previous_headings":"Advanced","what":"Configuration","title":"Calling Python from R","text":"following functions enable query information Python configuration available current system.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"output-control","dir":"Articles","previous_headings":"Advanced","what":"Output Control","title":"Calling Python from R","text":"functions enable capture suppress output Python:","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"miscellaneous","dir":"Articles","previous_headings":"Advanced","what":"Miscellaneous","title":"Calling Python from R","text":"functions provide miscellaneous lower-level capabilities:","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/calling_python.html","id":"learning-more","dir":"Articles","previous_headings":"","what":"Learning More","title":"Calling Python from R","text":"following articles cover additional aspects using reticulate: R Markdown Python Engine Python Version Configuration Installing Python Packages Using reticulate R Package Arrays R Python","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"declaring-python-requirements","dir":"Articles","previous_headings":"","what":"Declaring Python Requirements","title":"Using reticulate in an R Package","text":"R package authors can use reticulate make Python packages accessible users R. vignette documents best practices package authors can declare import package’s Python dependencies. reticulate::import() can used load Python module, provide mechanism installing Python package actually making sure module available. reticulate::py_require() helps fill gap, giving R package authors way declare Python package dependencies way can collated respected across multiple packages using reticulate, unique requirements. Beginning Reticulate version 1.41, R packages can declare Python requirements py_require(). Python package dependencies requested via py_require() automatically provisioned made available user Python session later initialized, via ephemeral Python virtual environment. requested packages can imported used within R package required.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"typical-usage","dir":"Articles","previous_headings":"Declaring Python Requirements","what":"Typical Usage","title":"Using reticulate in an R Package","text":"py_require() typically called .onLoad(), shown : py_require() can also called package functions modify dependencies package loaded. useful packages support multiple configurations. example, keras3 R package supports multiple backends. .onLoad(), keras3 configures default backend, users can choose different one using use_backend() function. function calls py_require() different values based selected backend: keras3 users can specify backend like :","code":".onLoad <- function(libname, pkgname) {   reticulate::py_require(\"scipy\") } .onLoad <- function(...) {   py_require(\"keras\")   use_backend(\"tensorflow\") # Default to TensorFlow }  #' @export use_backend <- function(backend, gpu = TRUE) {   py_require(\"tensorflow\", action = \"remove\") # Remove default backend    switch(paste0(backend, \"_\", get_os()),     jax_Linux = if (gpu) py_require(\"jax[cuda12]\") else py_require(\"jax[cpu]\"),     jax_macOS = py_require(c(\"jax\", if (gpu) \"jax-metal\")),     jax_Windows = py_require(\"jax\"),     tensorflow_Linux = { ... },     tensorflow_macOS = { ... },     tensorflow_Windows = { ... },     torch_Linux = { ... },     torch_macOS = { ... },     torch_Windows = { ... }   ) } library(keras3) use_backend(\"jax\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"best-practices","dir":"Articles","previous_headings":"Declaring Python Requirements","what":"Best Practices","title":"Using reticulate in an R Package","text":"Calling py_require() package generally safe recommended. ensures dependencies declared effect users manage Python environments. py_require() replaces older approaches, listing dependencies DESCRIPTION file calling use_virtualenv(required = FALSE) .onLoad(). mindful R packages users may also declare Python requirements. Avoid restrictive version constraints. version constraint necessary, prefer >= != <=, latter can quickly become outdated. Also, mindful R package’s requirements combined potentially wide variety user requirements, like exclude_newer. example user script header:","code":"library(pysparklyr) # declares requirements for PySpark library(keras3)     # declares requirements for default 'tensorflow' backend use_backend(\"jax\")  # removes 'tensorflow' requirements, adds 'jax' requirements  library(reticulate) py_require(c(\"scipy\", \"polars\"))         # user-declared requirements py_require(python_version = \">=3.12\") py_require(exclude_newer = \"2025-02-20\")  np <- import(\"numpy\")  # <-- Python initialized ..."},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"declaring-optional-dependencies","dir":"Articles","previous_headings":"Declaring Python Requirements","what":"Declaring Optional Dependencies","title":"Using reticulate in an R Package","text":"’s recommended py_require() calls made reticulate initializes Python session. However, rarely used optional dependencies, requirement can declared right use: Calling py_require() Python initialized causes reticulate activate new ephemeral virtual environment containing additional requirements. adding packages permitted Python initialized; calling py_require() action=\"set\" action=\"remove\" possible.","code":"model_to_dot <- function(x, ...) {   reticulate::py_require(\"pydot\")   keras$utils$model_to_dot(x, ...) }"},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"delay-loading-python-modules","dir":"Articles","previous_headings":"","what":"Delay Loading Python Modules","title":"Using reticulate in an R Package","text":"R package wraps Python modules, ’s common import within .onLoad(). Use delay_load flag import() allow: Successful R package loading even Python packages installed (important CRAN testing). Users specify Python installation using package. Example: Without delay_load, Python load immediately, preventing users configuring environment.","code":"scipy <- NULL  .onLoad <- function(libname, pkgname) {   reticulate::py_require(\"scipy\")   scipy <<- reticulate::import(\"scipy\", delay_load = TRUE) }"},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"installing-python-dependencies","dir":"Articles","previous_headings":"","what":"Installing Python Dependencies","title":"Using reticulate in an R Package","text":"py_require() recommended approach managing Python dependencies. However, users prefer manually manage Python installation, can document Python packages required. py_install() function provides high-level interface installing Python packages. packages default installed within currently active Python installation. Alternatively, create wrapper function py_install() (virtualenv_create()) installs dependencies dedicated environment: Note calling py_install() ephemeral environment generated py_require() declared requirements generate warning.","code":"library(reticulate) py_install(\"scipy\") install_scipy <- function(envname = \"r-scipy\", method = \"auto\", ...) {   reticulate::py_install(\"scipy\", envname = envname, method = method, ...) }"},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"checking-and-testing-on-cran","dir":"Articles","previous_headings":"","what":"Checking and Testing on CRAN","title":"Using reticulate in an R Package","text":"ensure package well behaved CRAN: Use delay_load defer module loading: Skip tests required modules unavailable:","code":"scipy <- NULL  .onLoad <- function(libname, pkgname) {   # delay load foo module (will only be loaded when accessed via $)   scipy <<- reticulate::import(\"scipy\", delay_load = TRUE) } skip_if_no_scipy <- function() {   if (!reticulate::py_module_available(\"scipy\"))     skip(\"scipy not available for testing\") }  test_that(\"Things work as expected\", {   skip_if_no_scipy()   # test code here... })"},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"implementing-s3-methods","dir":"Articles","previous_headings":"","what":"Implementing S3 Methods","title":"Using reticulate in an R Package","text":"Python objects exposed reticulate retain Python classes R, allowing define S3 methods . can useful customizing objects printed structured R. However, Python objects persist across R sessions, meaning R object previously pointed Python object become NULL external pointer reloaded. safely handle cases, use py_is_null_xptr(), shown example: prevents errors interacting Python object previous session. prevents errors attempting interact Python object previous session.","code":"print.my_python_object <- function(x, ...) {   if (py_is_null_xptr(x)) {     cat(\"<Python object is no longer available>\\n\")   } else {     cat(py_to_r(x))   } }"},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"supporting-versions-with-different-s3-classes","dir":"Articles","previous_headings":"Implementing S3 Methods","what":"Supporting Versions with Different S3 Classes","title":"Using reticulate in an R Package","text":"Python S3 method object generated Python modules submodules object defined. sophisticated Python packages, path might change package versions. instance, can access Model object keras.Model Python. However, depending Keras Python package version, actual class definition Model may located submodule like keras._internals.src keras._internals.models, since class module path considered internal implementation detail Python package, can vary across Python package versions. result, S3 class Python object also change, depending Python package version. support changing S3 classes, instead registering methods NAMESPACE roxygen, manually register .onLoad():","code":"# Python class `DocumentConverterResult` changes with different MarkItDown versions. py_to_r.markitdown.DocumentConverterResult <- function(x) {   paste0(\"# \", x$title, \"\\n\\n\", x$text_content) }  .onLoad <- function(libname, pkgname) {   reticulate::py_require(\"markitdown\")    reticulate::py_register_load_hook(\"markitdown\", function() {     markitdown <- reticulate::import(\"markitdown\")     registerS3method(       \"py_to_r\",       nameOfClass(markitdown$DocumentConverterResult),       py_to_r.markitdown.DocumentConverterResult,       environment(reticulate::py_to_r)     )   }) }"},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"converting-between-r-and-python","dir":"Articles","previous_headings":"Implementing S3 Methods","what":"Converting between R and Python","title":"Using reticulate in an R Package","text":"reticulate provides generics r_to_py() converting R objects Python objects, py_to_r() converting Python objects back R objects. Package authors can provide methods generics convert Python R objects otherwise handled reticulate. reticulate provides conversion operators commonly used Python objects, including: Built-Python objects (lists, dictionaries, numbers, strings, tuples) NumPy arrays, Pandas objects (Index, Series, DataFrame), Python datetime objects. see reticulate missing support conversion one objects packages, please let us know ’ll try implement missing converter. Python packages set, can provide conversion operators extension package.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"writing-your-own-r_to_py-methods","dir":"Articles","previous_headings":"Implementing S3 Methods","what":"Writing your own r_to_py() methods","title":"Using reticulate in an R Package","text":"r_to_py() accepts convert argument, controls objects generated created Python object converted. illustrate, consider difference two cases: accomplished use convert flag, set Python object wrappers used reticulate. Therefore, ’re writing method r_to_py.foo() object class foo, take care preserve convert flag generated object. typically done : Passing convert along appropriate lower-level r_to_py() method; Explicitly setting convert attribute returned Python object. example second:","code":"library(reticulate)  # [convert = TRUE] => convert Python objects to R when appropriate sys <- import(\"sys\", convert = TRUE) class(sys$path) # [1] \"character\"  # [convert = FALSE] => always return Python objects sys <- import(\"sys\", convert = FALSE) class(sys$path) # [1] \"python.builtin.list\" \"python.builtin.object\" # suppose 'make_python_object()' creates a Python object # from R objects of class 'my_r_object'. r_to_py.my_r_object <- function(x, convert) {   object <- make_python_object(x)   assign(\"convert\", convert, envir = object)   object }"},{"path":"https://rstudio.github.io/reticulate/dev/articles/package.html","id":"using-github-actions","dir":"Articles","previous_headings":"","what":"Using GitHub Actions","title":"Using reticulate in an R Package","text":"testing R packages GitHub Actions, dependencies declared via py_require() resolve automatically additional steps. extra Python test dependencies, declare using py_require() tests/testthat/helper.R. standard R-CMD-check workflow work: Optionally, can pre-download Python dependencies separate step cleaner CI logs: prefer use manually managed Python environment, can :","code":"- uses: r-lib/actions/setup-r@v2  - uses: r-lib/actions/setup-r-dependencies@v2   with:     extra-packages: rcmdcheck  - uses: r-lib/actions/check-r-package@v2 - uses: r-lib/actions/setup-r@v2   with:     r-version: release  - uses: r-lib/actions/setup-r-dependencies@v2   with:     extra-packages: rcmdcheck local::.  - run: |     library(mypackage)      # <-- declare requirements in .onLoad()     reticulate::py_config() # <-- resolves the ephemeral python environment  - uses: r-lib/actions/check-r-package@v2   # The ephemeral python environment from previous step is reused from cache. - uses: actions/setup-python@v4   with:     python-version: \"3.x\"  - name: setup r-reticulate venv   shell: Rscript {0}   run: |     path_to_python <- reticulate::virtualenv_create(       envname = \"r-reticulate\",       python = Sys.which(\"python\"),       packages = c(\"numpy\", \"other-packages\")     )     writeLines(sprintf(\"RETICULATE_PYTHON=%s\", path_to_python),                Sys.getenv(\"GITHUB_ENV\"))  - uses: r-lib/actions/check-r-package@v2"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_dependencies.html","id":"creating-a-pit-of-success","dir":"Articles","previous_headings":"","what":"Creating a “Pit of Success”","title":"Managing an R Package's Python Dependencies","text":"Overall, goal R package author using reticulate create default experience works reliably doesn’t require users intervene sophisticated understanding Python installation management. time, also easy adjust default behavior. two key questions keep mind: default behavior user expresses preference specific Python installation? can users express preference specific Python installation satisfiable (want )? Packages like tensorflow approach task providing helper function, tensorflow::install_tensorflow(), documenting users can call function prepare environment. example: best practice, R package’s Python dependencies default installing isolated virtual environment specifically designated R package. minimizes risk inadvertently disrupting another Python installation user’s system. example, install_tensorflow() takes argument envname default value \"r-tensorflow\". default value ensures install_tensorflow() install environment named \"r-tensorflow\", optionally creating needed. counterpart default behavior install_tensorflow() work happens tensorflow::.onLoad(), R package expresses preference, behalf user, use r-tensorflow environment exists. Inside package, two parts work together create “pit success”: R package: .onLoad() expresses reticulate soft preference environment named “r-tensorflow”, install_tensorflow(), provides convenient way make optional hint .onLoad() actionable, actually creating “r-tensorflow” environment. setup, default experience user call install_tensorflow() (creating “r-tensorflow” environment). Subsequently, calls library(tensorflow) cause reticulate use r-tensorflow environment, everything “just work”. risk disrupting another Python environment, one disrupting, minimal, since environment designated R package. time, environment disrupted time later (perhaps something conflicting Python dependencies manually installed), user can easily revert working state calling install_tensorflow(). Python environments can occasionally get broken state conflicting package versions installed, reliable way get back working state delete environment start fresh one. reason, install_tensorflow() removes pre-existing “r-tensorflow” Python environments first. Deleting Python environment however something done lightly, default delete default “r-tensorflow” environment. example helper install_tensorflow() “reset” behavior.","code":"library(tensorflow) install_tensorflow() # use tensorflow install_tensorflow <- function(..., envname = \"r-tensorflow\") {   reticulate::py_install(\"tensorflow\", envname = envname, ...) }   .onLoad <- function(...) {   use_virtualenv(\"r-tensorflow\", required = FALSE) } #' @importFrom reticulate py_install virtualenv_exists virtualenv_remove install_tensorflow <-   function(...,            envname = \"r-tensorflow\",            new_env = identical(envname, \"r-tensorflow\")) {    if(new_env && virtualenv_exists(envname))     virtualenv_remove(envname)    py_install(packages = \"tensorflow\", envname = envname, ...) }"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_dependencies.html","id":"managing-multiple-package-dependencies","dir":"Articles","previous_headings":"","what":"Managing Multiple Package Dependencies","title":"Managing an R Package's Python Dependencies","text":"One drawback isolated-package-environments approach multiple R packages using reticulate use, packages won’t able use preferred Python environment R session (since can one active Python environment time within R session). resolve , users take slightly active role managing Python environments. However, can simple supplying unique environment name. straightforward approach users create dedicated Python environment specific project. example, user can create virtual environment project directory, like : described Order Python Discovery guide, reticulate automatically discover use Python virtual environment current working directory like . Alternatively, environment exists outside project directory, user place .Renviron .Rprofile file project directory, ensuring reticulate use always use Python environment configured project. example, .Renviron file project directory contain: .Rprofile file project directory contain: approach minimizes risk existing, already working, Python environment accidentally broken installing packages, due inadvertently upgrading downgrading Python packages already installed environment. Another approach users install R packages’ Python dependencies another Python environment already search path. example, users can opt-installing default r-reticulate venv: can install one package’s dependencies another package’s default environment. example, installing spark default \"r-tensorflow\" environment: approach—exporting installation helper function defaults particular environment, hint .onLoad() use environment—one way create “pit success”. encourages default workflow robust reliable, especially users yet familiar mechanics Python installation management. time, installation helper function empowers users manage Python environments simply providing environment name. makes easy combine dependencies multiple R packages, , anything go wrong due conflicting Python dependencies, also provides straightforward way revert working state time, calling helper function without arguments.","code":"envname <- \"./venv\" tensorflow::install_tensorflow(envname = envname) pysparklyr::install_pyspark(envname = envname) RETICULATE_PYTHON_ENV=~/my/project/venv Sys.setenv(\"RETICULATE_PYTHON_ENV\" = \"~/my/project/venv\") tensorflow::install_tensorflow(envname = \"r-reticulate\") tensorflow::install_tensorflow() # creates an \"r-tensorflow\" env pysparklyr::install_pyspark(envname = \"r-tensorflow\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_dependencies.html","id":"automatic-configuration","dir":"Articles","previous_headings":"","what":"Automatic Configuration","title":"Managing an R Package's Python Dependencies","text":"alternative approach one described automatic configuration. ’s possible client packages declare Python dependencies way automatically installed currently activated Python environment. maximally convenient approach; works can feel little bit magical, also potentially dangerous can result frustration something goes wrong. can opt behavior package author packages DESCRIPTION file, use Config/reticulate field. automatic configuration, reticulate envisions world wherein different R packages wrapping Python packages can live together Python environment / R session. approach works Python packages wrapped don’t conflicting dependencies. must judge Python dependencies R package requires–automatically bootstrapping installation Python package user’s active Python environment, whatever may contain, safe action perform default. example, likely safe action Python package like requests, perhaps safe choice frequently updated package many dependencies, like torch tensorflow (e.g., ’s uncommon torch tensorflow conflicting version requirements dependencies like numpy cuda). Keep mind , unlike CRAN, PyPI perform compatibility consistency checks across package repository.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_dependencies.html","id":"using-configreticulate","dir":"Articles","previous_headings":"Automatic Configuration","what":"Using Config/reticulate","title":"Managing an R Package's Python Dependencies","text":"package author, can opt automatic configuration like . example, package rscipy acted interface SciPy Python package, might use following DESCRIPTION file:","code":"Package: rscipy Title: An R Interface to scipy Version: 1.0.0 Description: Provides an R interface to the Python package scipy. Config/reticulate:   list(     packages = list(       list(package = \"scipy\")     )   ) < ... other fields ... >"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_dependencies.html","id":"installation","dir":"Articles","previous_headings":"Automatic Configuration","what":"Installation","title":"Managing an R Package's Python Dependencies","text":", reticulate take care automatically configuring Python environment user rscipy package loaded used (.e. ’s longer necessary provide user special install_tensorflow()-type function, though ’s still recommended ). Specifically, rscipy package loaded, following occur: Unless user explicitly instructed reticulate use existing Python environment, reticulate prompt user download install Miniconda (necessary). , Python session initialized reticulate, declared dependencies loaded packages Config/reticulate discovered. dependencies installed appropriate Conda environment, provided Miniconda installation. case, end user workflow exactly R package Python dependencies: user compatible version Python available system, prompted install Miniconda. Python already, required Python packages (case scipy) installed standard shared environment R sessions (typically virtual environment, Conda environment named “r-reticulate”). effect, users pay one-time, mostly automated initialization cost order use package, things work R package . particular, users otherwise spared details reticulate works.","code":"library(rscipy) # use the package"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_dependencies.html","id":"onload-configuration","dir":"Articles","previous_headings":"Automatic Configuration","what":".onLoad Configuration","title":"Managing an R Package's Python Dependencies","text":"cases, user may try load package Python already initialized. ensure reticulate can still configure active Python environment, can include following code: instruct reticulate immediately try configure active Python environment, installing required Python packages necessary.","code":".onLoad <- function(libname, pkgname) {   reticulate::configure_environment(pkgname) }"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_dependencies.html","id":"versions","dir":"Articles","previous_headings":"","what":"Versions","title":"Managing an R Package's Python Dependencies","text":"goal mechanisms allow easy interoperability R packages Python dependencies, well minimize specialized version/configuration steps end users. end, reticulate (default) track older version Python current release, giving Python packages time adapt. Python 2 supported. Tools breaking rules yet implemented, provided need arises.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_dependencies.html","id":"format","dir":"Articles","previous_headings":"","what":"Format","title":"Managing an R Package's Python Dependencies","text":"Declared Python package dependencies following format: package: name Python package. version: version package installed. left unspecified, latest available version installed. set exceptional cases—example, recently-released version Python package breaks compatibility package (Python packages) fundamental way. multiple R packages request different versions particular Python package, reticulate signal warning. pip: Whether package retrieved PyPI using pip. FALSE, downloaded Anaconda repositories instead. example, change Config/reticulate directive specify scipy [1.3.0] installed PyPI (pip):","code":"Config/reticulate:   list(     packages = list(       list(package = \"scipy\", version = \"1.3.0\", pip = TRUE)     )   )"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_packages.html","id":"declaring-python-requirements-with-py_require","dir":"Articles","previous_headings":"","what":"Declaring Python Requirements with py_require()","title":"Installing Python Packages","text":"py_require() recommended way declare Python dependencies. py_require() call similar library() call Python packages. py_require(): appear near beginning R script. Declares Python dependencies needed script. Applies current R session. effect called multiple times arguments. R packages can also call py_require() loaded, declared dependencies combined declared user loaded R packages. Calling py_require(\"pkg\") updates Python requirements manifest reticulate maintains current R session. manifest used manually managed Python environment found earlier Python Order Discovery. manifest consulted requirements resolved reticulate needs initialize Python, typically first import() call. Requirements resolved cached ephemeral environment specific unique set dependencies declared. required, generally recommended declare Python dependencies reticulate initializes Python. simplest approach place py_require() calls start script, alongside library() calls. Usage example:","code":"library(reticulate) py_require(\"jax\")    # Declare jax is a requirement  jax <- import(\"jax\") # <-- initialize Python with declared requirements"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_packages.html","id":"unsatisfiable-requirements-","dir":"Articles","previous_headings":"Declaring Python Requirements with py_require()","what":"Unsatisfiable requirements.","title":"Installing Python Packages","text":"’s possible inadvertently declare unsatisfiable set Python requirements. can happen variety reasons, often due : Incompatible requirements declared different R packages. recently published Python package version introduces conflicts. troubleshoot: Figure conflicting requirements coming . Update requirements resolve conflicts. help step 1, calling py_require() arguments print manifest current requirements, well table showing requirements declared different R packages. Additionally, attempting initialize Python print detailed error message. example: can call py_require() update requirements make satisfiable. Options resolving issues include: Rolling Back Known Working State requirements previously satisfiable recently broke, likely due newly published package version. can roll back known working state specifying date exclude_newer. Removing Conflicting Requirements requirements satisfied due conflicts, can use action = \"remove\" action = \"set\" update remove specific packages. can also retrieve modify full set current requirements needed. example, given larger set conflicting tensorflow requirements: can use action = \"remove\" remove TensorFlow-related requirements: can use action = \"set\" replace declared requirements: Installing Development Version development version package fixed issue yet published PyPi, can install directly GitHub local filesystem. See py_require() examples.","code":"library(reticulate) py_require(\"numpy>2\") py_require(\"numpy<2\") import(\"numpy\") × No solution found when resolving `--with` dependencies:   ╰─▶ Because you require numpy>2 and numpy<2, we can conclude that your       requirements are unsatisfiable. uv error code: 1 -- Current requirements -------------------------------------------------  Python:   3.11.11 (reticulate default)  Packages: numpy, numpy>2, numpy<2 ------------------------------------------------------------------------- Error in uv_get_or_create_env() :   Call `py_require()` to remove or replace conflicting requirements. # Roll back to a known working state. py_require(exclude_newer = \"2025-01-19\") py_require(\"numpy<2\", action = \"remove\") # Declare conflicting requirements. py_require(c(\"tensorflow==2.17.*\",              \"tensorflow<=2.16\",              \"tensorflow[and-cuda]\",              \"tensorflow-cpu\",              \"tensorflow<=2.18\")) # Remove all TensorFlow requirements. all_py_pkgs <- py_require()$packages tf_pkgs <- grep(\"tensorflow\", all_py_pkgs, value = TRUE) py_require(tf_pkgs, action = \"remove\") # Replace all package requirements except TensorFlow. all_py_pkgs <- py_require()$packages all_py_pkgs_sans_tf <- grep(\"tensorflow\", all_py_pkgs, value = TRUE, invert = TRUE) py_require(all_py_pkgs_sans_tf, action = \"set\") # Install the 'markitdown' package from GitHub. py_require(\"markitdown@git+https://github.com/microsoft/markitdown.git@main#subdirectory=packages/markitdown\")  # Install it from the local filesystem. py_require(\"markitdown@/Users/tomasz/github/microsoft/markitdown/packages/markitdown/\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_packages.html","id":"manually-managing-python-installations","dir":"Articles","previous_headings":"","what":"Manually managing Python installations","title":"Installing Python Packages","text":"remainder vignette describes manually manage Python installations. Manually managing Python installations longer necessary recommended. instead recommended use py_require() specify Python dependencies. Note py_require() effect using self-managed Python installation.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_packages.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Installing Python Packages","text":"Python packages typically installed one two package repositories: PyPI; Conda Python package install PyPI Conda can used R reticulate. installation Python system set packages. reticulate selects Python installation, can configure behavior, described version vignette.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_packages.html","id":"python-environments","dir":"Articles","previous_headings":"Overview","what":"Python environments","title":"Installing Python Packages","text":"installing Python packages ’s best practice isolate within Python environment (named Python installation exists specific project purpose). provides measure isolation, updating Python package one project doesn’t impact projects. risk package incompatibilities significantly higher Python packages R packages, unlike CRAN, PyPI enforce, even check, current versions packages currently available compatible. reticulate package includes functions creating Python environments (either virtualenvs conda envs) installing packages within . virtual environments conda environments supported platforms (Linux, macOS, Windows). Note facilities create manage virtual environments (commonly refereed “venv”) come Python standard library, recommended way create isolated python installations. Conda environments supported well, aware potential binary incompatibilities packages built conda packages built outside conda (e.g., CRAN, PPM).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_packages.html","id":"simple-installation","dir":"Articles","previous_headings":"","what":"Simple Installation","title":"Installing Python Packages","text":"reticulate package includes py_install() function can used install one Python packages. packages default installed within virtualenv Conda environment named “r-reticulate”. example: provides straightforward high-level interface package installation helps encourage use common default environment (“r-reticulate”) across installation distinct Python packages. also functions available directly managing Conda virtualenvs situations want control packages installed. functions covered sections .","code":"library(reticulate) py_install(\"pandas\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_packages.html","id":"virtualenv-installation","dir":"Articles","previous_headings":"","what":"Virtualenv installation","title":"Installing Python Packages","text":"following functions available managing Python virtualenvs: Virtual environments default located ~/.virtualenvs. can change behavior defining WORKON_HOME environment variable. ’s example using functions create environment, install packages within , use environment R: Note may given Python package installed multiple environments, case may want call use_virtualenv() function ensure specific virtualenv utilized reticulate: Virtual environments typically derived (created using) “starter” python installation. , must python installation already installed system can create virtual environments. can install “venv starter” python variety ways, however convenient: macOS Windows, visit https://www.python.org/downloads/ install suitable version system. Linux, can use prebuilt python binaries https://github.com/rstudio/python-builds platforms, can use reticulate::install_python(). Note macOS Linux, build Python source system, may take minutes. can multiple versions Python installed along-side system (example, Python versions 3.9, 3.10, 3.11). default, reticulate use latest version installed system creating virtualenv. specific version constraints version Python required, can supply version argument–example: virtualenv_create(version = \">=3.9\") anytime, can see available virtualenv starters system calling virtualenv_starter(= TRUE). Python venv starters installed non-standard locations, can inform reticulate look setting environment variable RETICULATE_VIRTUALENV_STARTER.","code":"library(reticulate)  # create a new environment virtualenv_create(\"r-reticulate\")  # install SciPy virtualenv_install(\"r-reticulate\", \"scipy\")  # import SciPy (it will be automatically discovered in \"r-reticulate\") scipy <- import(\"scipy\") library(reticulate)  # indicate that we want to use a specific virtualenv use_virtualenv(\"r-reticulate\")  # import SciPy (will use \"r-reticulate\" as per call to use_virtualenv) scipy <- import(\"scipy\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_packages.html","id":"conda-installation","dir":"Articles","previous_headings":"","what":"Conda installation","title":"Installing Python Packages","text":"following functions available managing Conda environments: ’s example using functions create environment, install packages within , use environment R: Note may given Python package installed multiple Conda environments, case may want call use_condaenv() function ensure specific Conda environment utilized reticulate:","code":"library(reticulate)  # create a new environment conda_create(\"r-reticulate\")  # install SciPy conda_install(\"r-reticulate\", \"scipy\")  # import SciPy (it will be automatically discovered in \"r-reticulate\") scipy <- import(\"scipy\") library(reticulate)  # indicate that we want to use a specific condaenv use_condaenv(\"r-reticulate\")  # import SciPy (will use \"r-reticulate\" as per call to use_condaenv) scipy <- import(\"scipy\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_packages.html","id":"shell-installation","dir":"Articles","previous_headings":"","what":"Shell installation","title":"Installing Python Packages","text":"can also use standard shell installation utilities (pip conda) install Python packages: , sure make note version Python package installed within, call use_python() functions appropriate ensure version used reticulate. Alternatively, within repl_python(), can prefix ! send shell command, version pip conda used already configured Python installation reticulate currently using.","code":"# install into system level Python $ sudo pip install SciPy  # install into active Conda environment $ conda install SciPy !pip install scipy"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"primer-on-python-for-r-users","dir":"Articles","previous_headings":"","what":"Primer on Python for R users","title":"Primer on Python for R Users","text":"may find wanting read understand Python, even port Python R. guide designed enable tasks quickly possible. ’ll see, R Python similar enough possible without necessarily learning Python. start basics container types work mechanics classes, dunders, iterator protocol, context protocol, !","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"whitespace","dir":"Articles","previous_headings":"Primer on Python for R users","what":"Whitespace","title":"Primer on Python for R Users","text":"Whitespace matters Python. R, expressions grouped code block {}. Python, done making expressions share indentation level. example, expression R code block might : equivalent Python: Python accepts tabs spaces indentation spacer, rules get tricky ’re mixed. style guides suggest (IDE’s default ) using spaces .","code":"if (TRUE) {   cat(\"This is one expression. \\n\")   cat(\"This is another expression. \\n\") } #> This is one expression. #> This is another expression. if True:   print(\"This is one expression.\")   print(\"This is another expression.\") #> This is one expression. #> This is another expression."},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"container-types","dir":"Articles","previous_headings":"Primer on Python for R users","what":"Container Types","title":"Primer on Python for R Users","text":"R, list() container can use organize R objects. R’s list() feature packed, single direct equivalent Python supports features. Instead (least) 4 different Python container types need aware : lists, dictionaries, tuples, sets.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"lists","dir":"Articles","previous_headings":"Primer on Python for R users > Container Types","what":"Lists","title":"Primer on Python for R Users","text":"Python lists typically created using bare brackets []. Python built-list() function coercion function, closer spirit R’s .list(). important thing know Python lists modified place. Note example y reflects changes made x, underlying list object symbols point modified place. One Python idiom might concerning R users growing lists append() method. Growing lists R typically slow best avoided. Python’s list modified place (full copy list avoided appending items), efficient grow Python lists place. syntactic sugar around Python lists might encounter usage + * lists. concatenation replication operators, akin R’s c() rep(). can index lists integers using trailing [], note indexing 0-based. indexing, negative numbers count end container. can slice ranges lists using : inside brackets. Note slice syntax inclusive end slice range. can optionally also specify stride.","code":"x = [1, 2, 3] y = x    # `y` and `x` now refer to the same list! x.append(4) print(\"x is\", x) #> x is [1, 2, 3, 4] print(\"y is\", y) #> y is [1, 2, 3, 4] x = [1] x #> [1] x + x #> [1, 1] x * 3 #> [1, 1, 1] x = [1, 2, 3] x[0] #> 1 x[1] #> 2 x[2] #> 3  try:   x[3] except Exception as e:   print(e) #> list index out of range x = [1, 2, 3] x[-1] #> 3 x[-2] #> 2 x[-3] #> 1 x = [1, 2, 3, 4, 5, 6] x[0:2] # get items at index positions 0, 1 #> [1, 2] x[1:]  # get items from index position 1 to the end #> [2, 3, 4, 5, 6] x[:-2] # get items from beginning up to the 2nd to last. #> [1, 2, 3, 4] x[:]   # get all the items (idiom used to copy the list so as not to modify in place) #> [1, 2, 3, 4, 5, 6] x[::2] # get all the items, with a stride of 2 #> [1, 3, 5] x[1::2] # get all the items from index 1 to the end, with a stride of 2 #> [2, 4, 6]"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"tuples","dir":"Articles","previous_headings":"Primer on Python for R users > Container Types","what":"Tuples","title":"Primer on Python for R Users","text":"Tuples behave like lists, except mutable, don’t modify--place methods like append(). typically constructed using bare (), parentheses strictly required, may see implicit tuple defined just comma separated series expressions. parentheses can also used specify order operations expressions like (x + 3) * 4, special syntax required define tuples length 1: trailing comma. Tuples commonly encountered functions take variable number arguments.","code":"x = (1, 2) # tuple of length 2 type(x) #> <class 'tuple'> len(x) #> 2 x #> (1, 2)  x = (1,) # tuple of length 1 type(x) #> <class 'tuple'> len(x) #> 1 x #> (1,)  x = () # tuple of length 0 print(f\"{type(x) = }; {len(x) = }; {x = }\") #> type(x) = <class 'tuple'>; len(x) = 0; x = () # example of an interpolated string literals  x = 1, 2 # also a tuple type(x) #> <class 'tuple'> len(x) #> 2  x = 1, # beware a single trailing comma! This is a tuple! type(x) #> <class 'tuple'> len(x) #> 1"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"packing-and-unpacking","dir":"Articles","previous_headings":"Primer on Python for R users > Container Types > Tuples","what":"Packing and Unpacking","title":"Primer on Python for R Users","text":"Tuples container powers packing unpacking semantics Python. Python provides convenience allowing assign multiple symbols one expression. called unpacking. example: (can access similar unpacking behavior R using zeallot::`%<-%`). Tuple unpacking can occur variety contexts, iteration: attempt unpack container wrong number symbols, Python raises error: possible unpack variable number arguments, using * prefix symbol. (’ll see * prefix talk functions) can also unpack nested structures:","code":"x = (1, 2, 3) a, b, c = x a #> 1 b #> 2 c #> 3 xx = ((\"a\", 1),       (\"b\", 2)) for x1, x2 in xx:   print(\"x1 = \", x1)   print(\"x2 = \", x2) #> x1 =  a #> x2 =  1 #> x1 =  b #> x2 =  2 x = (1, 2, 3) a, b, c = x # success a, b = x    # error, x has too many values to unpack #> ValueError: too many values to unpack (expected 2) a, b, c, d = x # error, x has not enough values to unpack #> ValueError: not enough values to unpack (expected 4, got 3) x = (1, 2, 3) a, *the_rest = x a #> 1 the_rest #> [2, 3] x = ((1, 2), (3, 4)) (a, b), (c, d) = x"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"dictionaries","dir":"Articles","previous_headings":"Primer on Python for R users > Container Types","what":"Dictionaries","title":"Primer on Python for R Users","text":"Dictionaries similar R environments. container can retrieve items name, though Python name (called key Python’s parlance) need string like R. can Python object hash() method (meaning, can almost Python object). can created using syntax like {key: value}. Like Python lists, modified place. Note r_to_py() converts R named lists dictionaries. Like R environments (unlike R’s named lists), index dictionary integer get item specific index position. Dictionaries unordered containers. (However—beginning Python 3.7, dictionaries preserve item insertion order). container closest matches semantics R’s named list OrderedDict, ’s relatively uncommon Python code don’t cover .","code":"d = {\"key1\": 1,      \"key2\": 2} d2 = d d #> {'key1': 1, 'key2': 2} d[\"key1\"] #> 1 d[\"key3\"] = 3 d2 # modified in place! #> {'key1': 1, 'key2': 2, 'key3': 3} d = {\"key1\": 1, \"key2\": 2} d[1] # error #> KeyError: 1"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"sets","dir":"Articles","previous_headings":"Primer on Python for R users > Container Types","what":"Sets","title":"Primer on Python for R Users","text":"Sets container can used efficiently track unique items deduplicate lists. constructed using {val1, val2} (like dictionary, without :). Think dictionary use keys. Sets many efficient methods membership operations, like intersection(), issubset(), union() .","code":"s = {1, 2, 3} type(s) #> <class 'set'> s #> {1, 2, 3}  s.add(1) s #> {1, 2, 3}"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"iteration-with-for","dir":"Articles","previous_headings":"Primer on Python for R users","what":"Iteration with for","title":"Primer on Python for R Users","text":"statement Python can used iterate kind container. R relatively limited set objects can passed . Python comparison, provides iterator protocol interface, means authors can define custom objects, custom behavior invoked . (’ll example define custom iterable get classes). may want use Python iterable R using reticulate, ’s helpful peel back syntactic sugar little show statement Python, can step manually. two things happen: first, iterator constructed supplied object. , new iterator object repeatedly called next() exhausted. R, can use reticulate step iterator way. Iterating dictionaries first requires understanding iterating keys, values, . Dictionaries methods allow specify .","code":"for x in [1, 2, 3]:   print(x) #> 1 #> 2 #> 3 l = [1, 2, 3] it = iter(l) # create an iterator object it #> <list_iterator object at 0x1402267a0>  # call `next` on the iterator until it is exhausted: next(it) #> 1 next(it) #> 2 next(it) #> 3 next(it) #> StopIteration library(reticulate) l <- r_to_py(list(1, 2, 3)) it <- as_iterator(l)  iter_next(it) #> 1.0 iter_next(it) #> 2.0 iter_next(it) #> 3.0 iter_next(it, completed = \"StopIteration\") #> [1] \"StopIteration\" d = {\"key1\": 1, \"key2\": 2} for key in d:   print(key) #> key1 #> key2  for value in d.values():   print(value) #> 1 #> 2  for key, value in d.items():   print(key, \":\", value) #> key1 : 1 #> key2 : 2"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"comprehensions","dir":"Articles","previous_headings":"Primer on Python for R users > Iteration with for","what":"Comprehensions","title":"Primer on Python for R Users","text":"Comprehensions special syntax allow construct container like list dict, also executing small operation single expression element. can think special syntax R’s lapply. example:","code":"x = [1, 2, 3]  # a list comprehension built from x, where you add 100 to each element l = [element + 100 for element in x] l #> [101, 102, 103]  # a dict comprehension built from x, where the key is a string. # Python's str() is like R's as.character() d = {str(element) : element + 100      for element in x} d #> {'1': 101, '2': 102, '3': 103}"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"defining-functions-with-def","dir":"Articles","previous_headings":"Primer on Python for R users","what":"Defining Functions with def","title":"Primer on Python for R Users","text":"Python functions defined def statement. syntax specifying function arguments default values similar R. equivalent R snippet Unlike R functions, last value function automatically returned. Python requires explicit return statement. (Note advanced R users: Python equivalent R’s argument “promises”. Function argument default values evaluated , function constructed. can surprising define Python function mutable object default argument value, like Python list!) can also define Python functions take variable number arguments, similar ... R. notable difference R’s ... makes distinction named unnamed arguments, Python . Python, prefixing single * captures unnamed arguments, two ** signifies keyword arguments captured. Whereas * ** function definition signature pack arguments, function call unpack arguments. Unpacking arguments function call equivalent using .call() R.","code":"def my_function(name = \"World\"):   print(\"Hello\", name)  my_function() #> Hello World my_function(\"Friend\") #> Hello Friend my_function <- function(name = \"World\") {   cat(\"Hello\", name, \"\\n\") }  my_function() #> Hello World my_function(\"Friend\") #> Hello Friend def fn():   1 print(fn()) #> None  def fn():   return 1 print(fn()) #> 1 def my_func(x = []):   x.append(\"was called\")   print(x)  my_func() #> ['was called'] my_func() #> ['was called', 'was called'] my_func() #> ['was called', 'was called', 'was called'] def my_func(*args, **kwargs):   print(\"args = \", args) # args is a tuple   print(\"kwargs = \", kwargs) # kwargs is a dictionary  my_func(1, 2, 3, a = 4, b = 5, c = 6) #> args =  (1, 2, 3) #> kwargs =  {'a': 4, 'b': 5, 'c': 6} def my_func(a, b, c):   print(a, b, c)  args = (1, 2, 3) my_func(*args) #> 1 2 3  kwargs = {\"a\": 1, \"b\": 2, \"c\": 3} my_func(**kwargs) #> 1 2 3"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"defining-classes-with-class","dir":"Articles","previous_headings":"Primer on Python for R users","what":"Defining Classes with class","title":"Primer on Python for R Users","text":"One argue R, preeminent unit composition code function, Python, ’s class. can productive R user never use R6, reference classes, similar R equivalents object-oriented style Python class’s. Python, however, understanding basics class objects work requisite knowledge, class’s organize find methods Python. (contrast R’s approach, methods found dispatching generic). Fortunately, basics class’s accessible. Don’t intimidated first exposure object oriented programming. ’ll start building simple Python class demonstration purposes. Like def statement, class statement binds new callable symbol, MyClass. First note strong naming convention, classes typically CamelCase, functions typically snake_case. defining MyClass, can interact , see type 'type'. Calling MyClass() creates new object instance class, type 'MyClass' (ignore __main__. prefix now). instance prints memory address, strong hint ’s common managing many instances class, instance mutable (modified--place default). first example, defined empty class, inspect see already comes bunch attributes (dir() Python equivalent names() R):","code":"class MyClass:   pass # `pass` means do nothing.  MyClass #> <class '__main__.MyClass'> type(MyClass) #> <class 'type'>  instance = MyClass() instance #> <__main__.MyClass object at 0x14023b260> type(instance) #> <class '__main__.MyClass'> dir(MyClass) #> ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"what-are-all-the-underscores","dir":"Articles","previous_headings":"Primer on Python for R users > Defining Classes with class","what":"What are all the underscores?","title":"Primer on Python for R Users","text":"Python typically indicates something special wrapping name double underscores. special double-underscore-wrapped token commonly called “dunder”. “Special” technical term, just means token invokes Python language feature. dunder tokens merely ways code authors can plug specific syntactic sugars, others values provided interpreter otherwise hard acquire, yet others extending language interfaces (e.g., iteration protocol), finally, small handful dunders truly complicated understand. Fortunately, R user looking use Python features reticulate, need know easy--understand dunders. common dunder method ’ll encounter reading Python code __init__(). function called class constructor called, , class instantiated. meant initialize new class instance. (sophisticated code bases, may also encounter classes __new__ also defined, called __init__). things note: class statement takes code block defined common indentation level. code block exact semantics expression takes code block, like def. body class evaluated , class constructor first created. Beware objects defined shared instances class! __init__ just normal function, defined def like function. Except ’s inside class body. __init__ take argument: self. self class instance initialized (note identical memory address self instance). Also note didn’t provide self call MyClass() create class instance, self spliced function call interpreter. __init__ called time new instance created. Functions defined inside class code block called methods, important thing know methods time called class instance, instance spliced function call first argument. applies functions defined class, including dunders. (sole exception function decorated something like @classmethod @staticmethod). dunder’s worth knowing : __getitem__: function invoked subsetting instance [ (Equivalent defining [ S3 method R. __getattr__: function invoked subsetting . (Equivalent defining $ S3 method R. __iter__ __next__: functions invoked . __call__: invoked class instance called like function (e.g., instance()). __bool__: invoked (equivalent .logical() R, returning scalar, vector). __repr__, __str__, functions invoked formatting pretty printing (akin format(), dput(), print() methods R). __enter__ __exit__: functions invoked . Many built-Python functions just sugar invoking dunder. example: calling repr(x) identical x.__repr__(). builtins just sugar invoking dunder next(), iter(), str(), list(), dict(), bool(), dir(), hash() !","code":"class MyClass:    print(\"MyClass's definition body is being evaluated\")    def __init__(self):     print(self, \"is initializing\") #> MyClass's definition body is being evaluated  print(\"MyClass is finished being created\") #> MyClass is finished being created  instance = MyClass() #> <__main__.MyClass object at 0x140266330> is initializing print(instance) #> <__main__.MyClass object at 0x140266330>  instance2 = MyClass() #> <__main__.MyClass object at 0x11e3ad490> is initializing print(instance2) #> <__main__.MyClass object at 0x11e3ad490> class MyClass:   def a_method(self):     print(\"MyClass.a_method() was called with\", self)  instance = MyClass() instance.a_method() #> MyClass.a_method() was called with <__main__.MyClass object at 0x11e3c7f20>  MyClass.a_method()     # error, missing required argument `self` #> TypeError: MyClass.a_method() missing 1 required positional argument: 'self' MyClass.a_method(instance) # identical to instance.a_method() #> MyClass.a_method() was called with <__main__.MyClass object at 0x11e3c7f20>"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"iterators-revisited","dir":"Articles","previous_headings":"Primer on Python for R users > Defining Classes with class","what":"Iterators, revisited","title":"Primer on Python for R Users","text":"Now basics class, ’s time revisit iterators. First, terminology: iterable: something can iterated . Concretely, class defines __iter__ method, whose job return iterator. iterator: something iterates. Concretely, class defines __next__ method, whose job return next element time called, raises StopIteration exception ’s exhausted. ’s common see classes iterables iterators, __iter__ method just stub returns self. custom iterable / iterator implementation Python’s range (similar seq R)","code":"class MyRange:   def __init__(self, start, end):     self.start = start     self.end = end    def __iter__(self):     # reset our counter.     self._index = self.start - 1     return self    def __next__(self):     if self._index < self.end:       self._index += 1 # increment       return self._index     else:       raise StopIteration  for x in MyRange(1, 3):   print(x) #> 1 #> 2 #> 3  # doing what `for` does, but manually r = MyRange(1, 3) it = iter(r) next(it) #> 1 next(it) #> 2 next(it) #> 3 next(it) #> StopIteration"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"defining-generators-with-yield-","dir":"Articles","previous_headings":"Primer on Python for R users","what":"Defining Generators with yield.","title":"Primer on Python for R Users","text":"Generators special Python functions contain one yield statements. soon yield included code block passed def, semantics change substantially. ’re longer defining mere function, generator constructor! turn, calling generator constructor creates generator object, just another type iterator. example: Encountering yield like hitting pause button functions execution, preserves state everything function body returns control whatever iterating generator object. Calling next() generator object resumes execution function body next yield encountered, function finishes.","code":"def my_generator_constructor():   yield 1   yield 2   yield 3  # At first glance it presents like a regular function my_generator_constructor #> <function my_generator_constructor at 0x1402579c0> type(my_generator_constructor) #> <class 'function'>  # But calling it returns something special, a 'generator object' my_generator = my_generator_constructor() my_generator #> <generator object my_generator_constructor at 0x11e3ff530> type(my_generator) #> <class 'generator'>  # The generator object is both an iterable and an iterator # it's __iter__ method is just a stub that returns `self` iter(my_generator) == my_generator == my_generator.__iter__() #> True  # step through it like any other iterator next(my_generator) #> 1 my_generator.__next__() # next() is just sugar for calling the dunder #> 2 next(my_generator) #> 3 next(my_generator) #> StopIteration"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"iteration-closing-remarks","dir":"Articles","previous_headings":"Primer on Python for R users","what":"Iteration closing remarks","title":"Primer on Python for R Users","text":"Iteration deeply baked Python language, R users may surprised things Python iterable, iterators, powered iterator protocol hood. example, built-map() (equivalent R’s lapply()) yields iterator, list. Similarly, tuple comprehension like (elem elem x) produces iterator. features dealing files iterators, . time find iterator inconvenient, can materialize elements list using Python built-list(), reticulate::iterate() R. Also, like readability , can utilize similar semantics Python’s using coro::loop().","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"import-and-modules","dir":"Articles","previous_headings":"Primer on Python for R users","what":"import and Modules","title":"Primer on Python for R Users","text":"R, authors can bundle code shareable extensions called R packages, R users can access objects R packages via library() ::. Python, authors bundle code modules, users access modules using import. Consider line: statement Python go file system, find installed Python module named ‘numpy’, load (commonly meaning: evaluate __init__.py file construct module type), bind symbol numpy. closest equivalent R might :","code":"import numpy dplyr <- loadNamespace(\"dplyr\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"where-are-modules-found","dir":"Articles","previous_headings":"Primer on Python for R users > import and Modules","what":"Where are modules found?","title":"Primer on Python for R Users","text":"Python, file system locations modules searched can accessed (modified) list found sys.path. Python’s equivalent R’s .libPaths(). sys.path typically contain paths current working directory, Python installation contains built-standard library, administrator installed modules, user installed modules, values environment variables like PYTHONPATH, modifications made directly sys.path code current Python session (though relatively uncommon practice). can inspect module loaded accessing dunder __path__ __file__ (especially useful troubleshooting installation issues): module loaded, can access symbols module using . (equivalent ::, maybe $.environment, R). also special syntax specifying symbol module bound upon import, importing specific symbols. ’re looking Python equivalent R’s library(), makes package’s exported symbols available, might using import * wildcard, though ’s relatively uncommon . * wildcard expand include symbols module, symbols listed __all__, defined. Python doesn’t make distinction like R package exported internal symbols. Python, module symbols equal, though naming convention intended---internal symbols prefixed single leading underscore. (Two leading underscores invoke advanced language feature called “name mangling”, outside scope introduction).","code":"import sys sys.path #> ['', '/Users/tomasz/.pyenv/versions/3.12.4/bin', '/Users/tomasz/.pyenv/versions/3.12.4/lib/python312.zip', '/Users/tomasz/.pyenv/versions/3.12.4/lib/python3.12', '/Users/tomasz/.pyenv/versions/3.12.4/lib/python3.12/lib-dynload', '/Users/tomasz/.virtualenvs/r-reticulate/lib/python3.12/site-packages', '/Users/tomasz/github/rstudio/reticulate/inst/python', '/Users/tomasz/.virtualenvs/r-reticulate/lib/python312.zip', '/Users/tomasz/.virtualenvs/r-reticulate/lib/python3.12', '/Users/tomasz/.virtualenvs/r-reticulate/lib/python3.12/lib-dynload'] import os os.__file__ #> '/Users/tomasz/.virtualenvs/r-reticulate/lib/python3.12/os.py' numpy.__path__ #> ['/Users/tomasz/.virtualenvs/r-reticulate/lib/python3.12/site-packages/numpy'] numpy.abs(-1) #> 1 import numpy        # import import numpy as np  # import and bind to a custom symbol `np` np is numpy         # test for identicalness, similar to identical(np, numpy) #> True  from numpy import abs # import only `numpy.abs`, bind it to `abs` abs is numpy.abs #> True  from numpy import abs as abs2 # import only `numpy.abs`, bind it to `abs2` abs2 is numpy.abs #> True from numpy import *"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"integers-and-floats","dir":"Articles","previous_headings":"Primer on Python for R users","what":"Integers and Floats","title":"Primer on Python for R Users","text":"R users generally don’t need aware difference integers floating point numbers, ’s case Python. first exposure numeric data types, essentials: integer types can represent whole numbers like 1 2, floating point numbers like 1.2. floating-point types can represent number, degree imprecision. R, writing bare literal number like 12 produces floating point type, whereas Python, produces integer. can produce integer literal R appending L, 12L. Many Python functions expect integers, error provided float. example, say Python function expects integer: calling R, must sure call integer:","code":"def a_strict_Python_function(x):   assert isinstance(x, int), \"x is not an int\"   print(\"Yay! x was an int\") library(reticulate) py$a_strict_Python_function(3)             # error #> x is not an int py$a_strict_Python_function(3L)            # success #> Yay! x was an int py$a_strict_Python_function(as.integer(3)) # success #> Yay! x was an int"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"what-about-r-vectors","dir":"Articles","previous_headings":"Primer on Python for R users","what":"What about R vectors?","title":"Primer on Python for R Users","text":"R language designed numerical computing first. Numeric vector data types baked deep R language, point language doesn’t even distinguish scalars vectors. comparison, numerical computing capabilities Python generally provided third party packages (modules, Python parlance). Python, numpy module commonly used handle contiguous arrays data. closest equivalent R numeric vector numpy array, sometimes, list scalar numbers (Pythonistas might argue array.array() , ’s rarely encountered actual Python code don’t mention ). Teaching NumPy interface beyond scope primer, ’s worth pointing potential tripping hazards users accustomed R arrays: indexing multidimensional numpy arrays, trailing dimensions can omitted implicitly treated missing. consequence iterating arrays means iterating first dimension. example, iterates rows matrix. Many numpy operations modify array place! surprising R users, used convenience safety R’s copy--modify semantics. Unfortunately, simple scheme naming convention can rely quickly determine particular method modifies -place creates new array copy. reliable way consult documentation, conduct small experiments reticulate::repl_python().","code":"import numpy as np m = np.arange(12).reshape((3,4)) m #> array([[ 0,  1,  2,  3], #>        [ 4,  5,  6,  7], #>        [ 8,  9, 10, 11]]) m[0, :] # first row #> array([0, 1, 2, 3]) m[0]    # also first row #> array([0, 1, 2, 3])  for row in m:   print(row) #> [0 1 2 3] #> [4 5 6 7] #> [ 8  9 10 11]"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"decorators","dir":"Articles","previous_headings":"Primer on Python for R users","what":"Decorators","title":"Primer on Python for R Users","text":"Decorators just functions take function argument, typically returns another function. function can invoked decorator @ syntax, just sugar simple action: One decorator might encounter frequently : @property, automatically calls class method attribute accessed (similar makeActiveBinding() R).","code":"def my_decorator(func):   func.x = \"a decorator modified this function by adding an attribute `x`\"   return func  def my_function(): pass my_function = my_decorator(my_function)  # @ is just fancy syntax for the above two lines @my_decorator def my_function(): pass"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"with-and-context-management","dir":"Articles","previous_headings":"Primer on Python for R users","what":"with and context management","title":"Primer on Python for R Users","text":"object defines __enter__ __exit__ methods implements “context” protocol, can passed . example, custom implementation context manager temporarily changes current working directory (equivalent R’s withr::with_dir())","code":"from os import getcwd, chdir  class wd_context:   def __init__(self, wd):     self.new_wd = wd    def __enter__(self):     self.original_wd = getcwd()     chdir(self.new_wd)    def __exit__(self, *args):     # __exit__ takes some additional argument that are commonly ignored     chdir(self.original_wd)   getcwd() #> '/Users/tomasz/github/rstudio/reticulate/vignettes' with wd_context(\"..\"):   print(\"in the context, wd is:\", getcwd()) #> in the context, wd is: /Users/tomasz/github/rstudio/reticulate getcwd() #> '/Users/tomasz/github/rstudio/reticulate/vignettes'"},{"path":"https://rstudio.github.io/reticulate/dev/articles/python_primer.html","id":"learning-more","dir":"Articles","previous_headings":"Primer on Python for R users","what":"Learning More","title":"Primer on Python for R Users","text":"Hopefully, short primer Python provided good foundation confidently reading Python documentation code, using Python modules R via reticulate. course, much, much learn Python. Googling questions Python reliably brings pages results, always sorted order useful. Blog posts tutorials targeting beginners can valuable, remember Python’s official documentation generally excellent, first destination questions. https://docs.Python.org/3/ https://docs.Python.org/3/library/index.html learn Python fully, built-official tutorial also excellent comprehensive (require time commitment get value ) https://docs.Python.org/3/tutorial/index.html Finally, don’t forget solidify understanding conducting small experiments reticulate::repl_python(). Thank reading!","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/r_markdown.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"R Markdown Python Engine","text":"reticulate package includes Python engine R Markdown enables easy interoperability Python R chunks. Python chunks behave similar R chunks (including graphical output matplotlib) two languages full access ’s objects. Built conversion many Python object types provided, including NumPy arrays Pandas data frames. using knitr version 1.18 higher, reticulate Python engine enabled default whenever reticulate installed setup required. running earlier version knitr want disable use reticulate engine see Engine Setup section .","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/r_markdown.html","id":"python-version","dir":"Articles","previous_headings":"","what":"Python Version","title":"R Markdown Python Engine","text":"default, reticulate uses version Python found PATH (.e. Sys.(\"python\")). want use alternate version add one use_python() family functions R Markdown setup chunk, example:  See article Python Version Configuration additional details configuring Python versions (including use conda virtualenv environments).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/r_markdown.html","id":"python-chunks","dir":"Articles","previous_headings":"","what":"Python Chunks","title":"R Markdown Python Engine","text":"Python code chunks work exactly like R code chunks: Python code executed print graphical (matplotlib) output included within document. Python chunks execute within single Python session access objects created previous chunks. Chunk options like echo, include, etc. work expected. ’s R Markdown document demonstrates :  RStudio v1.2 greater reticulate IDE support.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/r_markdown.html","id":"calling-python-from-r","dir":"Articles","previous_headings":"","what":"Calling Python from R","title":"R Markdown Python Engine","text":"objects created within Python chunks available R using py object exported reticulate package. example, following code demonstrates reading filtering CSV file using Pandas plotting resulting data frame using ggplot2:  See Calling Python R article additional details interact Python types within R","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/r_markdown.html","id":"calling-r-from-python","dir":"Articles","previous_headings":"","what":"Calling R from Python","title":"R Markdown Python Engine","text":"can analogously access R objects within Python chunks via r object. example:","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/r_markdown.html","id":"engine-setup","dir":"Articles","previous_headings":"","what":"Engine Setup","title":"R Markdown Python Engine","text":"using version knitr prior 1.18 add code setup chunk enable reticulate Python engine:  wish use reticulate Python engine set python.reticulate chunk option FALSE:","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/rstudio_ide.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"RStudio IDE Tools for reticulate","text":"RStudio v1.2 brings support reticulate package, including: Support executing reticulated Python chunks within R Notebooks. Line--line execution Python code using reticulate repl_python() function. Sourcing Python scripts using reticulate source_python() function. Code completion inline help Python. Display matplotlib plots within notebook console execution modes. note philosophy behind Python tools within RStudio: tools intended standalone Python work rather explicitly aimed integration Python R projects (closely tied reticulate package). many IDEs available data science Python including JupyterLab, Rodeo, Spyder, Visual Studio Code, strongly recommend using one Python-projects. However, using reticulated Python within R project RStudio provides set tools think find extremely helpful.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/rstudio_ide.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"RStudio IDE Tools for reticulate","text":"can download latest RStudio release : https://rstudio.com/products/rstudio/download/. features described require previously installed reticulate package, can follows:","code":"install.packages(\"reticulate\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/rstudio_ide.html","id":"r-notebooks","dir":"Articles","previous_headings":"","what":"R Notebooks","title":"RStudio IDE Tools for reticulate","text":"R Notebooks enhanced support executing Python chunks using reticulate Python engine. example:","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/rstudio_ide.html","id":"matplotlib","dir":"Articles","previous_headings":"R Notebooks","what":"matplotlib","title":"RStudio IDE Tools for reticulate","text":"R Notebooks can also display matplotlib plots inline printed Python chunks:","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/rstudio_ide.html","id":"line-by-line-execution","dir":"Articles","previous_headings":"","what":"Line-by-Line Execution","title":"RStudio IDE Tools for reticulate","text":"can execute code Python scripts line--line using Run button (Control+Enter) way execute R code line--line. RStudio automatically switch reticulate’s repl_python() mode whenever execute lines Python script:  Type exit Python REPL exit back R (RStudio also automatically switch back R mode whenever execute code R script).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/rstudio_ide.html","id":"sourcing-scripts","dir":"Articles","previous_headings":"","what":"Sourcing Scripts","title":"RStudio IDE Tools for reticulate","text":"Click editor’s Source Script button within Python source file execute script using reticulate’s source_python() function:","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/rstudio_ide.html","id":"completion-and-help","dir":"Articles","previous_headings":"","what":"Completion and Help","title":"RStudio IDE Tools for reticulate","text":"RStudio now provides code completion Python scripts:  Additionally, pressing F1 button Python symbol display help topic symbol:","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/versions.html","id":"locating-python","dir":"Articles","previous_headings":"","what":"Locating Python","title":"Python Version Configuration","text":"uncommon several installations Python available given system. reticulate package can bind almost Python installations, provides variety convenient ways allow user implicitly explicitly specify Python installation select. Note reticulate bind version Python must compiled shared library support (.e. --enable-shared flag). Consider following code: case, reticulate search suitable Python installation. absence hints (detailed ), reticulate fallback environment named “r-reticulate”, creating necessary. Consider another case: case, reticulate first look environment named “r-scipy”, doesn’t exist, fallback environment named “r-reticulate”.","code":"library(reticulate) py_eval(\"1+1\") library(reticulate) scipy <- import(\"scipy\") scipy$amin(c(1,3,5,7))"},{"path":"https://rstudio.github.io/reticulate/dev/articles/versions.html","id":"providing-hints","dir":"Articles","previous_headings":"","what":"Providing Hints","title":"Python Version Configuration","text":"ways can provide hints version Python used: setting value RETICULATE_PYTHON environment variable Python binary. Note set environment variable, specified version Python always used (.e. prescriptive rather advisory). set value RETICULATE_PYTHON, insert Sys.setenv(RETICULATE_PYTHON = PATH) project’s .Rprofile, PATH preferred Python binary. calling one functions: example: use_virtualenv() function supplied name virtual environment (opposed path), look virtualenv root directory, default ~/.virtualenvs, configurable setting environment variable WORKON_HOME. use_condaenv() function use whatever conda binary found PATH. want use specific alternate version can use conda parameter. example: Note use_*() functions take optional required argument. default, value required = NULL equivalent required = TRUE circumstances. required = FALSE supplied, call considered optional hint find Python (.e. doesn’t produce error specified version doesn’t exist).","code":"library(reticulate) use_python(\"/usr/local/bin/python\") use_virtualenv(\"~/myenv\") use_condaenv(\"myenv\") use_condaenv(condaenv = \"r-nlp\", conda = \"/opt/anaconda3/bin/conda\")"},{"path":"https://rstudio.github.io/reticulate/dev/articles/versions.html","id":"order-of-discovery","dir":"Articles","previous_headings":"","what":"Order of Discovery","title":"Python Version Configuration","text":"order Python installation discovered used follows: specified, location referenced RETICULATE_PYTHON environment variable. (Path Python binary) specified, location referenced RETICULATE_PYTHON_ENV environment variable. (Path name virtual environment conda environment) specified, location referenced calls use_python(), use_virtualenv(), use_condaenv() required = TRUE (default). environment variable RETICULATE_USE_MANAGED_VENV=\"yes\" set, reticulate use ephemeral virtual environment satisfies requirements declared via py_require() environment variable VIRTUAL_ENV defined (typically running activate script R started, “Automatically activate project-local Python environments” option enabled RStudio IDE), Python activated environment used. current working directory contains pyproject.toml file poetry environment, Python installation poetry environment used. current working directory contains Pipfile associated pipenv, Python installation pipenv used. current working directory contains directory named “venv”, “virtualenv”, “.venv”, “.virtualenv”, directory Python virtual environment, Python virtual environment used. call (typically within package using reticulate), form: import(\"bar\", delay_load = list(environment = \"r-barlyr\"), exists virtual environment conda environment named \"r-barlyr\", used. call use_python(), use_virtualenv(), use_condaenv() made required = FALSE, within packages .onLoad() function, referenced python installation exists, used. call import(\"bar\"), exists virtual environment conda environment named \"r-bar\", used. specified, location referenced RETICULATE_PYTHON_FALLBACK environment variable. (Path python binary) virtual environment named \"r-reticulate\" exists, used. absence expression preference via one ways outlined , reticulate falls back resolving ephemeral virtual environment satisfies requirement declared via py_require(). disable feature, can set env var RETICULATE_USE_MANAGED_VENV=\"\" none Python installations can used, fall back using Python PATH, Windows, Python referenced registry. python python3 PATH, reticulate prefer python3, unless python NumPy installed, python3 built different architecture R (e.g., x86).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/versions.html","id":"python-packages","dir":"Articles","previous_headings":"","what":"Python Packages","title":"Python Version Configuration","text":"can learn installing Python packages virtualenvs Conda environments article Installing Python Packages.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/articles/versions.html","id":"configuration-info","dir":"Articles","previous_headings":"","what":"Configuration Info","title":"Python Version Configuration","text":"can use py_config() function query information specific version Python use well list Python versions discovered system: can also use py_discover_config() function see version Python used without actually loading Python:","code":"py_config() py_discover_config()"},{"path":"https://rstudio.github.io/reticulate/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tomasz Kalinowski. Contributor, maintainer. Kevin Ushey. Author. JJ Allaire. Author. RStudio. Copyright holder, funder. Yuan Tang. Author, copyright holder. Dirk Eddelbuettel. Contributor, copyright holder. Bryan Lewis. Contributor, copyright holder. Sigrid Keydana. Contributor. Ryan Hafen. Contributor, copyright holder. Marcus Geelnard. Contributor, copyright holder.           TinyThread library, http://tinythreadpp.bitsnbites.eu/","code":""},{"path":"https://rstudio.github.io/reticulate/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ushey K, Allaire J, Tang Y (2025). reticulate: Interface 'Python'. R package version 1.43.0.9000, https://rstudio.github.io/reticulate/.","code":"@Manual{,   title = {reticulate: Interface to 'Python'},   author = {Kevin Ushey and JJ Allaire and Yuan Tang},   year = {2025},   note = {R package version 1.43.0.9000},   url = {https://rstudio.github.io/reticulate/}, }"},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"r-interface-to-python","dir":"","previous_headings":"","what":"Interface to Python","title":"Interface to Python","text":"reticulate package provides comprehensive set tools interoperability Python R. package includes facilities :  Calling Python R variety ways including R Markdown, sourcing Python scripts, importing Python modules, using Python interactively within R session. Translation R Python objects (example, R Pandas data frames, R matrices NumPy arrays). Flexible binding different versions Python including virtual environments Conda environments. Reticulate embeds Python session within R session, enabling seamless, high-performance interoperability. R developer uses Python work member data science team uses languages, reticulate can dramatically streamline workflow!","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"installation","dir":"","previous_headings":"Getting started","what":"Installation","title":"Interface to Python","text":"Install reticulate package CRAN follows:","code":"install.packages(\"reticulate\")"},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"python-version","dir":"","previous_headings":"Getting started","what":"Python version","title":"Interface to Python","text":"default, reticulate uses isolated python virtual environment named “r-reticulate”. use_python() function enables specify alternate python, example: use_virtualenv() use_condaenv() functions enable specify versions Python virtual Conda environments, example: See article Python Version Configuration additional details.","code":"library(reticulate) use_python(\"/usr/local/bin/python\") library(reticulate) use_virtualenv(\"myenv\")"},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"python-packages","dir":"","previous_headings":"Getting started","what":"Python packages","title":"Interface to Python","text":"can install required Python packages using standard shell tools like pip conda. Alternately, reticulate includes set functions managing installing packages within virtualenvs Conda environments. See article Installing Python Packages additional details.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"calling-python","dir":"","previous_headings":"Getting started","what":"Calling Python","title":"Interface to Python","text":"variety ways integrate Python code R projects: Python R Markdown — new Python language engine R Markdown supports bi-directional communication R Python (R chunks can access Python objects vice-versa). Importing Python modules — import() function enables import Python module call ’s functions directly R. Sourcing Python scripts — source_python() function enables source Python script way source() R script (Python functions objects defined within script become directly available R session). Python REPL — repl_python() function creates interactive Python console within R. Objects create within Python available R session (vice-versa). techniques explained detail .","code":""},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"python-in-r-markdown","dir":"","previous_headings":"","what":"Python in R Markdown","title":"Interface to Python","text":"reticulate package includes Python engine R Markdown following features: Run Python chunks single Python session embedded within R session (shared variables/state Python chunks) Printing Python output, including graphical output matplotlib. Access objects created within Python chunks R using py object (e.g. py$x access x variable created within Python R). Access objects created within R chunks Python using r object (e.g. r.x access x variable created within R Python) Built conversion many Python object types provided, including NumPy arrays Pandas data frames. example, can use Pandas read manipulate data easily plot Pandas data frame using ggplot2:  Note reticulate Python engine enabled default within R Markdown whenever reticulate installed. See R Markdown Python Engine documentation additional details.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"importing-python-modules","dir":"","previous_headings":"","what":"Importing Python modules","title":"Interface to Python","text":"can use import() function import Python module call R. example, code imports Python os module calls listdir() function: Functions data within Python modules classes can accessed via $ operator (analogous way interact R list, environment, reference class). Imported Python modules support code completion inline help:  See Calling Python R additional details interacting Python objects within R.","code":"library(reticulate) os <- import(\"os\") os$listdir(\".\") [1] \".git\"             \".gitignore\"       \".Rbuildignore\"    \".RData\"  [5] \".Rhistory\"        \".Rproj.user\"      \".travis.yml\"      \"appveyor.yml\"  [9] \"DESCRIPTION\"      \"docs\"             \"external\"         \"index.html\" [13] \"index.Rmd\"        \"inst\"             \"issues\"           \"LICENSE\" [17] \"man\"              \"NAMESPACE\"        \"NEWS.md\"          \"pkgdown\" [21] \"R\"                \"README.md\"        \"reticulate.Rproj\" \"src\" [25] \"tests\"            \"vignettes\""},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"sourcing-python-scripts","dir":"","previous_headings":"","what":"Sourcing Python scripts","title":"Interface to Python","text":"can source Python script just source R script using source_python() function. example, following Python script flights.py: can source script call read_flights() function follows: See source_python() documentation additional details sourcing Python code.","code":"import pandas def read_flights(file):   flights = pandas.read_csv(file)   flights = flights[flights['dest'] == \"ORD\"]   flights = flights[['carrier', 'dep_delay', 'arr_delay']]   flights = flights.dropna()   return flights source_python(\"flights.py\") flights <- read_flights(\"flights.csv\")  library(ggplot2) ggplot(flights, aes(carrier, arr_delay)) + geom_point() + geom_jitter()"},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"python-repl","dir":"","previous_headings":"","what":"Python REPL","title":"Interface to Python","text":"want work Python interactively can call repl_python() function, provides Python REPL embedded within R session. Objects created within Python REPL can accessed R using py object exported reticulate. example:  Enter exit within Python REPL return R prompt. Note Python code can also access objects within R session using r object (e.g. r.flights). See repl_python() documentation additional details using embedded Python REPL.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"type-conversions","dir":"","previous_headings":"","what":"Type conversions","title":"Interface to Python","text":"calling Python, R data types automatically converted equivalent Python types. values returned Python R converted back R types. Types converted follows: Python object custom class returned R reference object returned. can call methods access properties object just instance R reference class.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"learning-more","dir":"","previous_headings":"","what":"Learning more","title":"Interface to Python","text":"following articles cover various aspects using reticulate: Calling Python R — Describes various ways access Python objects R well functions available advanced interactions conversion behavior. R Markdown Python Engine — Provides details using Python chunks within R Markdown documents, including call Python code R chunks vice-versa. Python Version Configuration — Describes facilities determining version Python used reticulate within R session. Installing Python Packages — Documentation installing Python packages PyPI Conda, managing package installations using virtualenvs Conda environments. Using reticulate R Package — Guidelines best practices using reticulate R package. Arrays R Python — Advanced discussion differences arrays R Python implications conversion interoperability. Python Primer — Introduction Python R users.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/index.html","id":"why-reticulate","dir":"","previous_headings":"","what":"Why reticulate?","title":"Interface to Python","text":"Wikipedia article reticulated python: reticulated python species python found Southeast Asia. world’s longest snakes longest reptiles…specific name, reticulatus, Latin meaning “net-like”, reticulated, reference complex colour pattern. Merriam-Webster definition reticulate: 1: resembling net network; especially : veins, fibers, lines crossing reticulate leaf. 2: involving evolutionary change dependent genetic recombination involving diverse interbreeding populations. package enables reticulate Python code R, creating new breed project weaves together two languages.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/Ops-python-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Ops Methods for Python Objects — ==.python.builtin.object","title":"S3 Ops Methods for Python Objects — ==.python.builtin.object","text":"Reticulate provides S3 Ops Group Generic Methods Python objects. methods invoke equivalent python method object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/Ops-python-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Ops Methods for Python Objects — ==.python.builtin.object","text":"","code":"# S3 method for class 'python.builtin.object' e1 == e2  # S3 method for class 'python.builtin.object' e1 != e2  # S3 method for class 'python.builtin.object' e1 < e2  # S3 method for class 'python.builtin.object' e1 > e2  # S3 method for class 'python.builtin.object' e1 >= e2  # S3 method for class 'python.builtin.object' e1 <= e2  # S3 method for class 'python.builtin.object' e1 + e2  # S3 method for class 'python.builtin.object' e1 - e2  # S3 method for class 'python.builtin.object' e1 * e2  # S3 method for class 'python.builtin.object' e1/e2  # S3 method for class 'python.builtin.object' e1%/%e2  # S3 method for class 'python.builtin.object' e1%%e2  # S3 method for class 'python.builtin.object' e1^e2  # S3 method for class 'python.builtin.object' e1 & e2  # S3 method for class 'python.builtin.object' e1 | e2  # S3 method for class 'python.builtin.object' !e1  # S3 method for class 'python.builtin.object' x %*% y"},{"path":"https://rstudio.github.io/reticulate/dev/reference/Ops-python-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Ops Methods for Python Objects — ==.python.builtin.object","text":"e1, e2, x, y python object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/Ops-python-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Ops Methods for Python Objects — ==.python.builtin.object","text":"Result evaluating Python expression. either arguments operator Python object convert=FALSE, result also Python object convert=FALSE set. Otherwise, result converted R object possible.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/Ops-python-methods.html","id":"operator-mappings","dir":"Reference","previous_headings":"","what":"Operator Mappings","title":"S3 Ops Methods for Python Objects — ==.python.builtin.object","text":"Note: initial Python method invoked raises NotImplemented Exception, Python interpreter attempt use reflected variant method second argument. arithmetic operators call equivalent double underscore (dunder) method \"r\" prefix. instance, evaluating expression x + y, type(x).__add__(x, y) raises NotImplemented exception, interpreter attempt type(y).__radd__(y, x). comparison operators follow different sequence fallbacks; refer Python documentation details.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/PyClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a python class — PyClass","title":"Create a python class — PyClass","text":"Create python class","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/PyClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a python class — PyClass","text":"","code":"PyClass(classname, defs = list(), inherit = NULL)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/PyClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a python class — PyClass","text":"classname Name class. class name useful S3 method dispatch. defs named list class definitions - functions, attributes, etc. inherit list Python class objects. Usually objects python.builtin.type S3 class.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/PyClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a python class — PyClass","text":"","code":"if (FALSE) { # \\dontrun{ Hi <- PyClass(\"Hi\", list(   name = NULL,   `__init__` = function(self, name) {     self$name <- name     NULL   },   say_hi = function(self) {     paste0(\"Hi \", self$name)   } ))  a <- Hi(\"World\") } # }"},{"path":"https://rstudio.github.io/reticulate/dev/reference/array_reshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape an Array — array_reshape","title":"Reshape an Array — array_reshape","text":"Reshape (reindex) multi-dimensional array, using row-major (C-style) reshaping semantics default.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/array_reshape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape an Array — array_reshape","text":"","code":"array_reshape(x, dim, order = c(\"C\", \"F\"))"},{"path":"https://rstudio.github.io/reticulate/dev/reference/array_reshape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape an Array — array_reshape","text":"x array dim new dimensions set array. order order elements x read rearrangement. \"C\" means elements read row-major order, last index changing fastest; \"F\" means elements read column-major order, first index changing fastest.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/array_reshape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reshape an Array — array_reshape","text":"function differs e.g. dim(x) <- dim important way: default, array_reshape() fill new dimensions row-major (C-style) ordering, dim<-() fill new dimensions column-major (Fortran-style) ordering. done consistent libraries like NumPy, Keras, TensorFlow, default sort ordering reshaping arrays. See examples difference may important.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/array_reshape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape an Array — array_reshape","text":"","code":"if (FALSE) { # \\dontrun{ # let's construct a 2x2 array from a vector of 4 elements x <- 1:4  # rearrange will fill the array row-wise array_reshape(x, c(2, 2)) #      [,1] [,2] # [1,]    1    2 # [2,]    3    4 # setting the dimensions 'fills' the array col-wise dim(x) <- c(2, 2) x #      [,1] [,2] # [1,]    1    3 # [2,]    2    4 } # }"},{"path":"https://rstudio.github.io/reticulate/dev/reference/as.character.python.builtin.bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Python bytes to an R character or raw vector — as.character.python.builtin.bytes","title":"Convert Python bytes to an R character or raw vector — as.character.python.builtin.bytes","text":"Convert Python bytes R character raw vector","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/as.character.python.builtin.bytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Python bytes to an R character or raw vector — as.character.python.builtin.bytes","text":"","code":"# S3 method for class 'python.builtin.bytes' as.character(   x,   encoding = \"utf-8\",   errors = \"strict\",   nul = stop(\"Embedded NUL in string.\"),   ... )  # S3 method for class 'python.builtin.bytes' as.raw(x)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/as.character.python.builtin.bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Python bytes to an R character or raw vector — as.character.python.builtin.bytes","text":"x object coerced tested. encoding Encoding use conversion (defaults utf-8) errors Policy handling conversion errors. Default 'strict' raises error. possible values 'ignore' 'replace'. nul Action take bytes contain embedded NUL (\\x00). Python allows embedded NULs strings, R . four options handling embedded NULs: Error: default Replace: Supply replacement string: nul = \"<NUL>\" Remove: Supply empty string: nul = \"\" Split: Supply R NULL indicate string split embedded NUL bytes: nul = NULL ... arguments passed methods.","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/as.character.python.builtin.bytes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Python bytes to an R character or raw vector — as.character.python.builtin.bytes","text":"","code":"if (FALSE) { # reticulate::py_available() # A bytes object with embedded NULs b <- import_builtins(convert = FALSE)$bytes(   as.raw(c(0x61, 0x20, 0x62, 0x00, 0x63, 0x20, 0x64)) # \"a b<NUL>c d\" )  try(as.character(b))            # Error : Embedded NUL in string. as.character(b, nul = \"<NUL>\")  # Replace: \"a b<NUL>c d\" as.character(b, nul = \"\")       # Remove: \"a bc d\" as.character(b, nul = NULL)     # Split: \"a b\" \"c d\" }"},{"path":"https://rstudio.github.io/reticulate/dev/reference/as.character.python.builtin.str.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Python string to an R Character Vector — as.character.python.builtin.str","title":"Convert a Python string to an R Character Vector — as.character.python.builtin.str","text":"Convert Python string R Character Vector","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/as.character.python.builtin.str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Python string to an R Character Vector — as.character.python.builtin.str","text":"","code":"# S3 method for class 'python.builtin.str' as.character(x, nul = stop(\"Embedded NUL in string.\"), ...)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/as.character.python.builtin.str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Python string to an R Character Vector — as.character.python.builtin.str","text":"x Python string nul Action take Python string contains embedded NUL (\\x00). Python allows embedded NULs strings, R . four options handling embedded NULs: Error: default Replace: Supply replacement string: nul = \"<NUL>\" Remove: Supply empty string: nul = \"\" Split: Supply R NULL indicate string split embedded NUL bytes: nul = NULL ... Unused","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/as.character.python.builtin.str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Python string to an R Character Vector — as.character.python.builtin.str","text":"R character vector. returned vector always length 1, unless nul = NULL supplied.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/as.character.python.builtin.str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Python string to an R Character Vector — as.character.python.builtin.str","text":"","code":"if (FALSE) { # reticulate::py_available() # Given a Python function that errors when it attempts to return # a string with an embedded NUL py_run_string(' def get_string_w_nul():    return \"a b\" + chr(0) + \"c d\" ') get_string_w_nul <- py$get_string_w_nul  try(get_string_w_nul()) # Error : Embedded NUL in string.  # To get the string into R, use `r_to_py()` on the function to stop it from # eagerly converting the Python string to R, and then call `as.character()` with # a `nul` argument supplied to convert the string to R. get_string_w_nul <- r_to_py(get_string_w_nul) get_string_w_nul() # unconverted python string: inherits(x, 'python.builtin.str') as.character(get_string_w_nul(), nul = \"<NUL>\")  # Replace: \"a b<NUL>c d\" as.character(get_string_w_nul(), nul = \"\")       # Remove: \"a bc d\" as.character(get_string_w_nul(), nul = NULL)     # Split: \"a b\" \"c d\"  # cleanup example rm(get_string_w_nul); py$get_string_w_nul <- NULL }"},{"path":"https://rstudio.github.io/reticulate/dev/reference/conda-tools.html","id":null,"dir":"Reference","previous_headings":"","what":"Conda Tools — conda-tools","title":"Conda Tools — conda-tools","text":"Tools managing Python conda environments.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/conda-tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conda Tools — conda-tools","text":"","code":"conda_list(conda = \"auto\")  conda_create(   envname = NULL,   packages = NULL,   ...,   forge = TRUE,   channel = character(),   environment = NULL,   conda = \"auto\",   python_version = miniconda_python_version(),   additional_create_args = character() )  conda_clone(envname, ..., clone = \"base\", conda = \"auto\")  conda_export(   envname,   file = if (json) \"environment.json\" else \"environment.yml\",   json = FALSE,   ...,   conda = \"auto\" )  conda_remove(envname, packages = NULL, conda = \"auto\")  conda_install(   envname = NULL,   packages,   forge = TRUE,   channel = character(),   pip = FALSE,   pip_options = character(),   pip_ignore_installed = FALSE,   conda = \"auto\",   python_version = NULL,   additional_create_args = character(),   additional_install_args = character(),   ... )  conda_binary(conda = \"auto\")  conda_exe(conda = \"auto\")  conda_version(conda = \"auto\")  conda_update(conda = \"auto\")  conda_python(envname = NULL, conda = \"auto\", all = FALSE)  conda_search(   matchspec,   forge = TRUE,   channel = character(),   conda = \"auto\",   ... )  condaenv_exists(envname = NULL, conda = \"auto\")"},{"path":"https://rstudio.github.io/reticulate/dev/reference/conda-tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conda Tools — conda-tools","text":"conda path conda executable. Use \"auto\" allow reticulate automatically find appropriate conda binary. See Finding Conda conda_binary() details. envname name , path , conda environment. packages character vector, indicating package names installed removed. Use  <package>==<version> request installation specific version package. NULL value conda_remove() interpretted \"--\", removing entire environment. ... Optional arguments, reserved future expansion. forge Boolean; include conda-forge repository? channel optional character vector conda channels include. specified, forge argument ignored. need specify multiple channels, including conda forge, can use c(\"conda-forge\", <channels>). environment path environment definition, generated via (example) conda_export(), via conda env export. provided, conda environment created using environment definition, arguments ignored. python_version version Python installed. Set like change version Python associated particular conda environment. additional_create_args optional character vector additional arguments use call conda create. clone name conda environment cloned. file path conda environment definition written. json Boolean; environment definition written JSON? default, conda exports environments YAML. pip Boolean; use pip package installation? default, packages installed active conda channels. pip_options optional character vector additional command line arguments passed pip. relevant pip = TRUE. pip_ignore_installed Ignore already-installed versions using pip? (defaults FALSE). Set TRUE specific package versions can installed even downgrades. FALSE option useful situations want pip install attempt overwrite conda binary package (e.g. SciPy Windows difficult install via pip due compilation requirements). additional_install_args optional character vector additional arguments use call conda install. Boolean; report instances Python found? matchspec conda MatchSpec query string.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/conda-tools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conda Tools — conda-tools","text":"conda_list() returns R data.frame, name giving name associated environment, python giving path Python binary associated environment. conda_create() returns path Python binary associated newly-created conda environment. conda_clone() returns path Python within newly-created conda environment. conda_export() returns path exported environment definition, invisibly. conda_search() returns R data.frame describing packages matched matchspec. data frame usually include fields name giving package name, version giving package version, build giving package build, channel giving channel package hosted .","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/conda-tools.html","id":"finding-conda","dir":"Reference","previous_headings":"","what":"Finding Conda","title":"Conda Tools — conda-tools","text":"reticulate's conda APIs accept conda parameter, used control conda binary used operation. conda = \"auto\", reticulate attempt automatically find conda installation. following locations searched, order: location specified reticulate.conda_binary R option, location specified RETICULATE_CONDA environment variable, miniconda_path() location (exists), program PATH, set pre-defined locations conda typically installed. force reticulate use particular conda binary, recommend setting:   can useful conda installation lives location reticulate unable automatically discover.","code":"options(reticulate.conda_binary = \"/path/to/conda\")"},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/conda_run2.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a command in a conda environment — conda_run2","title":"Run a command in a conda environment — conda_run2","text":"function runs command chosen conda environment.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/conda_run2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a command in a conda environment — conda_run2","text":"","code":"conda_run2(   cmd,   args = c(),   conda = \"auto\",   envname = NULL,   cmd_line = paste(shQuote(cmd), paste(args, collapse = \" \")),   intern = FALSE,   echo = !intern )"},{"path":"https://rstudio.github.io/reticulate/dev/reference/conda_run2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a command in a conda environment — conda_run2","text":"cmd system command invoked, character string. args character vector arguments command. arguments quoted e.g. shQuote() case contain space special characters (double quote backslash Windows, shell-specific special characters Unix). conda path conda executable. Use \"auto\" allow reticulate automatically find appropriate conda binary. See Finding Conda conda_binary() details. envname name , path , conda environment. cmd_line command line executed, character string. automatically generated cmd args, can provided directly needed (provided, overrides cmd args). intern logical (NA) indicates whether capture output command R character vector. FALSE (default), return value error code (0 success). echo logical (NA) indicates whether echo command console running .","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/conda_run2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a command in a conda environment — conda_run2","text":"conda_run2() runs command desired conda environment. intern = TRUE output returned character vector; intern = FALSE (deafult), return value error code (0 success). See shell() (windows) system2() macOS Linux details.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/conda_run2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a command in a conda environment — conda_run2","text":"Note , whilst syntax similar system2(), function dynamically generates shell script commands activate chosen conda environent. avoids issues quoting, discussed GitHub issue.","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/configure_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure a Python Environment — configure_environment","title":"Configure a Python Environment — configure_environment","text":"Configure Python environment, satisfying Python dependencies loaded R packages.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/configure_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure a Python Environment — configure_environment","text":"","code":"configure_environment(package = NULL, force = FALSE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/configure_environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure a Python Environment — configure_environment","text":"package name package configure. NULL, reticulate instead look loaded packages discover associated Python requirements. force Boolean; force configuration Python environment? Note configure_environment() -op within non-interactive R sessions. Use require automatic environment configuration, e.g. testing package continuous integration service.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/configure_environment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure a Python Environment — configure_environment","text":"Normally, function used package authors, want ensure package dependencies installed active Python environment. example:   Python session yet initialized, user using default Miniconda Python installation, action taken. Otherwise, reticulate take signal install required Python dependencies user's Python environment. like disable reticulate's auto-configure behavior altogether, can set environment variable:   e.g. ~/.Renviron similar. Note , case Python session yet initialized, reticulate automatically ensure required Python dependencies installed Python session initialized (appropriate).","code":".onLoad <- function(libname, pkgname) {   reticulate::configure_environment(pkgname) } RETICULATE_AUTOCONFIGURE = FALSE"},{"path":"https://rstudio.github.io/reticulate/dev/reference/dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Python dictionary — dict","title":"Create Python dictionary — dict","text":"Create Python dictionary object, including dictionary whose keys Python objects rather character vectors.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Python dictionary — dict","text":"","code":"dict(..., convert = FALSE)  py_dict(keys, values, convert = FALSE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Python dictionary — dict","text":"... Name/value pairs dictionary (single named list converted dictionary). convert TRUE automatically convert Python objects R equivalent. pass FALSE can manual conversion using py_to_r() function. keys Keys dictionary (can Python objects) values Values dictionary","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/dict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Python dictionary — dict","text":"Python dictionary","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/dict.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Python dictionary — dict","text":"returned dictionary automatically convert elements Python R. can manual conversion py_to_r() function pass convert = TRUE request automatic conversion.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/eng_python.html","id":null,"dir":"Reference","previous_headings":"","what":"A reticulate Engine for Knitr — eng_python","title":"A reticulate Engine for Knitr — eng_python","text":"provides reticulate engine knitr, suitable usage attempting render Python chunks. Using engine allows shared state Python chunks document – , variables defined one Python chunk can used later Python chunks.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/eng_python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A reticulate Engine for Knitr — eng_python","text":"","code":"eng_python(options)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/eng_python.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A reticulate Engine for Knitr — eng_python","text":"options Chunk options, provided knitr chunk execution.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/eng_python.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A reticulate Engine for Knitr — eng_python","text":"engine can activated setting (example)   Typically, set within document's setup chunk, environment requesting Python chunks processed engine. Note knitr (since version 1.18) use reticulate engine default executing Python chunks within R Markdown document.","code":"knitr::knit_engines$set(python = reticulate::eng_python)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/eng_python.html","id":"supported-knitr-chunk-options","dir":"Reference","previous_headings":"","what":"Supported knitr chunk options","title":"A reticulate Engine for Knitr — eng_python","text":"options, reticulate's python engine behaves default R engine included knitr, might support features. Options italic equivalent knitr, modified behavior. eval (TRUE, logical): TRUE, expressions chunk evaluated. FALSE, expression evaluated. Unlike knitr's R engine, support numeric values indicating expressions evaluate. echo (TRUE, logical): Whether display source code output document. Unlike knitr's R engine, support numeric values indicating expressions display. results ('markup', character): Controls display text results. Note option applies normal text output (warnings, messages, errors). behavior identical knitr's R engine. collapse (FALSE, logical): Whether , possible, collapse source output blocks one code chunk single block (default, written separate blocks). option applies Markdown documents. error (TRUE, logical): Whether preserve errors. FALSE evaluation stops errors. (Note RMarkdown sets FALSE). warning (TRUE, logical): Whether preserve warnings output. FALSE, warnings suppressed. support indices. include (TRUE, logical): Whether include chunk output output document. FALSE, nothing written output document, code still evaluated plot files generated plots chunk, can manually insert figures later. dev: graphical device generate plot files. See knitr documentation additional information. base.dir (NULL; character): absolute directory plots generated. strip.white (TRUE; logical): Whether remove blank lines beginning end source code block output. dpi (72; numeric): DPI (dots per inch) bitmap devices (dpi * inches = pixels). fig.width, fig.height (7; numeric): Width height plot (inches), used graphics device. label: chunk label chunk assumed unique within document. especially important cache plot filenames, filenames based chunk labels. Chunks without labels assigned labels like unnamed-chunk-, incremental number.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/eng_python.html","id":"python-engine-only-options","dir":"Reference","previous_headings":"","what":"Python engine only options","title":"A reticulate Engine for Knitr — eng_python","text":"jupyter_compat (FALSE, logical): TRUE , like Jupyter notebooks, last expression chunk printed output. .width.px, .height.px (810, 400, integers): Width height plot output document, can different physical fig.width fig.height, .e., plots can scaled output document. Unlike knitr's .width, always set pixels. altair.fig.width, altair.fig.height: set, used instead .width.px .height.px writing Altair charts.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/import.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a Python module — import","title":"Import a Python module — import","text":"Import specified Python module, making available use R.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a Python module — import","text":"","code":"import(module, as = NULL, convert = TRUE, delay_load = FALSE)  import_main(convert = TRUE, delay_load = FALSE)  import_builtins(convert = TRUE, delay_load = FALSE)  import_from_path(module, path = \".\", convert = TRUE, delay_load = FALSE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a Python module — import","text":"module name Python module. alias module name (affects names R classes). Note advanced parameter generally used package development (since affects S3 name imported class can therefore interfere S3 method dispatching). convert Boolean; Python objects automatically converted R equivalent? set FALSE, can still manually convert Python objects R via py_to_r() function. delay_load Boolean; delay loading module first used? FALSE, module loaded immediately. See Delay Load advanced usages. path path module imported.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a Python module — import","text":"R object wrapping Python module. Module attributes can accessed via $ operator, via py_get_attr().","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/import.html","id":"python-built-ins","dir":"Reference","previous_headings":"","what":"Python Built-ins","title":"Import a Python module — import","text":"Python's built-functions (e.g. len()) can accessed via Python's built-module. name module changed Python 2 Python 3, provide function import_builtins() abstract name change.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/import.html","id":"delay-load","dir":"Reference","previous_headings":"","what":"Delay Load","title":"Import a Python module — import","text":"delay_load parameter accepts variety inputs. just need ensure module lazy-loaded (e.g. package author want avoid initializing Python user explicitly requested ), passing TRUE normally right choice. can also provide named list: \"before_load\", \"on_load\" \"on_error\" can functions , act callbacks run module later loaded. \"environment\" can character vector preferred python environment names search use. example:   Alternatively, supply single function, treated on_load handler.","code":"delay_load = list(    # run before the module is loaded   before_load = function() { ... }    # run immediately after the module is loaded   on_load = function() { ... }    # run if an error occurs during module import   on_error = function(error) { ... }    environment = c(\"r-preferred-venv1\", \"r-preferred-venv2\") )"},{"path":"https://rstudio.github.io/reticulate/dev/reference/import.html","id":"import-from-path","dir":"Reference","previous_headings":"","what":"Import from Path","title":"Import a Python module — import","text":"import_from_path() can used need import module arbitrary filesystem path. commonly used importing modules bundled R package – example:","code":"path <- system.file(\"python\", package = <package>) reticulate::import_from_path(<module>, path = path, delay_load = TRUE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a Python module — import","text":"","code":"if (FALSE) { # \\dontrun{ main <- import_main() sys <- import(\"sys\") } # }"},{"path":"https://rstudio.github.io/reticulate/dev/reference/install_miniconda.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Miniconda — install_miniconda","title":"Install Miniconda — install_miniconda","text":"Download Miniconda installer, use install Miniconda.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/install_miniconda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Miniconda — install_miniconda","text":"","code":"install_miniconda(path = miniconda_path(), update = TRUE, force = FALSE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/install_miniconda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Miniconda — install_miniconda","text":"path location Miniconda () installed. Note Miniconda installer support paths containing spaces. See miniconda_path details default path used reticulate. update Boolean; update latest version Miniconda installation? force Boolean; force re-installation Miniconda already installed requested path?","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/install_miniconda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install Miniconda — install_miniconda","text":"arm64 builds R macOS, install_miniconda() use binaries miniforge instead.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/install_miniconda.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Install Miniconda — install_miniconda","text":"encounter binary incompatibilities R Miniconda, scripted build installation Python sources can performed install_python()","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/install_python.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Python — install_python","title":"Install Python — install_python","text":"Download install Python, using pyenv. pyenv-win projects.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/install_python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Python — install_python","text":"","code":"install_python(   version = \"3.11:latest\",   list = FALSE,   force = FALSE,   optimized = TRUE )"},{"path":"https://rstudio.github.io/reticulate/dev/reference/install_python.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Python — install_python","text":"version version Python install. list Boolean; set, list set available Python versions? force Boolean; force re-installation even requested version Python already installed? optimized Boolean; TRUE, installation take significantly longer result faster Python interpreter. applicable macOS Linux.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/install_python.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install Python — install_python","text":"general, recommended Python virtual environments created using copies Python installed install_python(). example:","code":"library(reticulate) version <- \"3.9.12\" install_python(version) virtualenv_create(\"my-environment\", version = version) use_virtualenv(\"my-environment\")  # There is also support for a \":latest\" suffix to select the latest patch release install_python(\"3.9:latest\") # install latest patch available at python.org  # select the latest 3.9.* patch installed locally virtualenv_create(\"my-environment\", version = \"3.9:latest\")"},{"path":"https://rstudio.github.io/reticulate/dev/reference/install_python.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Install Python — install_python","text":"macOS Linux build Python sources, may take minutes. Installation faster build dependencies preinstalled. See https://github.com/pyenv/pyenv/wiki#suggested-build-environment example commands can run pre-install system dependencies (requires administrator privileges). example, macOS can pre-run:   optimized = TRUE, (default) Python build :   optimized = FALSE, Python built :   Windows, prebuilt installers https://www.python.org used.","code":"brew install openssl readline sqlite3 xz zlib tcl-tk@8 libb2 PYTHON_CONFIGURE_OPTS=\"--enable-shared --enable-optimizations --with-lto\" PYTHON_CFLAGS=\"-march=native -mtune=native\" PYTHON_CONFIGURE_OPTS=--enable-shared"},{"path":"https://rstudio.github.io/reticulate/dev/reference/ipython.html","id":null,"dir":"Reference","previous_headings":"","what":"IPython console — ipython","title":"IPython console — ipython","text":"Launch IPython console app.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/ipython.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPython console — ipython","text":"","code":"ipython()"},{"path":"https://rstudio.github.io/reticulate/dev/reference/ipython.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IPython console — ipython","text":"See https://ipython.readthedocs.io/ features.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/is_py_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if x is a Python object — is_py_object","title":"Check if x is a Python object — is_py_object","text":"Checks x Python object, efficiently inherits(x, \"python.builtin.object\").","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/is_py_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if x is a Python object — is_py_object","text":"","code":"is_py_object(x)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/is_py_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if x is a Python object — is_py_object","text":"x R Python.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/is_py_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if x is a Python object — is_py_object","text":"TRUE FALSE.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/iterate.html","id":null,"dir":"Reference","previous_headings":"","what":"Traverse a Python iterator or generator — as_iterator","title":"Traverse a Python iterator or generator — as_iterator","text":"Traverse Python iterator generator","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/iterate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Traverse a Python iterator or generator — as_iterator","text":"","code":"as_iterator(x)  iterate(it, f = base::identity, simplify = TRUE)  iter_next(it, completed = NULL)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/iterate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Traverse a Python iterator or generator — as_iterator","text":"x Python iterator iterable Python iterator generator f Function apply item. default applies identity function just reflects back value item. simplify result simplified vector possible? completed Sentinel value return iter_next() iteration completes (defaults NULL can R value specify).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/iterate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Traverse a Python iterator or generator — as_iterator","text":"iterate(), list vector containing results calling f item x (invisibly); iter_next(), next value iteration (sentinel completed value iteration complete).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/iterate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Traverse a Python iterator or generator — as_iterator","text":"Simplification attempted elements length 1 vectors type \"character\", \"complex\", \"double\", \"integer\", \"logical\".","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/miniconda-params.html","id":null,"dir":"Reference","previous_headings":"","what":"miniconda-params — miniconda-params","title":"miniconda-params — miniconda-params","text":"miniconda-params","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/miniconda-params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"miniconda-params — miniconda-params","text":"path location Miniconda () installed. Note Miniconda installer support paths containing spaces. See miniconda_path details default path used reticulate.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/miniconda_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Path to Miniconda — miniconda_path","title":"Path to Miniconda — miniconda_path","text":"path Miniconda installation use. default, OS-specific path used. like instead set path, can set RETICULATE_MINICONDA_PATH environment variable.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/miniconda_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path to Miniconda — miniconda_path","text":"","code":"miniconda_path()"},{"path":"https://rstudio.github.io/reticulate/dev/reference/miniconda_uninstall.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Miniconda — miniconda_uninstall","title":"Remove Miniconda — miniconda_uninstall","text":"Uninstall Miniconda.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/miniconda_uninstall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Miniconda — miniconda_uninstall","text":"","code":"miniconda_uninstall(path = miniconda_path())"},{"path":"https://rstudio.github.io/reticulate/dev/reference/miniconda_uninstall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Miniconda — miniconda_uninstall","text":"path path Miniconda installed.","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/miniconda_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Miniconda — miniconda_update","title":"Update Miniconda — miniconda_update","text":"Update Miniconda latest version.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/miniconda_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Miniconda — miniconda_update","text":"","code":"miniconda_update(path = miniconda_path())"},{"path":"https://rstudio.github.io/reticulate/dev/reference/miniconda_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Miniconda — miniconda_update","text":"path location Miniconda () installed. Note Miniconda installer support paths containing spaces. See miniconda_path details default path used reticulate.","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/nameOfClass.python.builtin.type.html","id":null,"dir":"Reference","previous_headings":"","what":"nameOfClass() for Python objects — nameOfClass.python.builtin.type","title":"nameOfClass() for Python objects — nameOfClass.python.builtin.type","text":"generic enables passing python.builtin.type object 2nd argument base::inherits().","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/nameOfClass.python.builtin.type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nameOfClass() for Python objects — nameOfClass.python.builtin.type","text":"","code":"# S3 method for class 'python.builtin.type' nameOfClass(x)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/nameOfClass.python.builtin.type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nameOfClass() for Python objects — nameOfClass.python.builtin.type","text":"x Python class","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/nameOfClass.python.builtin.type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nameOfClass() for Python objects — nameOfClass.python.builtin.type","text":"scalar string matching S3 class objects constructed type.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/nameOfClass.python.builtin.type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nameOfClass() for Python objects — nameOfClass.python.builtin.type","text":"","code":"if (FALSE) { # \\dontrun{   numpy <- import(\"numpy\")   x <- r_to_py(array(1:3))   inherits(x, numpy$ndarray) } # }"},{"path":"https://rstudio.github.io/reticulate/dev/reference/np_array.html","id":null,"dir":"Reference","previous_headings":"","what":"NumPy array — np_array","title":"NumPy array — np_array","text":"Create NumPy arrays convert data type -memory ordering existing NumPy arrays.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/np_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NumPy array — np_array","text":"","code":"np_array(data, dtype = NULL, order = \"C\")"},{"path":"https://rstudio.github.io/reticulate/dev/reference/np_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NumPy array — np_array","text":"data Vector existing NumPy array providing data array dtype Numpy data type (e.g. \"float32\", \"float64\", etc.) order Memory ordering array. \"C\" means C order, \"F\" means Fortran order.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/np_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NumPy array — np_array","text":"NumPy array object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py.html","id":null,"dir":"Reference","previous_headings":"","what":"Interact with the Python Main Module — py","title":"Interact with the Python Main Module — py","text":"py object provides means interacting Python main session directly R. Python objects accessed py automatically converted R objects, can used R functions needed.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interact with the Python Main Module — py","text":"","code":"py"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Interact with the Python Main Module — py","text":"R object acting interface Python main module.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Python is available on this system — py_available","title":"Check if Python is available on this system — py_available","text":"Check Python available system","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Python is available on this system — py_available","text":"","code":"py_available(initialize = FALSE)  py_numpy_available(initialize = FALSE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Python is available on this system — py_available","text":"initialize TRUE attempt initialize Python bindings yet available (defaults FALSE).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Python is available on this system — py_available","text":"Logical indicating whether Python initialized.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_available.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if Python is available on this system — py_available","text":"py_numpy_available function superset py_available function (calls py_available first checking NumPy).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_bool.html","id":null,"dir":"Reference","previous_headings":"","what":"Python Truthiness — py_bool","title":"Python Truthiness — py_bool","text":"Equivalent bool(x) Python, x.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_bool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Python Truthiness — py_bool","text":"","code":"py_bool(x)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_bool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Python Truthiness — py_bool","text":"x, python object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_bool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Python Truthiness — py_bool","text":"R scalar logical: TRUE FALSE. x null pointer Python initialized, FALSE returned.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_bool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Python Truthiness — py_bool","text":"Python object defines __bool__ method, invoked. Otherwise, object defines __len__ method, TRUE returned length nonzero. neither __len__ __bool__ defined, Python object considered TRUE.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Call a Python callable object — py_call","title":"Call a Python callable object — py_call","text":"Call Python callable object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call a Python callable object — py_call","text":"","code":"py_call(x, ...)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call a Python callable object — py_call","text":"... Arguments function (named /unnamed)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call a Python callable object — py_call","text":"Return value call Python object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_capture_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture and return Python output — py_capture_output","title":"Capture and return Python output — py_capture_output","text":"Capture return Python output","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_capture_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture and return Python output — py_capture_output","text":"","code":"py_capture_output(expr, type = c(\"stdout\", \"stderr\"))"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_capture_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture and return Python output — py_capture_output","text":"expr Expression capture stdout type Streams capture (defaults stdout stderr)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_capture_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture and return Python output — py_capture_output","text":"Character vector output","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Python configuration — py_config","title":"Python configuration — py_config","text":"Retrieve information version Python currently used reticulate.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Python configuration — py_config","text":"","code":"py_config()"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Python configuration — py_config","text":"Information version Python use, R list class \"py_config\".","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Python configuration — py_config","text":"Python yet initialized, calling py_config() force initialization Python. See py_discover_config() details.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_config_error_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Python configuration error message — py_config_error_message","title":"Build Python configuration error message — py_config_error_message","text":"Build Python configuration error message","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_config_error_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Python configuration error message — py_config_error_message","text":"","code":"py_config_error_message(prefix)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_config_error_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Python configuration error message — py_config_error_message","text":"prefix Error message prefix","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_del_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete an attribute of a Python object — py_del_attr","title":"Delete an attribute of a Python object — py_del_attr","text":"Delete attribute Python object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_del_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete an attribute of a Python object — py_del_attr","text":"","code":"py_del_attr(x, name)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_del_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete an attribute of a Python object — py_del_attr","text":"x Python object. name attribute name.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_discover_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Discover the version of Python to use with reticulate. — py_discover_config","title":"Discover the version of Python to use with reticulate. — py_discover_config","text":"function enables callers check versions Python discovered system well one chosen use reticulate.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_discover_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discover the version of Python to use with reticulate. — py_discover_config","text":"","code":"py_discover_config(required_module = NULL, use_environment = NULL)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_discover_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discover the version of Python to use with reticulate. — py_discover_config","text":"required_module optional module name used select Python environment used. use_environment optional virtual/conda environment name prefer search.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_discover_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discover the version of Python to use with reticulate. — py_discover_config","text":"Python configuration object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_discover_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discover the version of Python to use with reticulate. — py_discover_config","text":"order discovery documented vignette(\"versions\"), also available online ","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_ellipsis.html","id":null,"dir":"Reference","previous_headings":"","what":"The builtin constant Ellipsis — py_ellipsis","title":"The builtin constant Ellipsis — py_ellipsis","text":"builtin constant Ellipsis","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_ellipsis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The builtin constant Ellipsis — py_ellipsis","text":"","code":"py_ellipsis()"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a Python Expression — py_eval","title":"Evaluate a Python Expression — py_eval","text":"Evaluate single Python expression, way analogous Python eval() built-function.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a Python Expression — py_eval","text":"","code":"py_eval(code, convert = TRUE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a Python Expression — py_eval","text":"code single Python expression. convert Boolean; automatically convert Python objects R?","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a Python Expression — py_eval","text":"result produced evaluating code, converted R object convert set TRUE.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_eval.html","id":"caveats","dir":"Reference","previous_headings":"","what":"Caveats","title":"Evaluate a Python Expression — py_eval","text":"py_eval() supports evaluation 'simple' Python expressions. expressions (e.g. assignments) fail; e.g.   mirrors one see regular Python interpreter:   py_run_string() method can used evaluation arbitrary Python code required.","code":"> py_eval(\"x = 1\") Error in py_eval_impl(code, convert) :   SyntaxError: invalid syntax (reticulate_eval, line 1) >>> eval(\"x = 1\") Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"<string>\", line 1 x = 1 ^   SyntaxError: invalid syntax"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_exe.html","id":null,"dir":"Reference","previous_headings":"","what":"Python executable — py_exe","title":"Python executable — py_exe","text":"Get path Python executable reticulate configured use. Python already initialized, reticulate choose currently-active copy Python.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_exe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Python executable — py_exe","text":"","code":"py_exe()"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_exe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Python executable — py_exe","text":"path Python executable reticulate configured use.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_exe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Python executable — py_exe","text":"can occasionally useful like interact Python (modules) via subprocess; example might choose install package pip:   can also greater control modules invoked.","code":"system2(py_exe(), c(\"-m\", \"pip\", \"install\", \"numpy\"))"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap an R function in a Python function with the same signature. — py_func","title":"Wrap an R function in a Python function with the same signature. — py_func","text":"function wrap R function Python function signature. Note signature R function must contain esoteric Python-incompatible constructs.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap an R function in a Python function with the same signature. — py_func","text":"","code":"py_func(f)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap an R function in a Python function with the same signature. — py_func","text":"f R function","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap an R function in a Python function with the same signature. — py_func","text":"Python function calls R function f signature.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_function_custom_scaffold.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Scaffolding of R Wrappers for Python Functions — py_function_custom_scaffold","title":"Custom Scaffolding of R Wrappers for Python Functions — py_function_custom_scaffold","text":"function can used generate R wrapper specified Python function allowing inject custom code critical parts wrapper generation, process part docs obtained py_function_docs() append additional roxygen fields. result execution python_function assigned variable called python_function_result can also processed postprocess_fn writing closing curly braces generated wrapper function.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_function_custom_scaffold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Scaffolding of R Wrappers for Python Functions — py_function_custom_scaffold","text":"","code":"py_function_custom_scaffold(   python_function,   r_function = NULL,   additional_roxygen_fields = NULL,   process_docs_fn = function(docs) docs,   process_param_fn = function(param, docs) param,   process_param_doc_fn = function(param_doc, docs) param_doc,   postprocess_fn = function() {  },   file_name = NULL )"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_function_custom_scaffold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Scaffolding of R Wrappers for Python Functions — py_function_custom_scaffold","text":"python_function Fully qualified name Python function class constructor (e.g. tf$layers$average_pooling1d) r_function Name R function generate (defaults name Python function specified) additional_roxygen_fields list additional roxygen fields write roxygen docs, e.g. list(export = \"\", rdname = \"generated-wrappers\"). process_docs_fn function process docs obtained reticulate::py_function_docs(python_function). process_param_fn function process parameter needed python_funcion executing python_funcion. process_param_doc_fn function process roxygen docstring parameter. postprocess_fn function inject custom code form string writing closing curly braces generated wrapper function. file_name file name write generated wrapper function . NULL, generated wrapper printed console.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_function_custom_scaffold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Scaffolding of R Wrappers for Python Functions — py_function_custom_scaffold","text":"","code":"if (FALSE) { # \\dontrun{  library(tensorflow) library(stringr)  # Example of a `process_param_fn` to cast parameters with default values # that contains \"L\" to integers process_int_param_fn <- function(param, docs) {   # Extract the list of parameters that have integer values as default   int_params <- gsub(     \" = [-]?[0-9]+L\",     \"\",     str_extract_all(docs$signature, \"[A-z]+ = [-]?[0-9]+L\")[[1]])   # Explicitly cast parameter in the list obtained above to integer   if (param %in% int_params) {     param <- paste0(\"as.integer(\", param, \")\")   }   param }  # Note that since the default value of parameter `k` is `1L`. It is wrapped # by `as.integer()` to ensure it's casted to integer before sending it to `tf$nn$top_k` # for execution. We then print out the python function result. py_function_custom_scaffold(   \"tf$nn$top_k\",   r_function = \"top_k\",   process_param_fn = process_int_param_fn,   postprocess_fn = function() { \"print(python_function_result)\" })  } # }"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_function_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaffold R wrappers for Python functions — py_function_wrapper","title":"Scaffold R wrappers for Python functions — py_function_wrapper","text":"Scaffold R wrappers Python functions","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_function_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaffold R wrappers for Python functions — py_function_wrapper","text":"","code":"py_function_wrapper(python_function, r_prefix = NULL, r_function = NULL)  py_function_docs(python_function)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_function_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaffold R wrappers for Python functions — py_function_wrapper","text":"python_function Fully qualified name Python function class constructor (e.g. tf$layers$average_pooling1d) r_prefix Prefix add generated R function name r_function Name R function generate (defaults name Python function specified)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_function_wrapper.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Scaffold R wrappers for Python functions — py_function_wrapper","text":"generated wrapper often require additional editing (e.g. convert Python list literals docs R lists, massage R numeric values Python integers via .integer required, etc.) really intended starting point R wrapper rather wrapper can used without modification.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_get_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an attribute of a Python object — py_get_attr","title":"Get an attribute of a Python object — py_get_attr","text":"Get attribute Python object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_get_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an attribute of a Python object — py_get_attr","text":"","code":"py_get_attr(x, name, silent = FALSE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_get_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an attribute of a Python object — py_get_attr","text":"x Python object name Attribute name silent TRUE return NULL attribute exist (default FALSE raise error)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_get_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an attribute of a Python object — py_get_attr","text":"Attribute Python object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_get_item.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/Set/Delete an item from a Python object — py_get_item","title":"Get/Set/Delete an item from a Python object — py_get_item","text":"Access item Python object, similar x[key] might used Python code access item indexed key object x. object's __getitem__() __setitem__() __delitem__() method called.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_get_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/Set/Delete an item from a Python object — py_get_item","text":"","code":"py_get_item(x, key, silent = FALSE)  py_set_item(x, key, value)  py_del_item(x, key)  # S3 method for class 'python.builtin.object' x[...]  # S3 method for class 'python.builtin.object' x[...] <- value"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_get_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/Set/Delete an item from a Python object — py_get_item","text":"x Python object. key, ... key used item lookup. silent Boolean; TRUE, attempts access missing items return NULL rather throw error. value item value set. Assigning value NULL calls py_del_item() equivalent python expression del x[key]. set item value None, can call py_set_item() directly, call x[key] <- py_none()","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_get_item.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get/Set/Delete an item from a Python object — py_get_item","text":"py_get_item() [, return value x.__getitem__() method. py_set_item(), py_del_item() [<-, mutate object x returned.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_get_item.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get/Set/Delete an item from a Python object — py_get_item","text":"py_get_item() always returns unconverted python object, [ automatically attempt convert object x created convert = TRUE.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_get_item.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get/Set/Delete an item from a Python object — py_get_item","text":"","code":"if (FALSE) { # \\dontrun{  ## get/set/del item from Python dict x <- r_to_py(list(abc = \"xyz\"))  #'   # R expression    | Python expression # -------------------- | -----------------  x[\"abc\"]              # x[\"abc\"]  x[\"abc\"] <- \"123\"     # x[\"abc\"] = \"123\"  x[\"abc\"] <- NULL      # del x[\"abc\"]  x[\"abc\"] <- py_none() # x[\"abc\"] = None  ## get item from Python list x <- r_to_py(list(\"a\", \"b\", \"c\")) x[0]  ## slice a NumPy array x <- np_array(array(1:64, c(4, 4, 4)))  # R expression | Python expression # ------------ | -----------------   x[0]         # x[0]   x[, 0]       # x[:, 0]   x[, , 0]     # x[:, :, 0]    x[NA:2]      # x[:2]   x[`:2`]      # x[:2]    x[2:NA]      # x[2:]   x[`2:`]      # x[2:]    x[NA:NA:2]   # x[::2]   x[`::2`]     # x[::2]    x[1:3:2]     # x[1:3:2]   x[`1:3:2`]   # x[1:3:2]    x[.., 1]     # x[..., 1]   x[0, .., 1]  # x[0, ..., 1]  } # }"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_has_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Python object has an attribute — py_has_attr","title":"Check if a Python object has an attribute — py_has_attr","text":"Check whether Python object x attribute name.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_has_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Python object has an attribute — py_has_attr","text":"","code":"py_has_attr(x, name)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_has_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Python object has an attribute — py_has_attr","text":"x python object. name attribute accessed.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_has_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Python object has an attribute — py_has_attr","text":"TRUE object attribute name, FALSE otherwise.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_help.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation for Python Objects — py_help","title":"Documentation for Python Objects — py_help","text":"Documentation Python Objects","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Documentation for Python Objects — py_help","text":"","code":"py_help(object)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_help.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation for Python Objects — py_help","text":"object Object print documentation ","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_help_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide help for Python objects — py_help_handler","title":"Provide help for Python objects — py_help_handler","text":"internal method used front-ends need provide help text / information Python objects different contexts.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_help_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide help for Python objects — py_help_handler","text":"","code":"py_help_handler(type = c(\"completion\", \"parameter\", \"url\"), topic, source, ...)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique identifer for Python object — py_id","title":"Unique identifer for Python object — py_id","text":"Get globally unique identifier Python object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique identifer for Python object — py_id","text":"","code":"py_id(object)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique identifer for Python object — py_id","text":"object Python object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unique identifer for Python object — py_id","text":"Unique identifer (string) NULL","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_id.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Unique identifer for Python object — py_id","text":"current implementation CPython memory address object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_install.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Python packages — py_install","title":"Install Python packages — py_install","text":"Install Python packages virtual environment Conda environment.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_install.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Python packages — py_install","text":"","code":"py_install(   packages,   envname = NULL,   method = c(\"auto\", \"virtualenv\", \"conda\"),   conda = \"auto\",   python_version = NULL,   pip = FALSE,   ...,   pip_ignore_installed = ignore_installed,   ignore_installed = FALSE )"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_install.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Python packages — py_install","text":"packages vector Python packages install. envname name, full path, environment Python packages installed. NULL (default), active environment set RETICULATE_PYTHON_ENV variable used; unset, r-reticulate environment used. method Installation method. default, \"auto\" automatically finds method work local environment. Change default force specific installation method. Note \"virtualenv\" method available Windows. conda path conda executable. Use \"auto\" allow reticulate automatically find appropriate conda binary. See Finding Conda conda_binary() details. python_version requested Python version. Ignored attempting install Python virtual environment. pip Boolean; use pip package installation? relevant Conda environments used, otherwise packages installed Conda repositories. ... Additional arguments passed conda_install() virtualenv_install(). pip_ignore_installed, ignore_installed Boolean; whether pip ignore previously installed versions requested packages. Setting TRUE causes pip install latest versions dependencies requested environment. ensure dependencies satisfied package exists either site library previously installed different–potentially incompatible–distribution channel. (ignore_installed alias pip_ignore_installed, pip_ignore_installed takes precedence).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_install.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install Python packages — py_install","text":"Linux OS X \"virtualenv\" method used default (\"conda\" used virtualenv available). Windows, \"conda\" method always used.","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_is_null_xptr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Python object is a null externalptr — py_is_null_xptr","title":"Check if a Python object is a null externalptr — py_is_null_xptr","text":"Check Python object null externalptr","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_is_null_xptr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Python object is a null externalptr — py_is_null_xptr","text":"","code":"py_is_null_xptr(x)  py_validate_xptr(x)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_is_null_xptr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Python object is a null externalptr — py_is_null_xptr","text":"x Python object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_is_null_xptr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Python object is a null externalptr — py_is_null_xptr","text":"Logical indicating whether object null externalptr","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_is_null_xptr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a Python object is a null externalptr — py_is_null_xptr","text":"Python objects serialized within persisted R environment (e.g. .RData file) deserialized null externalptr objects (since Python session originally connected longer exists). function allows safely check whether whether Python object null externalptr. py_validate function convenience function calls py_is_null_xptr throws error case xptr NULL.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_iterator.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Python iterator from an R function — py_iterator","title":"Create a Python iterator from an R function — py_iterator","text":"Create Python iterator R function","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_iterator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Python iterator from an R function — py_iterator","text":"","code":"py_iterator(fn, completed = NULL, prefetch = 0L)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_iterator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Python iterator from an R function — py_iterator","text":"fn R function arguments. completed Special sentinel return value indicates iteration complete (defaults NULL). prefetch Number items prefetch. Set positive integer avoid deadlock situations generator values consumed python background threads main thread blocked.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_iterator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Python iterator from an R function — py_iterator","text":"Python iterator calls R function iteration.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_iterator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Python iterator from an R function — py_iterator","text":"Python generators functions implement Python iterator protocol. Python, values returned using yield keyword. R, values simply returned function. Python, yield keyword enables successive iterations use state previous iterations. R, can done returning function mutates enclosing environment via <<- operator. example:   create iterator using py_iterator():","code":"sequence_generator <- function(start) {   value <- start   function() {     value <<- value + 1     value   } } g <- py_iterator(sequence_generator(10))"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_iterator.html","id":"ending-iteration","dir":"Reference","previous_headings":"","what":"Ending Iteration","title":"Create a Python iterator from an R function — py_iterator","text":"Python, returning function without calling yield indicates end iteration. R however, return used yield values, end iteration indicated special return value (NULL default, however can changed using completed parameter). example:","code":"sequence_generator <-function(start) {   value <- start   function() {     value <<- value + 1     if (value < 100)       value     else       NULL   } }"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_iterator.html","id":"threading","dir":"Reference","previous_headings":"","what":"Threading","title":"Create a Python iterator from an R function — py_iterator","text":"Python APIs use generators parallellize operations calling generator background thread consuming results foreground thread. py_iterator() function creates threadsafe iterators ensuring R function always called main thread (compatible R's single-threaded runtime) even generator run background thread.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_last_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or (re)set the last Python error encountered. — py_clear_last_error","title":"Get or (re)set the last Python error encountered. — py_clear_last_error","text":"Get (re)set last Python error encountered.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_last_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or (re)set the last Python error encountered. — py_clear_last_error","text":"","code":"py_clear_last_error()  py_last_error(exception)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_last_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or (re)set the last Python error encountered. — py_clear_last_error","text":"exception python exception object. provided, provided exception set last exception.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_last_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or (re)set the last Python error encountered. — py_clear_last_error","text":"py_last_error(), NULL error yet encountered. Otherwise, named list entries: \"type\": R string, name exception class. \"value\": R string, formatted exception message. \"traceback\": R character vector, formatted python traceback, \"message\": full formatted raised exception, printed Python. Includes traceback, type, value. \"r_trace\": data.frame class rlang_trace columns: call: R callstack, full_call, summarized pretty printing. full_call: R callstack. (Output sys.calls() error callsite). parent: parent frame callstack. (Output sys.parents() error callsite). Additional columns internals use: namespace, visible, scope. attribute \"exception\", 'python.builtin.Exception' object. named list class \"py_error\", default print method equivalent cat(py_last_error()$message).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_last_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or (re)set the last Python error encountered. — py_clear_last_error","text":"","code":"if (FALSE) { # \\dontrun{  # see last python exception with R traceback reticulate::py_last_error()  # see the full R callstack from the last Python exception reticulate::py_last_error()$r_trace$full_call  # run python code that might error, # without modifying the user-visible python exception  safe_len <- function(x) {   last_err <- py_last_error()   tryCatch({     # this might raise a python exception if x has no `__len__` method.     import_builtins()$len(x)   }, error = function(e) {     # py_last_error() was overwritten, is now \"no len method for 'object'\"     py_last_error(last_err) # restore previous exception     -1L   }) }  safe_len(py_eval(\"object\")) } # }"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_len.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of Python object — py_len","title":"Length of Python object — py_len","text":"Get length Python object. equivalent calling Python builtin len() function object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_len.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of Python object — py_len","text":"","code":"py_len(x, default = NULL)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_len.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of Python object — py_len","text":"x Python object. default default length value return, case associated Python object __len__ method. NULL (default), error emitted instead.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_len.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of Python object — py_len","text":"length object, numeric value.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_len.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Length of Python object — py_len","text":"Python objects defined length. objects without defined length, calling py_len() throw error. like instead infer default length cases, can set default argument e.g. 1L, treat Python objects without __len__ method length one.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_list_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"List all attributes of a Python object — py_list_attributes","title":"List all attributes of a Python object — py_list_attributes","text":"List attributes Python object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_list_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all attributes of a Python object — py_list_attributes","text":"","code":"py_list_attributes(x)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_list_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all attributes of a Python object — py_list_attributes","text":"x Python object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_list_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all attributes of a Python object — py_list_attributes","text":"Character vector attributes","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_list_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"List installed Python packages — py_list_packages","title":"List installed Python packages — py_list_packages","text":"List Python packages installed requested Python environment.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_list_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List installed Python packages — py_list_packages","text":"","code":"py_list_packages(   envname = NULL,   type = c(\"auto\", \"virtualenv\", \"conda\"),   python = NULL )"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_list_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List installed Python packages — py_list_packages","text":"envname name , path , Python virtual environment. Ignored python non-NULL. type virtual environment type. Useful virtual environments Conda environments name system, need disambiguate . python path Python executable.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_list_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List installed Python packages — py_list_packages","text":"R data.frame, columns: package package name. version package version. requirement package requirement. channel (Conda ) channel associated package.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_list_packages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List installed Python packages — py_list_packages","text":"envname NULL, reticulate use \"default\" version Python, reported py_exe(). implies can call py_list_packages() without arguments order list installed Python packages version Python currently used reticulate.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_main_thread_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Create a Python function that will always be called on the main thread — py_main_thread_func","title":"Deprecated Create a Python function that will always be called on the main thread — py_main_thread_func","text":"Beginning reticulate v1.39.0, every R function \"main thread func\". Usage py_main_thread_func() longer necessary.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_main_thread_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated Create a Python function that will always be called on the main thread — py_main_thread_func","text":"","code":"py_main_thread_func(f)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_main_thread_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated Create a Python function that will always be called on the main thread — py_main_thread_func","text":"f R function arbitrary arguments","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_main_thread_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated Create a Python function that will always be called on the main thread — py_main_thread_func","text":"Python function delegates passed R function, guaranteed always called main thread.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_main_thread_func.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated Create a Python function that will always be called on the main thread — py_main_thread_func","text":"function helpful need provide callback Python library may invoke callback background thread. R functions must run main thread, wrapping R function py_main_thread_func() ensure R code executed main thread.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_module_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Python module is available on this system. — py_module_available","title":"Check if a Python module is available on this system. — py_module_available","text":"Note function also attempt initialize Python checking requested module available.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_module_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Python module is available on this system. — py_module_available","text":"","code":"py_module_available(module)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_module_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Python module is available on this system. — py_module_available","text":"module name module.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_module_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Python module is available on this system. — py_module_available","text":"TRUE module available can loaded; FALSE otherwise.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_none.html","id":null,"dir":"Reference","previous_headings":"","what":"The Python None object — py_none","title":"The Python None object — py_none","text":"Get reference Python None object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_none.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Python None object — py_none","text":"","code":"py_none()"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_register_load_hook.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a Python module load hook — py_register_load_hook","title":"Register a Python module load hook — py_register_load_hook","text":"Register R function called Python module first loaded current R session. can used tasks :","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_register_load_hook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a Python module load hook — py_register_load_hook","text":"","code":"py_register_load_hook(module, hook)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_register_load_hook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a Python module load hook — py_register_load_hook","text":"module String, name Python module. hook Function, called arguments. module already loaded, hook() called immediately.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_register_load_hook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a Python module load hook — py_register_load_hook","text":"NULL invisibly. Called side effect.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_register_load_hook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a Python module load hook — py_register_load_hook","text":"Delayed registration S3 methods accommodate different versions Python module. Configuring module-specific logging streams.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_require.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare Python Requirements — py_require","title":"Declare Python Requirements — py_require","text":"py_require() allows declare Python requirements R session, including Python packages, version constraints packages, version constraints Python . Reticulate can automatically create use ephemeral Python environment satisfies requirements.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_require.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare Python Requirements — py_require","text":"","code":"py_require(   packages = NULL,   python_version = NULL,   ...,   exclude_newer = NULL,   action = c(\"add\", \"remove\", \"set\") )"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_require.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare Python Requirements — py_require","text":"packages character vector Python packages available session. can simple package names like \"jax\" names version constraints like \"jax[cpu]>=0.5\". Pip style syntax installing local files git repository also supported (see details). python_version character vector Python version constraints  (e.g., \"3.10\" \">=3.9,<3.13\"). ... Reserved future extensions; must empty. exclude_newer Limit package versions published specified date. offers lightweight alternative freezing package versions, helping guard Python package updates break workflow. Accepts strings formatted RFC 3339 timestamps (e.g., \"2006-12-02T02:07:43Z\") local dates format (e.g., \"2006-12-02\") system's configured time zone. exclude_newer set, set action can override . action Determines py_require() processes provided requirements. Options : \"add\" (default): Adds entries current set requirements. \"remove\": Removes exact matches requirements list. Requests remove nonexistent entries ignored. example, \"numpy==2.2.2\" list, passing \"numpy\" action=\"remove\" remove . \"set\": Clears existing requirements replaces provided ones. Packages Python version can set independently.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_require.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare Python Requirements — py_require","text":"py_require() primarily called side effect modifying manifest \"Python requirements\" current R session  reticulate maintains internally. py_require() usually returns NULL invisibly. py_require() called arguments, returns current manifest–list names packages, python_version, exclude_newer. list also class attribute, provide print method.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_require.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Declare Python Requirements — py_require","text":"Reticulate use ephemeral environment Python installation found earlier Order Discovery. can also force reticulate use ephemeral environment setting Sys.setenv(RETICULATE_PYTHON=\"managed\"), can disable reticulate using ephemeral environment setting Sys.setenv(RETICULATE_USE_MANAGED_VENV=\"\"). ephemeral virtual environment created user interacts Python first time R session, typically import() first called. py_require() called new requirements reticulate already initialized ephemeral Python environment, new ephemeral environment activated top existing one. Python initialized, adding packages supported—removing packages, changing Python version, modifying exclude_newer possible. Calling py_require() without arguments returns list currently declared requirements. R packages can also call py_require() (e.g., .onLoad() elsewhere) declare Python dependencies. print method py_require() displays Python dependencies declared R packages current session.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_require.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Declare Python Requirements — py_require","text":"Reticulate uses uv resolve Python dependencies. Many uv options can customized via environment variables, described . example: temporarily offline, resolve packages cache without checking updates, set: Sys.setenv(UV_OFFLINE = \"1\"). use additional package index: Sys.setenv(UV_INDEX = \"https://download.pytorch.org/whl/cpu\").  (add multiple additional indexes, UV_INDEX can list space-separated urls). change default package index: Sys.setenv(UV_DEFAULT_INDEX = \"https://.org/python-packages-index/\") allow resolving prerelease dependency: Sys.setenv(UV_PRERELEASE = \"allow\"). force uv create ephemeral environments using system python: Sys.setenv(UV_PYTHON_PREFERENCE = \"-system\") advanced customization needs, ’s also option configure uv user-level system-level uv.toml file.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_require.html","id":"installing-from-alternate-sources","dir":"Reference","previous_headings":"","what":"Installing from alternate sources","title":"Declare Python Requirements — py_require","text":"packages argument also supports declaring dependency Git repository local file. examples valid packages strings: Install Ruff specific Git tag:   Install Ruff specific Git commit:   Install Ruff specific Git branch:   Install MarkItDown main branch—find package subdirectory 'packages/markitdown':   Install MarkItDown local filesystem providing absolute path directory containing pyproject.toml setup.py file:   See examples .","code":"\"git+https://github.com/astral-sh/ruff@v0.2.0\" \"git+https://github.com/astral-sh/ruff@1fadefa67b26508cc59cf38e6130bde2243c929d\" \"git+https://github.com/astral-sh/ruff@main\" \"markitdown@git+https://github.com/microsoft/markitdown.git@main#subdirectory=packages/markitdown\" \"markitdown@/Users/tomasz/github/microsoft/markitdown/packages/markitdown/\""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_require.html","id":"clearing-the-cache","dir":"Reference","previous_headings":"","what":"Clearing the Cache","title":"Declare Python Requirements — py_require","text":"uv already installed machine, reticulate use existing uv installation -, including default cache dir location. clear caches self-managed uv installation, send following system commands uv:   existing installation uv found, reticulate automatically download store , along downloaded artifacts ephemeral environments, tools::R_user_dir(\"reticulate\", \"cache\") directory. clear cache, delete directory:","code":"uv cache clean rm -r \"$(uv python dir)\" rm -r \"$(uv tool dir)\" # delete uv, ephemeral virtual environments, and all downloaded artifacts unlink(tools::R_user_dir(\"reticulate\", \"cache\"), recursive = TRUE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Python code — py_run","title":"Run Python code — py_run","text":"Execute code within scope __main__ Python module.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Python code — py_run","text":"","code":"py_run_string(code, local = FALSE, convert = TRUE)  py_run_file(file, local = FALSE, convert = TRUE, prepend_path = TRUE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Python code — py_run","text":"code Python code executed. local Boolean; Python objects created part local / private dictionary? FALSE, objects created within scope Python main module. convert Boolean; Python objects automatically converted R equivalent? set FALSE, can still manually convert Python objects R via py_to_r() function. file Python script executed. prepend_path Boolean; script directory added Python module search path? default, TRUE, matches behavior python <path//script.py> command line.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Python code — py_run","text":"Python dictionary objects. local FALSE, dictionary captures state Python main module running provided code. Otherwise, variables defined used captured.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_save_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Save and Load Python Objects — py_save_object","title":"Save and Load Python Objects — py_save_object","text":"Save load Python objects.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_save_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save and Load Python Objects — py_save_object","text":"","code":"py_save_object(object, filename, pickle = \"pickle\", ...)  py_load_object(filename, pickle = \"pickle\", ..., convert = TRUE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_save_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save and Load Python Objects — py_save_object","text":"object Python object. filename output file name. Note file extension .pickle considered \"standard\" extension serialized Python objects created pickle module. pickle \"pickle\" implementation use. Defaults \"pickle\", compatible Python \"pickle\" implementations (e.g. \"cPickle\") used well. ... Optional arguments, passed pickle module's dump() load() functions. convert Bool. Whether loaded pickle object converted R object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_save_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save and Load Python Objects — py_save_object","text":"Python objects serialized using pickle module – see https://docs.python.org/3/library/pickle.html details.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_set_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set an attribute of a Python object — py_set_attr","title":"Set an attribute of a Python object — py_set_attr","text":"Set attribute Python object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_set_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set an attribute of a Python object — py_set_attr","text":"","code":"py_set_attr(x, name, value)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_set_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set an attribute of a Python object — py_set_attr","text":"x Python object name Attribute name value Attribute value","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_set_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Python and NumPy random seeds — py_set_seed","title":"Set Python and NumPy random seeds — py_set_seed","text":"Set various random seeds required ensure reproducible results. provided seed value establish new random seed Python NumPy, also (default) disable hash randomization.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_set_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Python and NumPy random seeds — py_set_seed","text":"","code":"py_set_seed(seed, disable_hash_randomization = TRUE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_set_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Python and NumPy random seeds — py_set_seed","text":"seed single value, interpreted integer disable_hash_randomization Disable hash randomization, another common source variable results. See https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_set_seed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Python and NumPy random seeds — py_set_seed","text":"function set R random seed, call set.seed().","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_str.html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of a python object. — py_repr","title":"String representation of a python object. — py_repr","text":"equivalent calling str(object) repr(object) Python.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String representation of a python object. — py_repr","text":"","code":"py_repr(object)  py_str(object, ...)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String representation of a python object. — py_repr","text":"object Python object ... Unused","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of a python object. — py_repr","text":"Character vector","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_str.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"String representation of a python object. — py_repr","text":"Python, calling print() invokes builtin str(), auto-printing object REPL invokes builtin repr(). R, default print method python objects invokes py_repr(), default format() .character() methods invoke py_str(). historical reasons, py_str() also R S3 method allows R authors customize string representation Python object R. New code recommended provide format() /print() S3 R method python objects instead. default implementation call PyObject_Str object.","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_suppress_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Suppress Python warnings for an expression — py_suppress_warnings","title":"Suppress Python warnings for an expression — py_suppress_warnings","text":"Suppress Python warnings expression","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_suppress_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suppress Python warnings for an expression — py_suppress_warnings","text":"","code":"py_suppress_warnings(expr)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_suppress_warnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suppress Python warnings for an expression — py_suppress_warnings","text":"expr Expression suppress warnings ","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_suppress_warnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suppress Python warnings for an expression — py_suppress_warnings","text":"Result evaluating expression","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_to_r_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"R wrapper for Python objects — py_to_r_wrapper","title":"R wrapper for Python objects — py_to_r_wrapper","text":"S3 method create custom R wrapper Python object. default wrapper either R environment R function (callable python objects).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_to_r_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R wrapper for Python objects — py_to_r_wrapper","text":"","code":"py_to_r_wrapper(x)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_to_r_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R wrapper for Python objects — py_to_r_wrapper","text":"x Python object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_unicode.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Python Unicode Object — py_unicode","title":"Convert to Python Unicode Object — py_unicode","text":"Convert Python Unicode Object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_unicode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Python Unicode Object — py_unicode","text":"","code":"py_unicode(str)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_unicode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Python Unicode Object — py_unicode","text":"str Single element character vector convert","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_unicode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to Python Unicode Object — py_unicode","text":"default R character vectors converted Python strings. Python 3 values unicode objects however Python 2 8-bit string objects. function enables obtain Python unicode object R character vector running Python 2 (Python 3 standard Python string object returned).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Python version — py_version","title":"Python version — py_version","text":"Get version Python currently used reticulate.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Python version — py_version","text":"","code":"py_version(patch = FALSE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Python version — py_version","text":"patch boolean, whether include patch level returned version.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Python version — py_version","text":"version Python currently used, NULL Python yet initialized reticulate.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_versions_windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Discover versions of Python installed on a Windows system — py_versions_windows","title":"Discover versions of Python installed on a Windows system — py_versions_windows","text":"Discover versions Python installed Windows system","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_versions_windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discover versions of Python installed on a Windows system — py_versions_windows","text":"","code":"py_versions_windows()"},{"path":"https://rstudio.github.io/reticulate/dev/reference/py_versions_windows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discover versions of Python installed on a Windows system — py_versions_windows","text":"Data frame type, hive, install_path, executable_path, version.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/r-py-conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between Python and R objects — r-py-conversion","title":"Convert between Python and R objects — r-py-conversion","text":"Convert Python R objects","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/r-py-conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between Python and R objects — r-py-conversion","text":"","code":"r_to_py(x, convert = FALSE)  py_to_r(x)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/r-py-conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between Python and R objects — r-py-conversion","text":"x Python object. convert Boolean; Python objects automatically converted R equivalent? set FALSE, can still manually convert Python objects R via py_to_r() function.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/r-py-conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between Python and R objects — r-py-conversion","text":"R object, converted Python object.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_class_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a filter for class names — register_class_filter","title":"Register a filter for class names — register_class_filter","text":"Register filter class names","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_class_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a filter for class names — register_class_filter","text":"","code":"register_class_filter(filter)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_class_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a filter for class names — register_class_filter","text":"filter Function takes class name maps alternate name","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_help_topics.html","id":null,"dir":"Reference","previous_headings":"","what":"Register help topics — register_help_topics","title":"Register help topics — register_help_topics","text":"Register set help topics dispatching F1 help","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_help_topics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register help topics — register_help_topics","text":"","code":"register_help_topics(type = c(\"module\", \"class\"), topics)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_help_topics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register help topics — register_help_topics","text":"type Type (module class) topics Named list topics","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_module_help_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a help handler for a root Python module — register_module_help_handler","title":"Register a help handler for a root Python module — register_module_help_handler","text":"Register help handler root Python module","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_module_help_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a help handler for a root Python module — register_module_help_handler","text":"","code":"register_module_help_handler(module, handler)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_module_help_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a help handler for a root Python module — register_module_help_handler","text":"module Name root Python module handler Handler function: function(name, subtopic = NULL). name fully qualified name Python object (module, function, class). subtopic optional currently used methods within classes.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_module_help_handler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a help handler for a root Python module — register_module_help_handler","text":"help handler passed fully qualified module, class, function name (optional method classes). return URL help page (\"\" help page available).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_suppress_warnings_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a handler for calls to py_suppress_warnings — register_suppress_warnings_handler","title":"Register a handler for calls to py_suppress_warnings — register_suppress_warnings_handler","text":"Register handler calls py_suppress_warnings","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_suppress_warnings_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a handler for calls to py_suppress_warnings — register_suppress_warnings_handler","text":"","code":"register_suppress_warnings_handler(handler)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_suppress_warnings_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a handler for calls to py_suppress_warnings — register_suppress_warnings_handler","text":"handler Handler","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/register_suppress_warnings_handler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a handler for calls to py_suppress_warnings — register_suppress_warnings_handler","text":"Enables packages register pair functions called suppress re-enable warnings","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/repl_python.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Python REPL — repl_python","title":"Run a Python REPL — repl_python","text":"function provides Python REPL R session, can used interactively run Python code. code executed within REPL run within Python main module, generated Python objects persist Python session REPL detached.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/repl_python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Python REPL — repl_python","text":"","code":"repl_python(   module = NULL,   quiet = getOption(\"reticulate.repl.quiet\", default = FALSE),   input = NULL )"},{"path":"https://rstudio.github.io/reticulate/dev/reference/repl_python.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Python REPL — repl_python","text":"module (optional) Python module imported REPL launched. quiet Boolean; print startup banner launching REPL? TRUE, banner suppressed. input Python code run within REPL. Setting can useful like drive Python REPL programmatically.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/repl_python.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a Python REPL — repl_python","text":"working R Python scripts interactively, one can activate Python REPL repl_python(), run Python code, later run exit return R console.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/repl_python.html","id":"magics","dir":"Reference","previous_headings":"","what":"Magics","title":"Run a Python REPL — repl_python","text":"handful magics supported repl_python(): Lines prefixed ! executed system commands: !cmd --arg1 --arg2: Execute arbitrary system commands Magics start % prefix. Supported magics include: %conda ... executes conda command active conda environment %pip ... executes pip active python. %load, %loadpy, %run executes python file. %system, !! executes system command capture output %env: read current environment variables. %env name: read environment variable 'name'. %env name=val, %env name val: set environment variable 'name' 'val'. val elements {} interpolated using f-strings (required Python >= 3.6). %cd <dir> change working directory. %cd -: change previous working directory (set %cd). %cd -3: change 3rd recent working directory (set %cd). %cd -foo/bar: change recent working directory matching \"foo/bar\" regex (history directories set via %cd). %pwd: print current working directory. %dhist: print working directory history. Additionally, output system commands can captured variable, e.g.: x = !ls x list strings, consisting stdout output split \"\\n\" (stderr captured).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/repl_python.html","id":"example","dir":"Reference","previous_headings":"","what":"Example","title":"Run a Python REPL — repl_python","text":"","code":"# enter the Python REPL, create a dictionary, and exit repl_python() dictionary = {'alpha': 1, 'beta': 2} exit  # access the created dictionary from R py$dictionary # $alpha # [1] 1 # # $beta # [1] 2"},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/reticulate.html","id":null,"dir":"Reference","previous_headings":"","what":"R Interface to Python — reticulate","title":"R Interface to Python — reticulate","text":"R interface Python modules, classes, functions. calling Python R data types automatically converted equivalent Python types. values returned Python R converted back R types. reticulate package compatible versions Python >= 3.6. Integration NumPy requires NumPy version 1.6 higher.","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/reticulate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R Interface to Python — reticulate","text":"Maintainer: Tomasz Kalinowski tomasz@posit.co [contributor] Authors: Kevin Ushey kevin@posit.co JJ Allaire jj@posit.co Yuan Tang terrytangyuan@gmail.com (ORCID) [copyright holder] contributors: RStudio [copyright holder, funder] Dirk Eddelbuettel edd@debian.org [contributor, copyright holder] Bryan Lewis blewis@illposed.net [contributor, copyright holder] Sigrid Keydana sigrid@posit.co [contributor] Ryan Hafen rhafen@gmail.com [contributor, copyright holder] Marcus Geelnard (TinyThread library, http://tinythreadpp.bitsnbites.eu/) [contributor, copyright holder]","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/source_python.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and evaluate a Python script — source_python","title":"Read and evaluate a Python script — source_python","text":"Evaluate Python script within Python main module, make public (non-module) objects within main Python module available within specified R environment.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/source_python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and evaluate a Python script — source_python","text":"","code":"source_python(file, envir = parent.frame(), convert = TRUE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/source_python.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and evaluate a Python script — source_python","text":"file Python script executed. envir environment assign Python objects (example, parent.frame() globalenv()). Specify NULL assign Python objects. convert Boolean; Python objects automatically converted R equivalent? set FALSE, can still manually convert Python objects R via py_to_r() function.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/source_python.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and evaluate a Python script — source_python","text":"prevent assignment objects R, pass NULL envir parameter.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/tuple.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Python tuple — tuple","title":"Create Python tuple — tuple","text":"Create Python tuple object","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/tuple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Python tuple — tuple","text":"","code":"tuple(..., convert = FALSE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/tuple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Python tuple — tuple","text":"... Values tuple (single list converted tuple). convert TRUE automatically convert Python objects R equivalent. pass FALSE can manual conversion using py_to_r() function.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/tuple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Python tuple — tuple","text":"Python tuple","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/tuple.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Python tuple — tuple","text":"returned tuple automatically convert elements Python R. can manual conversion py_to_r() function pass convert = TRUE request automatic conversion.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/use_python.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Python — use_python","title":"Use Python — use_python","text":"Manually select version Python used reticulate. Note beginning Reticulate version 1.41, manually selecting Python installation generally necessary, reticulate able automatically resolve ephemeral Python environment necessary Python requirements declared via py_require().","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/use_python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Python — use_python","text":"","code":"use_python(python, required = NULL)  use_python_version(version, required = NULL)  use_virtualenv(virtualenv = NULL, required = NULL)  use_condaenv(condaenv = NULL, conda = \"auto\", required = NULL)  use_miniconda(condaenv = NULL, required = NULL)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/use_python.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use Python — use_python","text":"python path Python binary. required requested copy Python required? TRUE, error emitted requested copy Python exist. FALSE, request taken hint , scanning versions still proceed. value NULL (default), equivalent TRUE. version version Python use. reticulate search versions Python installed install_python() helper function. virtualenv Either name , path , Python virtual environment. condaenv conda environment use. use_condaenv(), can name, absolute prefix path, absolute path python binary. name ambiguous, first environment used warning issued. use_miniconda(), conda installation searched one installed install_miniconda(). conda path conda executable. default, reticulate check PATH, well standard locations Anaconda installations.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/use_python.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use Python — use_python","text":"reticulate package initializes Python bindings lazily – , initialize Python bindings API explicitly requires Python loaded called. allows users package authors request particular versions Python calling use_python() one helper functions documented help file.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/use_python.html","id":"reticulate-python","dir":"Reference","previous_headings":"","what":"RETICULATE_PYTHON","title":"Use Python — use_python","text":"RETICULATE_PYTHON environment variable can also used control copy Python reticulate chooses bind . set path Python interpreter, interpreter can either : standalone system interpreter, Part virtual environment, Part Conda environment. set, override requests use particular copy Python. Setting ~/.Renviron (optionally, project .Renviron) can useful way forcing reticulate use particular version Python.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/use_python.html","id":"caveats","dir":"Reference","previous_headings":"","what":"Caveats","title":"Use Python — use_python","text":"Note requests particular version Python via use_python() friends persist active session; must re-run new R session appropriate. use_python() (one use_*() functions) called multiple times, recently-requested version Python used. Note request use_python() always overridden RETICULATE_PYTHON environment variable, set. py_config() function also provide short note describing reticulate chose select version Python ultimately activated.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/uv_run_tool.html","id":null,"dir":"Reference","previous_headings":"","what":"uv run tool — uv_run_tool","title":"uv run tool — uv_run_tool","text":"Run Command Line Tool distributed Python package. Packages automatically download installed cached, ephemeral, isolated environment first run.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/uv_run_tool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uv run tool — uv_run_tool","text":"","code":"uv_run_tool(   tool,   args = character(),   ...,   from = NULL,   with = NULL,   python_version = NULL,   exclude_newer = NULL )"},{"path":"https://rstudio.github.io/reticulate/dev/reference/uv_run_tool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"uv run tool — uv_run_tool","text":"tool, args character vector command arguments. Arguments quoted shell, may need use shQuote(). ... Arguments passed base::system2 stdout,stderr output stdout     stderr sent.  Possible values \"\", R     console (default), NULL FALSE (discard output),     TRUE (capture output character vector)     character string naming file. stdin input diverted?  \"\" means default,     alternatively character string naming file.  Ignored     input supplied. input character vector supplied, copied one     string per line temporary file, standard input     command redirected file. env character vector name=value strings set environment     variables. wait logical (NA) indicating whether R     interpreter wait command finish, run     asynchronously.  ignored (interpreter     always wait) stdout = TRUE stderr = TRUE.     running command asynchronously, output displayed     Rgui console Windows (dropped, instead). timeout timeout seconds, ignored 0.  limit     elapsed time running command separate process.   Fractions     seconds ignored. receive.console.signals logical (NA) indicating whether     command receive events terminal/console R runs     , particularly whether interrupted Ctrl-C.     ignored events always received     intern = TRUE wait = TRUE. minimized,invisible arguments accepted Windows     ignored platform, warning. Use given Python package provide command. Run given Python packages installed. can also specify version constraints like \"ruff>=0.3.0\". python_version Python version string, character vector Python version constraints. exclude_newer String. Limit package versions published specified date. offers lightweight alternative freezing package versions, helping guard Python package updates break workflow. Accepts strings formatted RFC 3339 timestamps (e.g., \"2006-12-02T02:07:43Z\") local dates format (e.g., \"2006-12-02\") system's configured time zone.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/uv_run_tool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"uv run tool — uv_run_tool","text":"Return value system2()","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/uv_run_tool.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uv run tool — uv_run_tool","text":"","code":"uv_run_tool(\"pycowsay\", shQuote(\"hello from reticulate\")) uv_run_tool(\"markitdown\", shQuote(file.path(R.home(\"doc\"), \"NEWS.pdf\")), stdout = TRUE) uv_run_tool(\"kaggle competitions download -c dogs-vs-cats\") uv_run_tool(\"ruff\", \"--help\") uv_run_tool(\"ruff format\", shQuote(Sys.glob(\"**.py\"))) uv_run_tool(\"http\", from = \"httpie\") uv_run_tool(\"http\", \"--version\", from = \"httpie<3.2.4\", stdout = TRUE) uv_run_tool(\"saved_model_cli\", \"--help\", from = \"tensorflow\")"},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/reference/virtualenv-tools.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to Python Virtual Environments — virtualenv-tools","title":"Interface to Python Virtual Environments — virtualenv-tools","text":"R functions managing Python virtual environments.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/virtualenv-tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to Python Virtual Environments — virtualenv-tools","text":"","code":"virtualenv_create(   envname = NULL,   python = virtualenv_starter(version),   ...,   version = NULL,   packages = \"numpy\",   requirements = NULL,   force = FALSE,   module = getOption(\"reticulate.virtualenv.module\"),   system_site_packages = getOption(\"reticulate.virtualenv.system_site_packages\", default     = FALSE),   pip_version = getOption(\"reticulate.virtualenv.pip_version\", default = NULL),   setuptools_version = getOption(\"reticulate.virtualenv.setuptools_version\", default =     NULL),   extra = getOption(\"reticulate.virtualenv.extra\", default = NULL) )  virtualenv_install(   envname = NULL,   packages = NULL,   ignore_installed = FALSE,   pip_options = character(),   requirements = NULL,   ...,   python_version = NULL )  virtualenv_remove(envname = NULL, packages = NULL, confirm = interactive())  virtualenv_list()  virtualenv_root()  virtualenv_python(envname = NULL)  virtualenv_exists(envname = NULL)  virtualenv_starter(version = NULL, all = FALSE)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/virtualenv-tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to Python Virtual Environments — virtualenv-tools","text":"envname name , path , Python virtual environment. name contains slashes, name interpreted path; name contain slashes, treated virtual environment within virtualenv_root(). NULL, virtual environment specified RETICULATE_PYTHON_ENV environment variable used instead. refer virtual environment current working directory, can prefix path ./<name>. python path Python interpreter, used created virtual environment. can also accept version constraint like \"3.10\", passed virtualenv_starter() find suitable python binary. ... Optional arguments; currently ignored reserved future expansion. version, python_version (string) version Python use creating virtual environment. Python installations searched using virtualenv_starter(). can specific version, like \"3.9\" \"3.9.3\", comma separated list version constraints, like \">=3.8\", \"<=3.11,!=3.9.3,>3.6\" packages set Python packages install (via pip install) virtual environment, created. default, \"numpy\" package installed, pip, setuptools wheel packages updated. Set FALSE avoid installing packages virtual environment created. requirements Filepath pip requirements file. force Boolean; force recreating environment specified envname, even already exists. TRUE, pre-existing environment first deleted recreated. Otherwise, FALSE (default), path existing environment returned. module Python module used creating virtual environment – typically, virtualenv venv. NULL (default), venv used available Python >= 3.6; otherwise, virtualenv module used. system_site_packages Boolean; create new virtual environments --system-site-packages flag, thereby allowing virtual environments access system's site packages? Defaults FALSE. pip_version version pip installed virtual environment. Relevant module == \"virtualenv\". Set FALSE disable installation pip altogether. setuptools_version version setuptools installed virtual environment. Relevant module == \"virtualenv\". Set FALSE disable installation setuptools altogether. extra optional set extra command line arguments passed. Arguments quoted via shQuote() necessary. ignore_installed Boolean; ignore previously-installed versions requested packages? (normally TRUE, pre-installed packages available site libraries ignored hence packages installed virtual environment.) pip_options optional character vector additional command line arguments passed pip. confirm Boolean; confirm removing packages virtual environments? TRUE, virtualenv_starter() returns 2-column data frame, column names path version. FALSE, single path python binary returned, corresponding first entry = TRUE, NULL suitable python binaries found.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/virtualenv-tools.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interface to Python Virtual Environments — virtualenv-tools","text":"Virtual environments default located ~/.virtualenvs (accessed virtualenv_root() function). can change default location defining RETICULATE_VIRTUALENV_ROOT WORKON_HOME environment variables. Virtual environments created another \"starter\" \"seed\" Python already installed system. Suitable Pythons installed system found virtualenv_starter().","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/with-as-operator.html","id":null,"dir":"Reference","previous_headings":"","what":"Create local alias for objects in with statements. — with-as-operator","title":"Create local alias for objects in with statements. — with-as-operator","text":"Create local alias objects statements.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/with-as-operator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create local alias for objects in with statements. — with-as-operator","text":"","code":"object %as% name"},{"path":"https://rstudio.github.io/reticulate/dev/reference/with-as-operator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create local alias for objects in with statements. — with-as-operator","text":"object Object alias name Alias name","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/with.python.builtin.object.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate an expression within a context. — with.python.builtin.object","title":"Evaluate an expression within a context. — with.python.builtin.object","text":"method objects type python.builtin.object implements context manager protocol used Python statement. passed object must implement context manager (__enter__ __exit__ methods.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/reference/with.python.builtin.object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate an expression within a context. — with.python.builtin.object","text":"","code":"# S3 method for class 'python.builtin.object' with(data, expr, as = NULL, ...)"},{"path":"https://rstudio.github.io/reticulate/dev/reference/with.python.builtin.object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate an expression within a context. — with.python.builtin.object","text":"data Context enter exit expr Expression evaluate within context Name variable assign context duration expression's evaluation (optional). ... Unused","code":""},{"path":[]},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1430","dir":"Changelog","previous_headings":"","what":"reticulate 1.43.0","title":"reticulate 1.43.0","text":"CRAN release: 2025-07-21 Fixed usage micromamba mamba, next-generation conda environment management tools. reticulate now prefers use micromamba, mamba, conda managing environments (@gdevenyi, #1771). Added str(), dim(), t() S3 methods NumPy Arrays. Fixed segfault observed R session exit (#1785, #1786). Added check install_miniconda() existing files overwritten. (#1794, #1796) Fixed error install_python() R 4.5 requested Python version \":latest\" suffix, default. (#1792, #1797) Fixed error get_python_conda_info() conda found conda-meta/history NULL passed normalizePath (#1184) Hotfix pin uv version resolved reticulate <0.8.0. (#1812) Python discovery uv much faster now. internal utility uv_python_list() searches managed python environments default. Users can request discovery system pythons setting UV_PYTHON_PREFERENCE. Also, uv_python_list() now discover pyenv pythons python binaries installed install_python() system python requested. (#1810)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1420","dir":"Changelog","previous_headings":"","what":"reticulate 1.42.0","title":"reticulate 1.42.0","text":"CRAN release: 2025-03-25 Fixed issue RStudio Windows interrupts ignored Python code executing (#1753). Updates Positron fix issues repl_python() Variables Pane (#1755). Fixed issue [ received Python objects slice arguments. e.g., x[start:end] start end Python objects (#1731). [ method now translate symbol .. Python Ellipsis .... (#1763) [ method can now accept index values greater 2^31 (#1769) Reticulate-managed uv can now resolve system-installed Pythons, supporting platforms pre-built binaries unavailable, musl-based Alpine Linux (#1751, #1752). uv_run_tool() gains exclude_newer argument (#1748). py_register_load_hook() now exported enable usage described “Using reticulate R package vignette” (#1754). https://rstudio.github.io/reticulate/articles/package.html Internal changes support R-devel (4.5) R API updates (#1747, #1774). Internal fixes prevent reticulate-managed uv writing outside reticulates cache directory (#1745). Fixed issue pointing reticulate pyenv shim python (#1758)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1410","dir":"Changelog","previous_headings":"","what":"reticulate 1.41.0","title":"reticulate 1.41.0","text":"CRAN release: 2025-02-24 New py_require() function declaring Python requirements current R session. details, see updated vignettes help: Installing Python Packages: https://rstudio.github.io/reticulate/dev/articles/python_packages.html Using reticulate R Package: https://rstudio.github.io/reticulate/dev/articles/package.html py_require() help: https://rstudio.github.io/reticulate/dev/reference/py_require.html New uv_run_tool() function running command line tools distributed via Python packages. Raw R arrays NumPy arrays dtype “V1” (“void8”) now convert . Use r_to_py(.array(x)) efficiently convert raw vectors NumPy arrays, py_to_r(array$view(\"V1\")) efficiently convert NumPy arrays raw vectors. (#1734) Fixed issue using Python 3.12 Linux (#1712, #1714). Fixed issue virtualenv_starter() discover custom built Python (#1704).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1400","dir":"Changelog","previous_headings":"","what":"reticulate 1.40.0","title":"reticulate 1.40.0","text":"CRAN release: 2024-11-15 S3 classes (rarely encountered) Python objects changed. Python objects non-standard __module__ values affected. Python object’s parent class’s __module__ attribute resolve string, reticulate: Attempts resolve class’s class, ’s metaclass. string can resolved, reticulate longer implicitly prepends ‘python.builtin.’ class prefix, instead uses just __name__. (See #1686 context) Added support Python 3.13. Note Python 3.13 removed support classmethod descriptors, may affect S3 class Python objects use metaclass properties resolve class’s __module__ __name__ attribute. (#1686, #1698) py_is_null_xptr() [[ now load delayed modules (#1688). Fixed error attempting use python venv created uv (#1678) Resolved issue py_discover_config() attempted detect Windows App Store Python installations. now excluded discovery py_discover_config() virtualenv_starter() (#1656, #1673). Fixed error converting empty NumPy char array R (#1662). Fixed error using reticulate radian (#1668, #1670). Fixed segfault encountered running Python session finalizer (#1663, #1664). Resolved segfault RStudio rapidly switching R Python chunks Quarto document (#1665). Improved behavior conda binary used create environment resolved (contributed @tl-hbk, #1654, #1659). Added Positron support Variables Pane repl_python() (#1692, #1641, #1648, #1658, #1681, #1687).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1390","dir":"Changelog","previous_headings":"","what":"reticulate 1.39.0","title":"reticulate 1.39.0","text":"CRAN release: 2024-09-05 Python background threads can now run parallel R session (#1641). py_main_thread_func() deprecated; every R function can now safely called background Python threads (#1648). Calls Python threads R now notify main thread using R’s native event loop, ensuring calls handled even main thread engaged non-Python tasks (#1648). knitr engine now avoids overwriting Altair’s default chart dimensions values ut.width.px ut.height.px. Use altair.fig.height, altair.fig.width, Altair’s width height parameters adjust chart dimensions (contributed @joelostblom, #1646). New .character() method python.builtin.str support handling embedded NULs strings (#1653). New .raw() method python.builtin.bytes (#1649, #1652). .character() method python.builtin.bytes gains nul argument, allowing convenient handling embedded NULs string (#1652). Reticulate now uses RETICULATE_VIRTUALENV_ROOT environment variable determining resolve virtual environments (#1657). conda_run2() now exported (contributed @dramanica, #1637). Python session now finalized R session exits (#1648). Internal updates NumPy 2.1 (#1651). Fixed error importing module named config (#1628). Fixes CRAN check failures macOS-oldrel (#1645). Fixed error opening Python subprocess Positron Windows resulted “OSError: [WinError 6] handle invalid.” (#1658, posit-dev/positron#4457).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1380","dir":"Changelog","previous_headings":"","what":"reticulate 1.38.0","title":"reticulate 1.38.0","text":"CRAN release: 2024-06-19 Python Exceptions converted R conditions now R lists instead R environments, compatability {rlang} {purrr}. (tidyverse/purrr#1104, r-lib/rlang#1664, #1617) Internal updates NumPy 2.0 (#1621) Added support converting NumPy StringDType arrays R character arrays. (#1623) Internal updates compliance R’s upcoming formalized C API. (#1625) Fixed issue attempting convert NumPy array non-simple dtype R signal error. (#1613, fixed #1614).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1370","dir":"Changelog","previous_headings":"","what":"reticulate 1.37.0","title":"reticulate 1.37.0","text":"CRAN release: 2024-05-21 Interrupting Python longer leads segfaults. (#1601, fixed #1602) Print method Python callables now includes callable’s signature. (#1605, #1607) Reticulate now installs successfully Windows ARM64. (#1609, contributed @andrjohns) virtualenv_starter() longer warns encountering broken symlinks. (#1598) Fixed issue configuration reticulate conda_* functions use executable mamba instead conda ignored. (#1608, contributed @AlexandreGuinaudeau)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1361","dir":"Changelog","previous_headings":"","what":"reticulate 1.36.1","title":"reticulate 1.36.1","text":"CRAN release: 2024-04-22 Fix issue py_to_r() method Pandas DataFrames error py_to_r() S3 methods defined Pandas subtypes, (done {anndata}) (#1591). “Python Dependencies” vignette edits (@salim-b, #1586) Added option extra command-line arguments conda_create() conda_install() (#1585). Fixed issue conda_install() ignore user-specified channels Python installation (#1594).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1360","dir":"Changelog","previous_headings":"","what":"reticulate 1.36.0","title":"reticulate 1.36.0","text":"CRAN release: 2024-04-15 Internal refactoring optimizations now give faster experience, especially workflows frequently access Python objects R. example, simple attribute access like sys$path ~2.5x times faster, sample workload py_to_r(np_array(1:3) + np_array(1:3)) benchmarks ~3.5x faster compared previous CRAN release. Fixed issue callable python objects created convert = FALSE wrapped R function (#1522). Fixed issue py_to_r() S3 methods called arguments supplied R functions called Python (#1522). install_python() now build optimized versions Python macOS Linux (#1567) Default Python version installed install_python() now 3.10 (3.9) (#1574). Output reticulate::py_last_error() now includes hint, showing access full R call stack (#1572). Fixed issue nested py_capture_output() calls result lost reference original sys.stdout sys.stderr, resulting visible output Python, eventually, segfault. (#1564) Fixed issues reported rchk, requested CRAN (#1581). py_to_r(x) now returns x unmodified x Python object, instead signaling error. New .data.frame() method exported Python Polars DataFrames (#1568) Fixed issue printing delayed module (import(\"foo\", delay_load = TRUE)) output <pointer: 0x0>. py_validate_xptr() now attempt resolve delayed modules signaling error (#1561). R packages can now express multiple preferred Python environments search use exist, supplying character vector import(): import(\"foo\", delay_load = list(environment = c(\"r-foo\", \"r-bar\"))) (#1559) Reticulate longer warn ignored use_python(,required = FALSE) calls (#1562). reticulate now prefers using agg matplotlib backend R session non-interactive. backend can also overridden via MPLBACKEND RETICULATE_MPLBACKEND environment variables necessary (#1556). attr(x, \"tzone\") attributes (better) preserved converting POSIXt Python. POSIXt types non-empty tzone attr convert datetime.datetime, otherwise convert NumPy datetime64[ns] arrays. Fixed issue calling py_set_item() subclassed dict invoke custom __setitem__ method. py_del_attr(x, name) now returns x invisibly source_python() longer exports r symbol R global environment. (“R Interface Object” used Python code get reference R globalenv()) Fixed hang encountered (sometimes) attempting call iterate() exhausted py_iterator() object multiple times (#1539). iterate(simplify=TRUE) rewritten C speed improvements (#1539). Update Pandas 2.2 deprecation Index.format() (#1537, #1538). Updates CRAN R-devel (R 4.4) (#1554). Fixed issue py_discover_config() discover python (v2) PATH preference python3 PATH. (#1547) Fixed issue reticulate error using conda environments created (new) conda env create command. (#1535, #1543) Fixed issue reticulate error using conda environment original conda binary used create environment longer available (#1555) Fixed issue user unable accept prompt create default “r-reticulate” venv (#1557). is_py_object() now exported (#1573).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1350","dir":"Changelog","previous_headings":"","what":"reticulate 1.35.0","title":"reticulate 1.35.0","text":"CRAN release: 2024-01-31 Subclassed Python list dict objects longer automatically converted R vectors. Additionally, S3 R class attribute Python objects now constructed using Python type(object) directly, rather object.__class__ attribute. See #1531 details context. R external pointers (EXTPTRSXP objects) now round-trip py_to_r(r_to_py(x)) successfully. (reported #1511, fixed #1519, contributed @llaniewski). Fixed issue virtualenv_create() error Ubuntu 22.04 using system python base. (#1495, fixed #1496). Fixed issue csc_matrix objects unsorted indices converted dgCMatrix. (related #727, fixed #1524, contributed @rcannood). Added support partially unexpanded variables like $USER XDG_DATA_HOME similar (#1513, #1514)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"knitr-python-engine-changes-1-35-0","dir":"Changelog","previous_headings":"","what":"Knitr Python Engine Changes:","title":"reticulate 1.35.0","text":"knitr python engine now formats captured python exceptions include exception type exception notes chunk options error = TRUE set (reported #1520, fixed #1527). Fixed issue knitr python engine fail include figures python chunks custom root.dir chunk option set. (reported #1526, fixed #1529) knitr engine gains ability save chunk figures multiple files/formats (Contributed @Rumengol #1507) Fixed issue matplotlib figures generated initial chunk matplotlib first imported wrong size (reported #1523, fixed #1530) Fixed issue knitr engine correctly display altair compound charts one present document (#1500, #1532).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1340","dir":"Changelog","previous_headings":"","what":"reticulate 1.34.0","title":"reticulate 1.34.0","text":"CRAN release: 2023-10-12","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1330","dir":"Changelog","previous_headings":"","what":"reticulate 1.33.0","title":"reticulate 1.33.0","text":"Fixed issue asyncio, (modules use asyncio), error Windows running RStudio (#1478, #1479). Added compatability Python 3.12. condaenv_exists() now exported.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1320","dir":"Changelog","previous_headings":"","what":"reticulate 1.32.0","title":"reticulate 1.32.0","text":"CRAN release: 2023-09-11 reticulate now supports casting R data.frames Pandas data.frames using nullable data types, allowing users preserve NA’s R atomic vectors. feature opt-can enabled setting R option reticulate.pandas_use_nullable_dtypes TRUE. (#1439) reticulate now exports chooseOpsMethod() method, allowing Ops dispatch specialized Ops methods defined Python objects. py_discover_config() now warn instead error upon encountering broken Python installation. (#1441, #1459) Fixed issue Python raise exception “OSError: [WinError 6] handle invalid” opening subprocess running Rstudio Windows. (#1448, #518) Fixed issue multiprocessing Python module crash hang spawning Process() Windows. (#1430, #1346, fixed #1461) Fixed issue virtualenv_create() fail discover ‘virtualenv’ module system Python installation Ubuntu. Reticulate longer discover attempt use venv module stub present Ubuntu systems python3-venv apt package installed. (mlverse/pysparklyr#11, #1437, #1455) Fixed issue user prompted create ‘r-reticulate’ venv RStudio IDE reticulate requested initialize Python. (#1450, #1456) Improved error message reticulate attempts initialize virtual environment Python installation created longer available. (#1149, #1457) Improved error message Fedora attempting create virtual environment system python running dnf install python3-pip. Fixed issue install_python() macOS RStudio IDE fail discover use brew Python build dependencies. Fixed error virtualenv_create(python = \"/usr/bin/python\") centos7. (#1467)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-131","dir":"Changelog","previous_headings":"","what":"reticulate 1.31","title":"reticulate 1.31","text":"CRAN release: 2023-08-10","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"python-installation-management-1-31","dir":"Changelog","previous_headings":"","what":"Python Installation Management","title":"reticulate 1.31","text":"reticulate longer prompt users install miniconda. Instead, reticulate now prompt users create default r-reticulate venv. search reticulate conducts select Python installation load changed. See updated Python “Order Discover” “versions” vignette. vignette(\"versions\", package = \"reticulate\"). Updated recommendations “python_dependencies” vignette R packages can approach Python dependency management. vignette(\"python_dependencies\", package = \"reticulate\") New function virtualenv_starter(), can used find suitable python binary creating virtual environment. now default method finding python binary calling virtualenv_create(version = <version>). virtualenv_create() virtualenv_install() gain requirements argument, accepting filepath python requirements file. virtualenv_create() gains force argument. virtualenv_install() gains python_version argument, allowing users customize python version used bootstrapping new virtual environment. Fixed issue list available python versions used install_python() --date. install_python() now gives better error message git installed. install_python() macOS now use brew, ’s available, install build dependencies, substantially speeding python build times. New function conda_search(), contributed @mkoohafkan PR #1364.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"language-1-31","dir":"Changelog","previous_headings":"","what":"Language","title":"reticulate 1.31","text":"New [ [<- methods invoke Python __getitem__, __setitem__ __delitem__. R generics [ [<- now accept python-style slice syntax like x[1:2:3]. See examples ?py_get_item. py_iterator() gains prefetch argument, primarily avoid deadlocks main thread blocked, waiting iterator, waiting run main thread, encountered TensorFlow/Keras. (#1405). String columns Pandas data frames containing None, pd.NA np.nan now simplified character vectors missing values replaced NA (#1428). Converting Pandas data frames containing columns Pandas nullable data types now correctly converted R data.frames preserving missing values (#1427).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"knitr-1-31","dir":"Changelog","previous_headings":"","what":"Knitr","title":"reticulate 1.31","text":"knitr engine gains jupyter_compat option, enabling reticulate better match behavior Jupyter. chunk option set TRUE, return value last expression chunk auto-printed. (#1391, #1394, contributed @matthew-brett) knitr engine now reliably detects displays matplotlib pending plots, without need matplotlib artist object returned top-level expression. E.g., knitr engine now display plots matplotlib api returns something artist object, (plt.bar()), matplotlib return value auto-printed due assigned, (x = plt.plot()), suppressed ;, (plt.plot();). (#1391, #1401, contributed @matthew-brett) Fixed issue knitr engine respect chunk options fig.width / fig.height rendering matplotlib plots. (#1398) Fixed issue reticulate knitr engine capture output printed python. (PR #1412, fixing #1378, #331)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"miscellanous-1-31","dir":"Changelog","previous_headings":"","what":"Miscellanous","title":"reticulate 1.31","text":"Reticulate now periodically flushes python stdout stderr buffers even main thread blocked executing Python code. Streaming output long-running Python function call now appear R console Python function still executing. (Previously, output might appear Python function finished control main thread returned R). Updated sparse matrix conversion routines compatibility scipy 1.11.0. Fixed issue py capsule finalizer access R API background thread. (#1406) Fixed issue R segfault (crash) long-lived R sessions rpy2 reticulate use (#1236). Fixed issue exceptions reticulate formatted properly running tests testthat (r-lib/rlang#1637, #1413). Fixed issue py_get_attr(silent = TRUE) return R NULL, attribute missing, documented. (#1413) Fixed issue py_get_attr(silent = TRUE) leave python global exception set attribute missing, resulting fatal errors running python debug mode. (#1396)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-130","dir":"Changelog","previous_headings":"","what":"reticulate 1.30","title":"reticulate 1.30","text":"CRAN release: 2023-06-09 Fix compilation error R 3.5. Bump minimum R version dependency 3.5.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-129","dir":"Changelog","previous_headings":"","what":"reticulate 1.29","title":"reticulate 1.29","text":"CRAN release: 2023-06-05","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"exceptions-and-errors-1-29","dir":"Changelog","previous_headings":"","what":"Exceptions and Errors:","title":"reticulate 1.29","text":"R error information (call, message, attributes) now preserved R error condition traverses R <-> Python boundary. Python Exceptions now inherit error condition, can passed directly base::stop() signal error R raise exception Python. Raised Python Exceptions now used directly signal R error. example, following code, e now object inherits python.builtin.Exception well error condition: r     e <- tryCatch(py_func_that_raises_exception(),                   error = function(e) e) Use base::conditionCall() base::conditionMessage() access original R call error message. py_last_error() return object contains r_call, r_trace /r_class Python Exception raised R function called Python. hint run reticulate::py_last_error() exception now clickable RStudio IDE. Filepaths Python files print output py_last_error() now clickable links RStudio IDE. Python exceptions encountered repl_python() now printed full Python traceback default. RStudio IDE, filepaths tracebacks rendered clickable links. (#1240)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"language-1-29","dir":"Changelog","previous_headings":"","what":"Language:","title":"reticulate 1.29","text":"Converted Python callables gain support dynamic dots rlang package. New features: splicing (unpacking) arguments: fn(!!!kwargs) dynamic names: nm <- \"key\"; fn(\"{nm}\" := value) trailing commas ignored (matching Python syntax): fn(, ) identical fn() New Ops group generics Python objects: +, -, *, /, ^, %%, %/%, &, |, !, %*%. Methods Ops group generics now defined Python objects. (#1187, #1363) E.g., now works: Fixed two issues R comparison operator methods (==, !=, <, <=, >=, >): operators longer error Python objects define “rich comparison” Python methods don’t return single bool. (e.g., numpy arrays). operators now respect ‘convert’ value supplied Python objects. Note, may breaking change , e.g, ==, may now long return R scalar logical one Python object compared created convert = FALSE. Wrap result comparison py_bool() restore previous behavior. (#1187, #1363) R functions wrapping Python callables now formals matching Python callable signature, enabling better autocompletion contexts (#1361). new nameOfClass() S3 method Python types, enabling usage: base::inherits(x, <python-type-object>) (requires R >= 4.3.0) py_run_file() source_python() now prepend script directory Python module search path, sys.path, requested script executing. allows Python scripts resolve imports modules defined script directory, matching behavior python <script> command line. (#1347)","code":"np <- reticulate::import(\"numpy\", convert = FALSE) x <- np$array(1:5) y <- np$array(6:10) x + y"},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"knitr-1-29","dir":"Changelog","previous_headings":"","what":"knitr:","title":"reticulate 1.29","text":"knitr engine now suppresses warnings Python code warning=FALSE set chunk options. (quarto-dev/quarto#125, #1358) Fixed issue reticulate’s knitr engine attach comments code chunk wrong code chunk (requires Python>=3.8) (#1223). knitr Python engine now respects strip.white option (#1273). Fixed issue knitr engine show additional plot chunk user called matplotlib.pyplot.show() (#1380, #1383)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"misc-1-29","dir":"Changelog","previous_headings":"","what":"Misc:","title":"reticulate 1.29","text":"py_to_r() now succeeds converting subtypes built-types (e.g. list, dict, str). (#1352, #1348, #1226, #1354, #1366) New pillar::type_sum() method now exported Python objects. ensures full object class name printing R tracebacks tibbles containing Python objects. py_load_object() gains convert argument. convert = FALSE, returned Python object converted R object. Fixed error r_to_py() Pandas>=2.0 R data.frames factor column containing levels NA. r_to_py() now succeeds many additional types R objects. Objects reticulate doesn’t know convert presented Python runtime pycapsule (opaque pointer underlying R object). Previously error. allows R code pass R objects safely converted Python Python runtime R code. (e.g, R function called Python code). (#1304) reticulate gains ability bind micromamba Python installations (#1378, #1176, #1382, #1379, thanks Zia Khan, @zia1138) Default Python version used install_miniconda() friends now 3.9 (3.8).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-128","dir":"Changelog","previous_headings":"","what":"reticulate 1.28","title":"reticulate 1.28","text":"CRAN release: 2023-01-27 Fixed issue source_python() (likely many entrypoints) error reticulate built Rcpp 1.0.10. Exception error handling updated accommodate usage R_ProtectUnwind(). (#1328, #1329). Fixed issue reticulate failed discover Python 3.11 Windows. (#1325) Fixed issue reticulate error attempting bind cygwin/msys2 installation Python Windows (#1325).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-127","dir":"Changelog","previous_headings":"","what":"reticulate 1.27","title":"reticulate 1.27","text":"CRAN release: 2023-01-07 py_run_file() now ensures __file__ dunder visible executing python code. (#1283, #1284) Fixed errors install_miniconda() conda_install(), Windows (#1286, #1287, conda/conda#11795, #1312, #1297), Linux macOS (#1306, conda/conda#10431) Fixed error activating conda env UNC drive Windows (#1303).","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-126","dir":"Changelog","previous_headings":"","what":"reticulate 1.26","title":"reticulate 1.26","text":"CRAN release: 2022-08-31 Fixed issue reticulate failed bind python2. (#1241, #1229) warning now issued reticulate binds python2 python2 support removed upcoming reticulate release. py_id() now returns character string, instead R integer (#1216). Fixed issue py_to_r() convert elements dictionary (#1221). Fixed issue setting RETICULATE_PYTHON RETICULATE_PYTHON_FALLBACK Windows pyenv-win python.bat shim result error (#1263). Fixed issue datetime.datetime objects tzinfo attribute getting converted R correctly (#1266). Fixed issue pandas pandas.Categorical(,ordered=True) Series correctly converted R ordered factor (#1234). reticulate Python engine longer halts error Python chunks containing parse errors error=TRUE chunk option set. (#583) install_python() now leverages brew python build dependencies like openssl@1.1 brew already installed PATH, substantially speeding install_python() macOS systems brew configured. Fixed issue reticulate fail bind conda environment macOS linux conda installed non-POSIX compliant activation script conda environment. (#1255) Fixed issue python knitr engine error printing HTML constructor class instances _repr_html_ to_html method (e.g., pandas.DataFrame; #1249, #1250). Fixed issue python knitr engine error printing plotly figure HTML document (head-less) linux environments (#1250). Fixed issue conda_install(pip=TRUE) install packages user Python library instead conda env environment variable PIP_USER=true set. py_install(), virtualenv_install(), conda_install() now always specify ---user invoking pip install. (#1209) Fixed issue py_last_error() return unconverted Python objects (#1233) Knitr engine now supports printing Python objects _repr_markdown_ methods. (via quarto-dev/quarto-cli#1501) sys.executable Windows now correctly reports path Python executable instead launching R executable. (#1258) sys module longer automatically imported __main__ reticulate. Fixed issue Windows reticulate fail find Python installations pyenv installed via scoop. Fixed issue configure_environment() error Windows. (#1247) Updated docs compatibility HTML5 / R 4.2. Updated r_to_py.sparseMatrix() method compatibility Matrix 1.4-2.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-125","dir":"Changelog","previous_headings":"","what":"reticulate 1.25","title":"reticulate 1.25","text":"CRAN release: 2022-05-11 Fixed issue reticulate fail R running embedded rpy2. reticulate now ensures Python GIL acquired calling Python. (#1188, #1203) Fixed issue reticulate fail bind ArcGIS Pro conda environment (#1200, @philiporlando). Fixed issue reticulate fail bind Anaconda base environment Windows. commands create, modify, delete Python environment now echo system command executed. Affected: virtualenv_{create,install,remove} conda_{create,clone,remove,install,update} py_install install_python() create_virtualenv() gain ability automatically select latest patch requested Python version. e.g.: install_python(\"3.9:latest\"), create_virtualenv(\"-env\", version = \"3.9:latest\") install_python() version arg gains default value \"3.9:latest\". install_python() can now called arguments. Fixed issue reticulate fail bind conda python user didn’t write permissions conda installation (#1156). Fixed issue reticulate fail bind conda python spaces present file path associated conda binary (#1154). use_python(, required = TRUE) now issues warning request ignored (#1150). New function py_repr() (#1157) print() related changes (#1148, #1157): default print() method Python objects now invokes py_repr() instead str(). Python objects gain default format() method invokes py_str(). py_str() default method longer strips object memory address. print() now returns printed object invisibly, composability %>%. Exception handling changes (#1142, @t-kalinowski): R error messages Python exceptions now truncated differently satisfy getOption(\"warning.length\"). hint call reticulate::py_last_error() shown exception message truncated. Python buffers sys.stderr sys.stdout now flushed Python exceptions raised. -py_last_error(): Return object now S3 object ‘py_error’, includes default print method. python Exception object (‘python.builtin.Exception’) available R attribute. Gains ability restore previous exception provided call py_last_error(previous_error) Python traceback objects gain default format() S3 method. Fixed py_to_r() scipy matrices scipy >= 1.8.0, since sparse matrices now deprecated. Fixed r_to_py() small scipy matrices. New maintainer: Tomasz Kalinowski","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-124","dir":"Changelog","previous_headings":"","what":"reticulate 1.24","title":"reticulate 1.24","text":"CRAN release: 2022-01-26 Fixed issue reticulate fail bind system version Python macOS command line tools installed, Xcode .","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-123","dir":"Changelog","previous_headings":"","what":"reticulate 1.23","title":"reticulate 1.23","text":"CRAN release: 2022-01-14 use_condaenv() gains ability accept absolute path python binary envname. python objects gain length() method, returns either py_len(x), fails, .integer(py_bool(x)). conda_create() default python_version changed NULL miniconda_python_version() (presently, 3.8). New function py_bool(), evaluating Python “truthiness” object. reticulate gains function py_list_packages(), can used list Python modules available installed particular Python environment. (#933) reticulate now supports conversion Python datatable objects. (#1081) repl_python() gains support invoking select magic system commands like !ls %cd <dir>. See ?repl_python() details examples. development branch reticulate moved “main” branch. reticulate gains reticulate::conda_update(), updating version conda particular conda installation. reticulate gains reticulate::miniconda_uninstall(), uninstalling reticulate-managed version Miniconda. (#1077) reticulate::use_python() friends now assume required = TRUE default. backwards compatibility, use_python() called part package load hook, default value instead FALSE. reticulate now provides support Python environments managed poetry. projects containing pyproject.toml file, reticulate attempt find use virtual environment managed Poetry project. (#1031) default version Python used r-reticulate Miniconda environment installed via reticulate::install_miniconda() changed 3.6 3.8. reticulate::install_miniconda() now prefers installing latest arm64 builds miniforge. See https://conda-forge.org/blog/posts/2020-10-29-macos-arm64/ details. reticulate::conda_create() gains environment argument, used creating new conda environment based exported environment definition (e.g. environment.yml environment.json). reticulate gains function, conda_export(), exporting conda environment definition YAML. Environments exported via conda env export command. (#779) reticulate::find_conda() now locate miniforge Conda installations located within default install locations. Fixed issue caused reticulate::conda_install(pip = TRUE) fail windows. (#1053, @t-kalinowski)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-122","dir":"Changelog","previous_headings":"","what":"reticulate 1.22","title":"reticulate 1.22","text":"CRAN release: 2021-09-17 Fixed regression caused reticulate::conda_install(pip = TRUE) fail. (#1052)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-121","dir":"Changelog","previous_headings":"","what":"reticulate 1.21","title":"reticulate 1.21","text":"CRAN release: 2021-09-14 use_condaenv(\"base\") can now used activate base Anaconda environment. reticulate now execute hooks registered via setHook(\"reticulate.onPyInit\", <...>) Python initialized. can useful packages need take action reticulate initialized Python. refined interrupt handling. Fixed issue attempting bind reticulate /usr/bin/python3 macOS fail Xcode installed. (#1017) reticulate Python REPL longer exits top-level interrupt sent (e.g. via Ctrl + C). miniconda auto-installer now supports aarch64 Linux machines. (#1012) Fixed issue matplotlib plots incorrectly overwritten multiple Python chunks R Markdown document included plot output. (#1010) reticulate can now use version Python configured projects using pipenv. project contains Pipfile root directory (understood ::()), reticulate invoke pipenv --venv determine path Python virtual environment associated project. Note RETICULATE_PYTHON environment variable, well usages use_python(..., force = TRUE), still take precedence. (#1006) Fixed issue reticulate::py_run_string(..., local = TRUE) failed return dictionary defined Python objects cases.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-120","dir":"Changelog","previous_headings":"","what":"reticulate 1.20","title":"reticulate 1.20","text":"CRAN release: 2021-05-03 Fixed issue causing tests fail CRAN’s M1mac machine.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-119","dir":"Changelog","previous_headings":"","what":"reticulate 1.19","title":"reticulate 1.19","text":"CRAN release: 2021-04-21 Fixed issue reticulate’s interrupt handlers cause issues newer versions Python. reticulate now better handles Pandas categorical variables containing NA values. (#942) reticulate now supports converting pandas.NA objects R NA objects. (#950) reticulate now sets PYTHONIOENCODING environment variable UTF-8 running within RStudio. allow UTF-8 input output handled appropriately. reticulate gains install_python() function, used install different versions Python via pyenv (pyenv-windows Windows). Interrupt signals (e.g. generated Ctrl + C) now better handled reticulate. particular, repl_python() active, Ctrl + C can used interrupt pending Python computation. virtualenv_create() gains pip_version setuptools_version arguments, allowing users control versions pip setuptools used initializing virtual environment. extra argument can also now used pass arbitrary command line arguments necessary. virtualenv_create() gains module argument, used control whether virtualenv venv used create requested virtual environment. py_to_r.datetime.datetime longer errs tzname NULL, instead assumes time formatted UTC. (#876) reticulate now supports rendering plotly plots Altair charts rendered R Markdown documents. (#711) reticulate now avoids invoking property methods inferring type Python class members, auto-completion systems. (#907) reticulate now attempts set QT_QPA_PLATFORM_PLUGIN_PATH environment variable initializing Conda installation Python, associated plugins directory exists. (#586) reticulate Python engine now supports results = \"hold\" knitr chunk option. set, generated outputs “held” displayed associated chunk’s source code. (#530) conda_create() gains python_version argument, making easier request Conda environments created pre-specified version Python. (#766) Fixed issue reticulate::conda_install() attempt re-install default Python package, potentially upgrading downgrading version Python used environment. Fixed issue reticulate invoked reticulate.initialized hook early. Fixed issue Python modules loaded separate thread cause crash. (#885) conda_install() now allows version specifications python_version argument; e.g. conda_install(python_version = \">=3.6\"). (#880) Fixed issue conda_install() failed pass along forge channel calls conda_create(). (#878) Fixed issue Python’s auto-loader hooks fail binding Python 2.7 installation.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-118","dir":"Changelog","previous_headings":"","what":"reticulate 1.18","title":"reticulate 1.18","text":"CRAN release: 2020-10-25 Fixed issue python_config() throw error attempting query information Python 2.6 installation.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-117","dir":"Changelog","previous_headings":"","what":"reticulate 1.17","title":"reticulate 1.17","text":"CRAN release: 2020-10-21 reticulate now checks disallows installation Python packages R CMD check. reticulate longer injects r helper object main module another variable called r already defined. function py_help_handler() now exported, used front-ends tools need provide help Python objects different contexts. (#864) Fixed issue timezone information lost converting Python datetime objects R. (#829) Fixed issue numeric (rather integer) dimensions cause issues converting SciPy sparse matrices R counterparts. (#844) Fixed issue R data.frames non-ASCII column names converted Pandas DataFrames. (#834) Fixed issue pip_ignore_installed argument conda_install() silently ignored. Fixed issue reticulate::conda_install() re-install Python environment explicitly requested user. reticulate now sets LD_LIBRARY_PATH discovering Python. (#836) reticulate now better capturing Python logger streams (write stdout stderr) py_capture_output() set. (#825) reticulate longer calls utils::loadhistory() REPL iteration. reticulate now better detects Python modules loaded. reticulate::import_from_path() now accepts delay_load parameter, allowing modules loaded pre-specified path lazy-loaded. Fixed issue reticulate load hooks (normally defined via setHook(\"reticulate::<module>::load\", ...)) segfault hooks attempted load hooked module. reticulate now attempts resolve conda binary used create associated Conda environment calls py_install(). fix use cases Conda environments placed outside Conda installation . reticulate now sets PYTHONPATH loading Python, ensure modules looked locations regular Python interpreter find load. fix issues reticulate unable bind Python virtual environment cases. reticulate::virtualenv_create() gains packages argument, allowing one choose set packages installed (via pip install) virtual environment created. reticulate::virtualenv_create() gains system_site_packages argument, allowing one control whether --system-site-packages flag passed along creating new virtual environment. default value can customized via \"reticulate.virtualenv.system_site_packages\" option now defaults FALSE unset. Fixed issue reticulate::configure_environment() fail attempting configure Anaconda environment. (#794) reticulate now avoids presenting Miniconda prompt interactive sessions R session initialization. Fixed unsafe usages Rprintf() REprintf(). reticulate::py_install() better respects method argument, py_install() called without explicit environment name. (#777) reticulate:::pip_freeze() now better handles pip direct references. (#775) Fixed issue output generated repl_python() buffered whole submitted command completed. (#739, @randy3k) reticulate now explicitly qualifies symbols used TinyThread tthread::, avoid issues symbol conflicts compilation. (#773) reticulate now prefer existing Miniconda installation conda binary PATH, looking Conda. (#790)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-116","dir":"Changelog","previous_headings":"","what":"reticulate 1.16","title":"reticulate 1.16","text":"CRAN release: 2020-05-27 TinyThread now calls Rf_error() rather std::terminate() internal error occurs. Conversion Pandas DataFrames R longer emits deprecation warnings pandas >= 0.25.0. (#762) reticulate now properly handles version strings returned beta versions pip. (#757) conda_create() gains forge channel arguments, analogous already conda_install(). (#752, @jtilly)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-115","dir":"Changelog","previous_headings":"","what":"reticulate 1.15","title":"reticulate 1.15","text":"CRAN release: 2020-04-02 reticulate now ensures SciPy csr_matrix objects sorted attempting convert R equivalent. (#738, @paulofelipe) Fixed issue calling input() Python prompt fail. (#728) Lines ending semi-colon longer auto-printed reticulate REPL. (#717, @jsfalk) reticulate now searches Conda binaries /opt/anaconda /opt/miniconda. (#713) conda executable used reticulate can now configured using R option. Use options(reticulate.conda_binary = <...>) force reticulate use particular conda executable. reticulate::use_condaenv() better handles cases matching environment found. (#687) reticulate gains py_ellipsis() function, used access Python Ellipsis builtin. (#700, @skeydan) reticulate::configure_environment() now allows environment configuration within interactive R sessions, ensures version Python initialized Python indeed associated virtual environment Conda environment. Use reticulate::configure_environment(force = TRUE) force environment configuration within non-interactive R sessions. reticulate now automatically flushes output written Python’s stdout / stderr, top-level task added addTaskCallback(). behavior controlled options(reticulate.autoflush) option. (#685) reticulate::install_miniconda() longer attempts modify system PATH registry installing Miniconda. (#681) reticulate::conda_install() gains channel argument, allowing custom Conda channels used installing Python packages. (#443) reticulate::configure_environment() can now used configure non-Miniconda Python environment. (#682; @skeydan) Fixed issue matplotlib plots included using absolute paths, fails non-standalone documents rendered HTML. (#669) Fixed issue reticulate attempt flush non-existent stdout / stderr stream. (#584)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-114","dir":"Changelog","previous_headings":"","what":"reticulate 1.14","title":"reticulate 1.14","text":"CRAN release: 2019-12-17 Fixed issue rmarkdown::render() fail including matplotlib plots knit_root_dir set. (#645) reticulate now scans Conda installations within ~/opt folder, per updated installers distributed macOS. (#661) Python classes can now defined directly R using PyClass() function. (#635; @dfalbel) reticulate now compatible Python 3.9. (#630, @skeydan) Pandas DataFrames large number columns now converted R data.frames quickly. (#620, @skeydan) Python loggers now better behaved Python chunks R Markdown documents. (#386) reticulate now attempt bind python3 rather python, version Python explicitly requested e.g. use_python(). reticulate now provides R hooks Python’s input() raw_input() functions. now possible read user input Python scripts loaded reticulate. (#610) reticulate now consistently normalizes paths reported py_config(). (#609) reticulate now provides mechanism allowing client packages declare Python package dependencies. Packages declare Python packages require part Config/reticulate field DESCRIPTION file. Currently, activated using Miniconda; assumption users otherwise prefer manually manage Python environments. Please see vignette(\"python_dependencies\") details. reticulate now prompt user create use Miniconda environment suitable Python environment already requested. help ease trouble setting Python environment different platforms. installer code contributed @hafen, rminiconda package. Fixed issue virtualenv_create(..., python = \"<python>\") fail use requested version Python venv installed. (#399) Fixed issue iterable Python objects iterated iter_next() due missing class. (#603) Fixed issue Conda environments mis-detected virtual environments. R functions wrapping Python functions now inherit formal arguments specified Python, making autocompletion reliable. (#573, @flying-sheep) Fixed issue attempts query Conda environments fail Windows. (#576; #575; @dfalbel) Properly check NULL keyword arguments call_r_function(). (#562, @dfalbel)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-113","dir":"Changelog","previous_headings":"","what":"reticulate 1.13","title":"reticulate 1.13","text":"CRAN release: 2019-07-24 Fixed issue subsetting [.python.builtin.object fail convert = TRUE set associated Python object. (#554) Fixed issue wrong definition [[.python.builtin.object exported. (#554) py_install() now accepts python_version, can used particular version Python required Conda environment. (argument ignored virtual environments.) (#549) Fixed issue reticulate segfault cases (e.g. using iterate() function). (#551) now possible compile reticulate support debug versions Python setting RETICULATE_PYTHON_DEBUG preprocessor define compilation. (#548) reticulate now warns honor user’s request load particular version Python, e.g. reticulate::use_python(). (#545) py_save_object() py_load_object() now accept ... arguments. (#542) py_install() revamped, now better detects available Python tooling (virtualenv vs. venv vs. Conda). (#544) reticulate now flushes stdout / stderr calls py_run_file() py_run_string(). Python tuples now converted recursively, way Python lists . means sub-elements tuple converted R objects possible. (#525, @skeydan) Python OrderedDict objects non-string keys now properly converted R. (#516) Fixed issue reticulate crash failed attempt load NumPy. (#497, @ecoughlan)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-112","dir":"Changelog","previous_headings":"","what":"reticulate 1.12","title":"reticulate 1.12","text":"CRAN release: 2019-04-12 Fixed issue Python objects within Python lists converted R objects expected. Fixed issue single-row data.frames row names converted. (#468) Fixed issue reticulate fail query Anaconda environment names Anaconda 3.7. Fixed issue vectors R Dates converted correctly. (#454) Fixed issue R Dates passed Python functions. (#458)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-1111","dir":"Changelog","previous_headings":"","what":"reticulate 1.11.1","title":"reticulate 1.11.1","text":"CRAN release: 2019-03-06 Fixed failing virtual environment test CRAN.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-111","dir":"Changelog","previous_headings":"","what":"reticulate 1.11","title":"reticulate 1.11","text":"CRAN release: 2019-02-27 Fixed issue attempts activate virtual environments created virtualenv 16.4.1 fail. (#437) Fixed issue conversion Pandas Categorical variables R objects fail. (#389) Textual output generated adding items matplotlib plot object now suppressed. last statement Python chunk returns matplotlib plot object, plot now auto-shown environments. reticulate function help handler now returns function arguments Python builtin functions. Top-level Python statements can now include leading indent submitted repl_python(). current matplotlib figure now cleared Python chunk R Markdown document run. r helper object (used evaluating R code Python) now better handles conversion R functions. (#383) use_virtualenv() function now understands bind virtual environments created Python venv module. Reticulate better handles conversions R lists Python, similarly, Python lists R. now call r_to_py() sub-element R list, similarly, py_to_r() sub-element Python list. Reticulate now always converts R Date objects Python datetime objects. Note conversions can inefficient – prefer conversion NumPy datetime64 objects / arrays, convert date POSIXct first. Python chunks containing errors cause execution halt ‘error=FALSE’ render, conforming default knitr behavior R chunks. output bare statements (e.g. 1 + 1) now emitted output using reticulate Python engine. Remapping Python output streams R can now explicitly enabled setting environment variable RETICULATE_REMAP_OUTPUT_STREAMS 1. (#335) Allow syntax errors Python chunks ‘eval = FALSE’ (#343) Avoid dropping blank lines Python chunks (#328) Use “agg” matplotlib backend running RStudio Desktop (avoids crashes attempting generate Python plots) Add .character() S3 method Python bytes (defaults converting using UTF-8 encoding) Add py_main_thread_func() providing R callbacks Python libraries may invoke function Python background thread. Add py_to_r S3 methods Scipy sparse matrices: CSR dgRMatrix, COO dgTMatrix, sparse matrices, conversion via CSC/dgCMatrix.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-110","dir":"Changelog","previous_headings":"","what":"reticulate 1.10","title":"reticulate 1.10","text":"CRAN release: 2018-08-05 Output now properly displayed using reticulate REPL Windows + Python 2.7. Address memory protection issues identified rchk Make variables defined using %% operator () available execution block (behavior Python). Check presence “module” property reading as_r_class() update pip virtualenv_install() version < 8.1 Support converting Python OrderedDict R Support iterating types Python iterable Add conda_python() virtualenv_python() functions finding python binary associated environment.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-19","dir":"Changelog","previous_headings":"","what":"reticulate 1.9","title":"reticulate 1.9","text":"CRAN release: 2018-07-06 Detect python 3 environments python 2 (e.g. Ubuntu 18.04) Always call r_to_py S3 method converting objects Python R Handle NULL module name determining R class Python objects Convert RAW vectors Python bytearray; Convert Python bytearray RAW Use importlib detecting modules (rather imp) Python >= 3.4 Close text connection used reading Python configuration probe","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-18","dir":"Changelog","previous_headings":"","what":"reticulate 1.8","title":"reticulate 1.8","text":"CRAN release: 2018-06-08 source_python() now flushes stdout stderr running associated Python script, ensure print()-ed output output console. (#284) Fixed issue logical R matrices converted correctly NumPy counterpart. (#280) Fixed issue Python chunks containing multiple statements line evaluated printed multiple times. Added py_get_item(), py_set_item(), py_del_item() lower-level APIs directly accessing items e.g. Python dictionary Pandas DataFrame. Fix issue Pandas column names clash built methods (e.g. ‘pop’) Improve default str() output Python objects (print __dict__ available)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-17","dir":"Changelog","previous_headings":"","what":"reticulate 1.7","title":"reticulate 1.7","text":"CRAN release: 2018-04-28 Improved filtering non-numeric characters Python / NumPy versions. Added py_func() wrap R function Python function signature original R function. Added support conversion Matrix::dgCMatrix objects R Scipy CSC matrices Python. source_python() can now source Python script URL R environments. Always run source_python() main Python module. py_install() function installing Python packages virtualenvs conda envs Automatically create conda environment conda_install() Removed delay_load parameter import_from_path()","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-16","dir":"Changelog","previous_headings":"","what":"reticulate 1.6","title":"reticulate 1.6","text":"CRAN release: 2018-03-21 repl_python() function implementing lightweight Python REPL R. Support converting Pandas objects (Index, Series, DataFrame) Support converting Python datetime objects. py_dict() function enable creation dictionaries based lists keys values. Provide default base directory (e.g. ‘~/.virtualenvs’) environments specified name use_virtualenv(). Fail environment found use_condaenv(..., required = TRUE) Ensure use_* python version satisfied using eng_python() Forward required argument use_virtualenv() use_condaenv() Fix leak occurred assigning R objects Python containers Add support Conda Forge (enabled default) conda_install() Added functions managing Python virtual environments (virtualenv)","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-15","dir":"Changelog","previous_headings":"","what":"reticulate 1.5","title":"reticulate 1.5","text":"CRAN release: 2018-02-14 Remove implicit documentation extraction Python classes Add Library\\bin PATH Windows ensure Anaconda can find MKL New source_python() function sourcing Python scripts R environments.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-14","dir":"Changelog","previous_headings":"","what":"reticulate 1.4","title":"reticulate 1.4","text":"CRAN release: 2018-01-09 Support RETICULATE_DUMP_STACK_TRACE environment variable can set number milliseconds output stderr call stacks running threads. Provide hook change target module delay loading Scan conda environments system-level installations Support miniconda environments Implement eval, echo, include knitr chunk options Python engine","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-131-1","dir":"Changelog","previous_headings":"","what":"reticulate 1.3.1","title":"reticulate 1.3.1","text":"CRAN release: 2017-11-24 Bugfix: ensure single-line Python chunks produce output still source code emitted.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-13","dir":"Changelog","previous_headings":"","what":"reticulate 1.3","title":"reticulate 1.3","text":"CRAN release: 2017-11-16 Use existing instance Python reticulate loaded within embedded Python environment (e.g. rpy2, rice, etc.) Force use Python specified PYTHON_SESSION_INITIALIZED (defined rpy2) Define R_SESSION_INITIALIZED (used rpy2) Force use Python required = TRUE use_python functions Force use Python specified RETICULATE_PYTHON dict: Don’t scan parent frame Python objects single unnamed list passed. Wait long required scheduling generator calls main thread Refine stripping object addresses output py_str() method Added py_id() function get globally unique ids Python objects Added py_len() function S3 length() method Python lists (already length() methods dicts, tuples, NumPy arrays). Exported py object (reference Python main module) Added eng_python() (knitr engine Python chunks) Improved compatibility strings containing high unicode characters running Python 2 Remove dim methods NumPy arrays (semantics NumPy reshaping different R reshaping) Added array_reshape function reshaping R arrays using NumPy (row-major) semantics. Provide mechanism custom R wrapper objects Python objects Added interface pickle (py_save_object() py_load_object()) Catch print errors occur generator functions Write using Rprintf providing custom Python output streams (enables correct handling terminal control characters) Implement isatty providing custom Python output streams","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-12","dir":"Changelog","previous_headings":"","what":"reticulate 1.2","title":"reticulate 1.2","text":"CRAN release: 2017-09-27 Add np_array function creating NumPy arrays converting data type, dimensions, -memory ordering existing NumPy arrays. Add dim length functions NumPy arrays Add py_set_seed function setting Python NumPy random seeds. Search additional locations Anaconda Linux/Mac Improved support UTF-8 conversions (always use UTF-8 converting Python R) Ignore private (“_” prefixed) attributes dictionaries .DollarNames Provide “`function`” rather “function” completions. Fail gracefully call conda conda_list results error Add pip_ignore_installed option conda_install function.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-11","dir":"Changelog","previous_headings":"","what":"reticulate 1.1","title":"reticulate 1.1","text":"CRAN release: 2017-08-26 Allow dict() function accept keys mixed alpha/numeric characters Use conda_list() discover conda environments Windows (slower much reliable scanning filesystem) Add interface registering F1 help handlers Python modules Provide virtual/conda env hint mechanism delay loaded imports","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-10","dir":"Changelog","previous_headings":"","what":"reticulate 1.0","title":"reticulate 1.0","text":"CRAN release: 2017-07-25 Search WORKON_HOME (used virtualenv_wrapper) Python environments Support priority field delay loaded modules. Use json output conda_list (handle spaces path conda env) Look callable iterable converting Python objects R Correct propagation errors R functions called Python Support generators (creating Python iterators R functions) Changed default completed value iter_next() NULL (NA) Support converting 16-bit floats (NPY_HALF) R Don’t throw error probing Python <= 2.6 Copy Python dictionary converting R named list (fixes issue dictionaries mutated iteration, e.g. sys.modules) Ensure existing warning filters aren’t reset py_suppress_warnings","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-09","dir":"Changelog","previous_headings":"","what":"reticulate 0.9","title":"reticulate 0.9","text":"CRAN release: 2017-06-23 Detect older versions Anaconda registry scanning. Don’t probe python versions windows executable found Poll interrupts every 500ms rather 100ms Provide sys.stdout sys.stderr None (e.g. R GUI) Add Scripts directory PATH Windows Add iter_next function element--element access iterators Eliminate special print method iterators/generators Added py_help() function printing documentation Python objects Added conda_version() function. Search dict() parent frames symbols; use symbols inherit python.builtin.object keys.","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-08","dir":"Changelog","previous_headings":"","what":"reticulate 0.8","title":"reticulate 0.8","text":"CRAN release: 2017-05-22 Add import_from_path() function importing Python modules filesystem. Add py_discover_config() function determine versions Python discovered one used reticulate. Add py_function_docs() amd py_function_wrapper() utility functions scaffolding R wrappers Python functions. Add py_last_error() function retrieving last Python error. Convert 0-dimension NumPy arrays (scalars) single element R vectors Convert “callable” Python objects R functions Automatically add Python bin directory system PATH consistent version usage reticulate calls system Added length() method tuple objects Enable specification __name__ R functions converted Python functions. Give priority first registered delay load module (previously last registered module given priority) Add additional safety checks detect use NULL xptr objects (.e. objects previous session). mean S3 methods longer need check whether handling xptr. Added py_eval() function evaluating simple Python statements. Add local option py_run_string() py_run_file(). Modify behavior return local execution dictionary (rather reference main module). Use PyImport_Import rather PyImport_ImportModule import() Added ability customize mapping Python classes R classes via argument import() register_class_filter() function Added separate on_load on_error functions delay_load Scan customary root directories virtualenv installations Allow calling __getitem__ via [[ operator (zero-based match Python style indexing) Added conda_* family functions using conda utilities within R. Implement comparison operators (e.g. ==, >=, etc.) Python objects Implement names() generic Python objects Improve performance marshalling large Python dictionaries iterators return large numbers items. Implement str methods Python List, Dict, Tuple (prevent printing large collections via default str method) Use grepl() rather endsWith() compatibility R <= 3.2 Use inspect.getmro rather __bases__ enumerating base classes Python objects. Fix PROTECT/UNPROTECT issue detected CRAN Correct conversion strings Unicode characters Windows Fix incompatibility system-wide Python installations Windows Fix issue Python dictionary keys shared names primitive R functions (don’t check environment inheritance chain looking dictionary key objects name). Propagate convert parameter modules delay_load","code":""},{"path":"https://rstudio.github.io/reticulate/dev/news/index.html","id":"reticulate-07","dir":"Changelog","previous_headings":"","what":"reticulate 0.7","title":"reticulate 0.7","text":"CRAN release: 2017-03-14 Initial CRAN release","code":""}]
