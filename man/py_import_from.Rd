% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import.R
\name{py_import_from}
\alias{py_import_from}
\title{Import objects from a Python module}
\usage{
py_import_from(module, ..., .convert = TRUE, .env = parent.frame())
}
\arguments{
\item{module}{string, name of python module}

\item{...}{names of objects to import as bare expressions. Can be named to
change the binding name in R. rlang dynamic dots are supported.}

\item{.convert}{passed on to \code{import()}}

\item{.env}{R environment where to assign the imported symbols.}
}
\value{
\code{NULL} invisibly. This function is called for its side effect of
assigning symbols in \code{.env}.
}
\description{
Import objects from a Python module
}
\details{
This function is useful for porting the Python idiom \verb{from foo import abc, hjk, xyz} to R. Here are few examples:\tabular{ll}{
   Python \tab R \cr
   \verb{from numpy import abs} \tab \code{py_import_from("numpy", abs)} \cr
   \verb{from jax import grad, jit, vmap} \tab \code{py_import_from("jax", grad, jit, vmap)} \cr
   \verb{from datetime import date as d, time as t} \tab \code{py_import_from("datetime", d = date, t = time)} \cr
}
}
