% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/py_require.R
\name{py_require}
\alias{py_require}
\title{Declare Python requirements}
\usage{
py_require(
  packages = NULL,
  python_version = NULL,
  exclude_newer = NULL,
  action = c("add", "remove", "set")
)
}
\arguments{
\item{packages}{A vector of Python packages to make available during the
working session.}

\item{python_version}{A vector of one, or multiple, Python versions to
consider. \code{uv} will not be able to process conflicting Python versions
(e.g.: '>=3.11', '3.10').}

\item{exclude_newer}{Leverages a feature from \code{uv} that allows you to limit
the candidate package versions to those that were uploaded prior to a given
date. During the working session, the date can be "added" only one time.
After the first time the argument is used, only the 'set' \code{action} can
override the date afterwards.}

\item{action}{What \code{py_require()} should do with the packages and Python
version provided during the given command call. There are three options:
\itemize{
\item add - Adds the requirement to the list
\item remove - Removes the requirement form the list. It has to be an exact match
to an existing requirement. For example, if 'numpy==2.2.2' is currently on
the list, passing 'numpy' with a 'remove' action will affect the list.
\item set - Deletes any requirement already defined, and replaces them with what
is provided in the command call. Packages and Python version can be
independently set.
}}
}
\description{
It allows you to specify the Python packages, and their versions, to use
during your working session. It also allows to specify Python version
requirements. It uses \href{https://docs.astral.sh/uv/}{uv} to automatically
resolves multiple version requirements of the same package (e.g.:
'numpy>=2.2.0', numpy==2.2.2'), as well as resolve multiple Python version
requirements (e.g.: '>=3.10', '3.11').  \code{uv} will automatically download and
install the resulting Python version and packages, so there is no need to
take any steps prior to starting the Python session.
}
\details{
The virtual environment will not be initialized until the users attempts to
interacts with Python for the first time during the session. Typically,
that would be the first time \code{import()} is called.

If \code{uv} is not installed, \code{reticulate} will attempt to download and install
a version of it in an isolated folder. This will allow you to get the
advantages of \code{uv}, without modifying your computer's environment.
}
